<?php

define('CONTENT_MIGRATE_DATABASE_NAME', variable_get('content_migrate_database', 'source_db_name'));
define('CONTENT_MIGRATE_DB_PREFIX', variable_get('content_migrate_unt_source_db_prefix', ''));

/**
 * Implements hook_migrate_api().
 * For migration classes to be recognized by the Migrate module.
 */
function content_migrate_unt_migrate_api() {
  $api = array(
    'api' => 2,
    'migrations' => array(
      'PersonTypeTerm' => array('class_name' => 'PersonTypeTermMigration'),
      'GlossaryTerm' => array('class_name' => 'GlossaryTermMigration'),
      'ContentCategoryTerm' => array('class_name' => 'ContentCategoryTermMigration'),
      'SeriesTerm' => array('class_name' => 'SeriesTermMigration'),
      'ManuscriptLanguageTerm' => array('class_name' => 'ManuscriptLanguageTermMigration'),
      'ManuscriptProvenanceTerm' => array('class_name' => 'ManuscriptProvenanceTermMigration'),
      'ManuscriptCollectionAriTerm' => array('class_name' => 'ManuscriptCollectionAriTermMigration'),
      'PersonRoleTerm' => array('class_name' => 'PersonRoleTermMigration'),
      'PersonDepartmentTerm' => array('class_name' => 'PersonDepartmentTermMigration'),
      'VideoNode' => array('class_name' => 'VideoNodeMigration'),
      'SpotLightNode' => array('class_name' => 'SpotLightNodeMigration'),
      'NewsNode' => array('class_name' => 'NewsNodeMigration'),
      'LearningNode' => array('class_name' => 'LearningNodeMigration'),
      'EventsNode' => array('class_name' => 'EventsNodeMigration'),
      'PeopleNode' => array('class_name' => 'PeopleNodeMigration'),
      'AuthorNode' => array('class_name' => 'AuthorNodeMigration'),
      'GraduatesNode' => array('class_name' => 'GraduatesNodeMigration'),
      'ResearchNode' => array('class_name' => 'ResearchNodeMigration'),
      'PublicationsNode' => array('class_name' => 'PublicationsNodeMigration'),
      'LibraryNode' => array('class_name' => 'LibraryNodeMigration'),
    ),
  );
  return $api;
}

/**
 * Implements hook_menu().
 */
function content_migrate_unt_menu() {
  $items = array();
  $items['admin/config/services/content_migrate_unt_source'] = array(
    'title' => 'Migration - Database settings',
    'description' => 'Get the database name.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('content_migrate_unt_config'),
    'access arguments' => array('administer DRUPAL migration'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/config/services/content_migrate_unt_source/db'] = array(
    'title' => 'Content migration - Database settings',
    'description' => 'Get the database name.',
    'access arguments' => array('administer DRUPAL migration'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  return $items;
}

/**
 * Implements hook_perm().
 */
function content_migrate_unt_perm() {
  return array('administer DRUPAL migration');
}

/**
 * Form for getting the Typo3 database name.
 */
function content_migrate_unt_config($form_state) {
  $form['content_migrate_database'] = array(
    '#type' => 'textfield',
    '#title' => t('Database Name'),
    '#description' => t('The Content db must be accessible by the drupal db user and must reside on the same db server.'),
    '#default_value' => variable_get('content_migrate_database', 'source_db_name'),
    '#required' => TRUE
  );
  $form['content_migrate_unt_source_db_prefix'] = array(
    '#type' => 'textfield',
    '#title' => t('Database prefix'),
    '#description' => t('Prefix used for all the tables in the producttion/source db for migration.'),
    '#default_value' => variable_get('content_migrate_unt_source_db_prefix', ''),
    '#required' => FALSE
  );
    $form['content_migrate_unt_base_url'] = array(
    '#type' => 'textfield',
    '#title' => t('Site Base Url'),
    '#description' => t('Set base url for image processing of current site.'),
    '#default_value' => variable_get('content_migrate_unt_base_url', ''),
    '#required' => FALSE
  );
  $form['content_migrate_unt_org_base_url'] = array(
    '#type' => 'textfield',
    '#title' => t('Original Site Base Url'),
    '#description' => t('Set Original base url for image processing without trailing slash.'),
    '#default_value' => variable_get('content_migrate_unt_org_base_url', 'http://iis.ac.uk'),
    '#required' => FALSE
  );
  $form['content_migrate_unt_cms_content'] = array(
    '#type' => 'checkbox',
    '#title' => t('Is srijan_custom_cms_content table Ready ?'),
    '#default_value' => variable_get('content_migrate_unt_cms_content', FALSE),
    '#description' => t('Check if content publish status check table is populated.'),
  );
  $form['content_migrate_unt_learning_article_tid'] = array(
    '#type' => 'textfield',
    '#title' => t('Learning Article Taxonomy'),
    '#default_value' => variable_get('content_migrate_unt_learning_article_tid', 12),
    '#description' => t('Specify the Learning article taxonomy tid.'),
  );
  $form['content_migrate_unt_author_people_tid'] = array(
    '#type' => 'textfield',
    '#title' => t('People Author Taxonomy'),
    '#default_value' => variable_get('content_migrate_unt_author_people_tid', 580),
    '#description' => t('Specify the People Author taxonomy tid.'),
  );
  $form['content_migrate_unt_staff_people_tid'] = array(
    '#type' => 'textfield',
    '#title' => t('People Staff Taxonomy'),
    '#default_value' => variable_get('content_migrate_unt_staff_people_tid', 579),
    '#description' => t('Specify the People Staff taxonomy tid.'),
  );
  $form['content_migrate_unt_newsletter_na_tid'] = array(
    '#type' => 'textfield',
    '#title' => t('Newsletter NOT APPLICABLE Taxonomy'),
    '#default_value' => variable_get('content_migrate_unt_newsletter_na_tid', 601),
    '#description' => t('Specify the Newsletter taxonomy for Not Applicable Content.'),
  );
  $form['content_migrate_unt_migrate_testing'] = array(
    '#type' => 'checkbox',
    '#title' => t('Testing of Migration'),
    '#default_value' => variable_get('content_migrate_unt_migrate_testing', FALSE),
    '#description' => t('Check if want to test migration. Disable for Actual migration'),
  );
  $form['content_migrate_unt_skip_image_handling'] = array(
    '#type' => 'checkbox',
    '#title' => t('Skip Body Image handling for Testing of Migration'),
    '#default_value' => variable_get('content_migrate_unt_skip_image_handling', FALSE),
    '#description' => t('Check if want to stop image handling for testing. Disable for Actual migration'),
  );
  $form['content_migrate_unt_test_timestamp'] = array(
    '#type' => 'textfield',
    '#title' => t('Test Timestamp for Created date'),
    '#default_value' => variable_get('content_migrate_unt_test_timestamp', 0),
    '#description' => t('Specify Test timestamp for Created time'),
  );
  $form['content_migrate_unt_file_extensions'] = array(
    '#type' => 'textfield',
    '#title' => t('File Extensions'),
    '#default_value' => variable_get('content_migrate_unt_file_extensions',
      "pdf,docx,doc,wmv,ram"),
    '#description' => t('Specify possible file extensions placed in body'),
  );
  return system_settings_form($form);
}

/**
 * Get image source, caption and body data
 * @param type $body
 * @param type $substitute
 */
function content_migrate_unt_body_image_info($body, $find_tag = '<IMG ') {
  // read all image tags into an array
  $body = str_ireplace("<img", "<IMG", $body);
  preg_match_all('/<IMG[^>]+>/i', $body, $img_tags);
  $orig_image_src = array();
  for ($i = 0; $i < count($img_tags[0]); $i++) {
  // get the source string
    preg_match('/src="([^"]+)/i', $img_tags[0][$i], $imgage);
    // remove opening 'src=' tag, can`t get the regex right
    $orig_image_src[]['src'] = str_ireplace( 'src="', '',  $imgage[0]);
  }
  // will output all your img src's within the html string
  return $orig_image_src;
}

/**
 * Get only data part inside a particular tag
 * @param  string $body
 * @param  string $tagname
 * @return string
 */
function content_migrate_unt_find_replace_tags($body , $tagname = 'A') {
  $find_replace = content_migrate_unt_remove_link_tags($body);
  foreach ($find_replace as $pos => $pattern) {
    if (!isset($pattern[0])) {
      continue;
    }
    $body = str_ireplace($pattern[0], $pattern[1], $body);
  }
  return $body;
}

/**
 * Process A tag and only allow data in it
 * @param  string
 * @return string
 */
function content_migrate_unt_remove_link_tags($body, $tagname = 'A') {
  $find_occurences = content_migrate_unt_all_string_occurences($body, '<' . $tagname);
  $find_replace = array();
  for ($start = 0; $start < $find_occurences ['total']; $start++) {
    $begin = $find_occurences['positions'][$start]['start'];
    $end = (isset($find_occurences['positions'][$start]['end'])) ? intval($find_occurences['positions'][$start]['end']) : 0;
    if ($end > 0) {
      $string = substr($body, $begin, $end - $begin - 2);
    }
    else {
      $string = substr($body, $begin);
    }
    $match = content_migrate_unt_get_text_between_tags($string, $tagname);
    $action['find'] = $string;
    $find_replace[] = $match;
  }
  return $find_replace;
}

/**
 * Get Tag text
 * @param  [type] $string
 * @param  [type] $tagname e.g. h1, h2, p, A
 * @return [type]
 */
function content_migrate_unt_get_text_between_tags($string, $tagname) {
  preg_match("/<" . $tagname . "[^>]*>(.*?)<\\/" . $tagname . ">/", $string, $match);
  return $match;
 }

/**
 * Get all positions of a tag in the given string
 * @param type $string
 * @param type $find
 * @return int
 */
function content_migrate_unt_all_string_occurences($string, $find) {
  $output = array('total' => 0, 'positions' => '');
  if (strpos(strtolower($string), strtolower($find)) !== FALSE) {
    $pos = -1;
    $start = 0;
    for ($i = 0; $i < substr_count(strtolower($string), strtolower($find)); $i++) {
      $pos = strpos(strtolower($string), strtolower($find), $pos + 1);
      if ($start > 0) {
        $output['positions'][$start - 1]['end'] = $pos - 1;
      }
      $output['positions'][$start]['start'] = $pos;
      $start++;
      $output['total'] = $start;
    }
    return $output;
  }
  else {
    return $output;
  }
}

/**
 * Get complete image tags
 * @param type $body
 * @return type
 */
function content_migrate_unt_complete_image_tag($body) {
  $output = array('total' => 0, 'images' => array());
  $data = content_migrate_unt_image_source_info($body);
  $output['total'] = count($data[3]);
  if (isset($data[3]) && count($data[3]) > 0) {
    foreach ($data[3] as $pos => $info) {
      $output['images'][$pos]['src'] = $info;
      $output['images'][$pos]['title'] = content_migrate_unt_image_tags($data[0][$pos], 'title="');
      $output['images'][$pos]['alt'] = content_migrate_unt_image_tags($data[0][$pos], 'alt="');
    }
  }
  return $output;
}

/**
 * Get image source from the body
 * @param type $string
 * @param type $tagname
 * @return type
 */
function content_migrate_unt_image_source_info($string, $start_tag = '<img ', $src_tag = 'src="', $end_tag = '"') {
  $pattern = "/$start_tag([\w\W]*?)($src_tag)([\w\W]*?)$end_tag/";
  preg_match_all($pattern, $string, $matches);
  return $matches;
}

/**
 * Get a particular tag from image
 * @param type $string
 * @param type $tagname
 * @return type
 */
function content_migrate_unt_image_tags($string, $statrt_tag = 'title="', $end_tag = '"') {
  $pattern = "/$statrt_tag([\w\W]*?)$end_tag/";
  preg_match_all($pattern, $string, $matches);
  if (isset($matches[1][0])) {
    return $matches[1][0];
  }
}

/**
 * Get a particular tag data
 * @param type $string
 * @param type $statrt_tag
 * @param type $middle_tag
 * @param type $end_tag
 * @return type
 */
function content_migrate_unt_tag_data($string, $statrt_tag = '<em', $middle_tag = "(>)", $end_tag = '<\/em>') {
  $pattern = "/$statrt_tag([\w\W]*?)$middle_tag([\w\W]*?)$end_tag/";
  preg_match_all($pattern, $string, $matches);
  return $matches[3][0];
}

/**
 * Get file name from image path
 * @param type $image_path
 * @param type $default_name
 * @return type
 */
function content_migrate_get_image_name($image_path, $default_name = 'just.jpg') {
  $image_path = str_ireplace("%20", " ", $image_path);
  $files = explode("/", $image_path);
  $file_name = (isset($files[count($files) - 1])) ? $files[count($files) - 1] : $default_name;
  return $file_name;
}

/**
 * Save the remote image
 * @param type $image
 * @param type $filename
 * @return type
 */
function content_migrate_save_remote_image($site_url, $image_url) {
  $image_processed = array('success' => 0);
  if (variable_get('content_migrate_unt_skip_image_handling')) {
    return $image_processed;
  }
  if ($image_url == '') {
    return $image_processed;
  }
  $show_case_image_url = '';
  $show_case_image_url = content_migrate_unt_get_file_path($image_url);
  $filename = content_migrate_get_image_name($show_case_image_url);
  $filename = content_migrate_generate_filename($filename);
  $image = @file_get_contents($show_case_image_url);
  if (!empty($image)) {
    $file_saved = file_save_data($image, 'public://' . $filename, FILE_EXISTS_RENAME);
    if ($file_saved->fid) {
      $image_processed['success'] = 1;
      $image_processed['file_saved'] = $file_saved;
    }
  }
  return $image_processed;
}

/**
 * Generate unique filename
 * @param type $filename
 */
function content_migrate_generate_filename($filename) {
  $file = explode(".", $filename);
  $max = count($file) - 2;
  $file[$max] = $file[$max] . "-" . rand(1000, time());
  $output = implode(".", $file);
  return $output;
}

/**
 * Processed saved file
 * @param type $file_saved
 */
function content_migrate_unt_process_image_file($file_saved, $pos = 0) {
  $img = array();
  foreach ($file_saved as $key => $value) {
    $img[LANGUAGE_NONE][$pos][$key] = $value;
  }
  return $img;
}

/**
 * Process meta tags
 * @param stdClass $account
 * @param type $data
 */
function content_migrate_unt_process_nodewords(stdClass $account, $data) {
  // map metatags
  $account->metatags[LANGUAGE_NONE]['description']['value'] = $data->nodewords['description']['value'];
  $account->metatags[LANGUAGE_NONE]['keywords']['value'] = $data->nodewords['keywords']['value'];
  $account->metatags[LANGUAGE_NONE]['title']['value'] = $data->page_title;
  $account->metatags[LANGUAGE_NONE]['abstract']['value'] = $data->nodewords['abstract']['value'];
  $account->metatags[LANGUAGE_NONE]['canonical']['value'] = $data->nodewords['canonical']['value'];
}

/**
 * Set the moderation state of the node to Publish
 * @param  stdClass $account
 * @return [type]
 */
function content_migrate_unt_publish_node_old(stdClass $node, $publish_status = 2) {
  if ($publish_status == 2) {
    $node->workbench_moderation['current']->state = 'published';
    $node->workbench_moderation['current']->from_state = 'draft';
    $node->workbench_moderation['current']->published = 1;
    $node->workbench_moderation['current']->current = 1;
    $published = $node->workbench_moderation['current'];
    $node->workbench_moderation['published'] = $published;
    $node->workbench_moderation['my_revision'] = $published;
    $node->workbench_moderation['updating_live_revision'] = 1;
  }
}

/**
 * Set the moderation state of the node to Publish
 * @param  stdClass $account
 * @return [type]
 */
function content_migrate_unt_publish_node(stdClass $node, $publish_status = 2) {
  if ($publish_status == 1) {
    return '';
  }
  if ($publish_status == 2) {
    $published = 1;
    $state = 'published';
  }
  if ($publish_status == 3) {
    $published = 0;
    $state = 'archived';
  }
  $query = db_update('workbench_moderation_node_history')
    ->condition('hid', $node->workbench_moderation['current']->hid)
    ->fields(array('published' => $published))
    ->execute();
  workbench_moderation_moderate($node, $state);
  $live_revision = workbench_moderation_node_current_load($node);
  $live_revision->status = $published;
  $live->changed = $node->changed;
  $live_revision->revision = 0;
  $live_revision->workbench_moderation['updating_live_revision'] = TRUE;
  node_save($live_revision);
}

/**
 * Handle Library data
 * @param  stdClass $account     [description]
 * @param  [type]   $data        [description]
 * @param  string   $short_field [description]
 * @return [type]                [description]
 */
function content_migrate_unt_process_library_body_title(stdClass $account, $data, $short_field = '') {
  content_migrate_unt_process_newsletter($account);
  content_migrate_unt_map_author($account, $data['node']->CatID, 'migrate_map_contentcategoryterm', 'tid', 'field_content_category');
  $account->title = $data['node']->ContentTitle;
  $account->field_manuscript_number[LANGUAGE_NONE][0]['value'] = (isset($data['node']->content['ManuscriptNumber']) ? $data['node']->content['ManuscriptNumber'] : '');
  content_migrate_unt_pass_field_data($account, 'body', (isset($data['node']->content['ManuscriptInformation']) ? $data['node']->content['ManuscriptInformation'] : ''));
  content_migrate_unt_pass_field_data($account, 'field_manuscript_description', (isset($data['node']->content['ManuscriptDescription']) ? $data['node']->content['ManuscriptDescription'] : ''));
  content_migrate_unt_pass_field_data($account, 'field_manuscript_date', (isset($data['node']->content['ManuscriptDate']) ? $data['node']->content['ManuscriptDate'] : '' ));
  content_migrate_unt_pass_field_data($account, 'field_copyist', (isset($data['node']->content['Copyist']) ? $data['node']->content['Copyist'] : ''));
  content_migrate_unt_pass_field_data($account, 'field_manuscript_title', (isset($data['node']->content['TitleofManuscript']) ? $data['node']->content['TitleofManuscript'] : '' ));
  content_migrate_unt_pass_field_data($account, 'field_incipit', (isset($data['node']->content['Incipit']) ? $data['node']->content['Incipit'] : ''));
  content_migrate_unt_pass_field_data($account, 'field_number_in_catalogue', (isset($data['node']->content['NumberinCatalogue']) ? $data['node']->content['NumberinCatalogue'] : ''));
  content_migrate_unt_pass_field_data($account, 'field_reference', (isset($data['node']->content['Reference']) ? $data['node']->content['Reference'] : ''));
  content_migrate_unt_pass_field_data($account, 'field_author_death_date', (isset($data['node']->content['AuthorDeathDate']) ? $data['node']->content['AuthorDeathDate'] : ''));
  content_migrate_unt_pass_field_data($account, 'field_manuscript_author', (isset($data['node']->content['ManuscriptAuthor']) ? $data['node']->content['ManuscriptAuthor'] : ''));
  if ($account->uid == 0) {
    $account->uid = 1; //@TODO map actual editor, if needed
  }
  $account->status = 1;
}

/**
 * Process body and other parts
 * @param stdClass $account
 * @param type $data
 * @param type $short_field field name of short description in source
 */
function content_migrate_unt_process_body_title(stdClass $account, $data, $short_field = '') {
  content_migrate_unt_process_newsletter($account);
  content_migrate_unt_map_author($account, $data['node']->CatID, 'migrate_map_contentcategoryterm', 'tid', 'field_content_category');
  $title = (isset($data['node']->ContentTitle)) ? $data['node']->ContentTitle : '';
  $title = (empty($title)) ? (isset($data['node']->content['Title']) ? $data['node']->content['Title'] : '') : $title;
  $publishing_data = (isset($data['node']->content['PublishingData'])) ? $data['node']->content['PublishingData'] : '';
  $account->title = $title;
  $account->title = content_migrate_unt_process_special_characters($account->title);
  if ($account->uid == 0) {
    $account->uid = 1;
  }
  // map body
  $account->status = 1;
  $body_data = (isset($data['node']->content['BodyText'])) ? $data['node']->content['BodyText'] : $data['node']->content['MainContent'];
  $abstract = (isset($data['node']->content['Abstract'])) ? $data['node']->content['Abstract'] : '';

  content_migrate_unt_pass_field_data($account, 'field_abstract', $abstract);
  content_migrate_unt_pass_field_data($account, 'body', $body_data);
  content_migrate_unt_pass_field_data($account, 'field_text', $publishing_data);
}

/**
 * Find and replace some left special characters
 * @param  [type] $data [description]
 * @return [type]       [description]
 */
function content_migrate_unt_process_special_characters($data) {
  $character_set = array("â€“" => "–");
  foreach ($character_set as $find => $replace) {
    $data = str_ireplace($find, $replace, $data);
  }
  return $data;
}

/**
 * Process date section
 * @param stdClass $account
 * @param type $data
 */
function content_migrate_unt_process_date(stdClass $account, $data, $old_format = 'd/m/Y H:i', $new_format = 'Y-m-d H:i:s') {
  $account->changed = content_migrate_unt_process_changed_date($data['node']->RecordDate);
  $date = (isset($data['node']->content['ContentDate'])) ? $data['node']->content['ContentDate']: (isset($data['node']->content['DateofArticle']) ? $data['node']->content['DateofArticle'] : $data['node']->content['PublishDate']);
  $parsed_date = date_parse_from_format($old_format, $date);
  $time = mktime($parsed_date['hour'], $parsed_date['minute'], $parsed_date['second'],
  $parsed_date['month'], $parsed_date['day'], $parsed_date['year'] );
  $content_date = date($new_format, $time);
  if (!empty($content_date)) {
    $account->field_date[LANGUAGE_NONE][0]['value'] = $content_date;
    $account->field_date[LANGUAGE_NONE][0]['timezone'] = 'Europe/London';
    $account->field_date[LANGUAGE_NONE][0]['timezone_db'] = 'Europe/London';
    $account->field_date[LANGUAGE_NONE][0]['date_type'] = 'datetime';
  }
}

/**
 * Process changed date
 * @param  [type] $date [description]
 * @return [type]       [description]
 */
function content_migrate_unt_process_changed_date($date) {
  $parsed_date = date_parse_from_format("Y-m-d H:i:s", $date);
  $time = mktime($parsed_date['hour'], $parsed_date['minute'], $parsed_date['second'],
  $parsed_date['month'], $parsed_date['day'], $parsed_date['year'] );
  if (!empty($time)) {
    return $time;
  }
  return time();
}

/**
 * Process story taxonomy
 * @param stdClass $account
 * @param type $data
 */
function content_migrate_unt_process_story_section(stdClass $account, $data, $section_terms, $field_name = 'field_article_section') {
  foreach ($data->{$field_name} as $pos => $section) {
    $old_tid = $section['value'];
    $new_tid = (isset($section_terms[$old_tid]['tid'])) ? $section_terms[$old_tid]['tid'] : '';
    if ($new_tid != '') {
      $account->field_sections[LANGUAGE_NONE][]['tid'] = $new_tid;
    }
  }
}

/**
 * Process blog show case image
 * @param stdClass $account
 * @param type $data
 * @return type
 */
function content_migrate_unt_process_blog_showcase_image(stdClass $account, $data) {
  $show_case_image_url = '';
  if (isset($data->field_blog_smallimage[0]['filepath'])) {
    $show_case_image_url = $data->field_blog_smallimage[0]['filepath'];
  }
  return $show_case_image_url;
}

/**
 * Process blog show case image
 * @param stdClass $account
 * @param type $data
 * @return type
 */
function content_migrate_unt_process_blog_showcase_image_fileinfo(stdClass $account, $data) {
  $showcase_image_fileinfo = array();
  if (isset($data->field_blog_smallimage[0]['filepath'])) {
    $showcase_image_fileinfo[0] = $data->field_blog_smallimage[0];
  }
  return $showcase_image_fileinfo;
}

/**
 * Process blog fields
 * @param stdClass $account
 * @param type $data
 */
function content_migrate_unt_process_blog_fields(stdClass $account, $data) {
  $account->uid = 1;
  $account->title = $data->title;
  $account->field_short_descriptions[LANGUAGE_NONE][0]['value'] = (isset($data->field_blog_short_desc[0]['value'])) ? $data->field_blog_short_desc[0]['value'] : '';
  $account->field_short_descriptions[LANGUAGE_NONE][0]['value'] = (isset($data->field_blog_short_desc[0]['value'])) ? $data->field_blog_short_desc[0]['value'] : '';
  $account->field_short_descriptions[LANGUAGE_NONE][0]['format'] = 'full_html';
  $account->body[LANGUAGE_NONE][0]['value'] = $data->body;
  $account->body[LANGUAGE_NONE][0]['safe_value'] = $data->body;
  $account->body[LANGUAGE_NONE][0]['format'] = 'full_html';
}

/**
 * Process image for multiple files
 * @param type $file_saved
 * @param type $pos
 * @return string
 */
function content_migrate_unt_process_image_multiple_file($file_saved, $fileinfo = array()) {
  $img = array();
  foreach ($file_saved as $key => $value) {
    $img[$key] = $value;
  }
  $img['alt'] = (isset($fileinfo[0]['data']['alt'])) ? $fileinfo[0]['data']['alt'] : '';
  $img['title'] = (isset($fileinfo[0]['data']['title'])) ? $fileinfo[0]['data']['title'] : '';
  $img['image_field_caption']['value'] = (isset($fileinfo[0]['data']['title'])) ? $fileinfo[0]['data']['title'] : '';
  $img['image_field_caption']['format'] = 'plain_text';
  return $img;
}

/**
 * Process image inside body
 * @param stdClass $account
 * @param type $data
 * @param type $site_url
 */
function content_migrate_unt_process_body_image($body, $site_url, $skip_image = 'no') {
  if (variable_get('content_migrate_unt_skip_image_handling')) {
    return $body;
  }
  $body = content_migrate_unt_process_body_pdf($body, $site_url);
  $site_path = variable_get('content_migrate_unt_base_url', '');
  $img_collection = content_migrate_unt_body_image_info($body);
  if (!isset($img_collection['0']['src'])) {
    return $body;
  }
  if ($img_collection['0']['src'] != '') {
    foreach ($img_collection as $pos => $img_info) {
      $path_parts = pathinfo($img_info['src']);
      //skip and remove presence of such file from the body
      if (($path_parts['basename'] == $skip_image) && ($skip_image != 'no')) {
        $body = str_ireplace($img_info['src'], '', $body);
        continue;
      }
      // print "\nprocessing " . $site_url . '/' . $img_info['src'];
      $image_url = '';
      $image_url = content_migrate_unt_get_file_path($img_info['src']);
      $filename = content_migrate_get_image_name($image_url);
      $filename = content_migrate_generate_filename($filename);
      $image = @file_get_contents($image_url);
      if (!empty($image)) {
        $file_saved = file_save_data($image, 'public://' . $filename, FILE_EXISTS_RENAME);
        if ($file_saved->fid) {
          $replace_url = file_create_url($file_saved->uri);
          $body = str_ireplace($img_info['src'], $replace_url, $body);
        }
      }
    }
  }
  $body = str_ireplace("http://default", $site_path, $body);
  return $body;
}

/**
 * Process show case image
 * @param stdClass $account
 * @param type $data
 * @param type $field_main primary image field
 * @param type $field_submain optional image field
 * @return type
 */
function content_migrate_unt_process_various_showcase_image(stdClass $account, $data, $field_main, $field_submain) {
  $show_case_image_url = '';
  if ($field_submain != '') {
    if (isset($data->{$field_submain}[0]['filepath']) && !empty($data->{$field_submain}[0]['filepath'])) {
      $show_case_image_url = $data->{$field_submain}[0]['filepath'];
    }
  }

  // pick main image, if present
  if ($field_main != '') {
    if (isset($data->{$field_main}[0]['filepath']) && !empty($data->{$field_main}[0]['filepath'])) {
      $show_case_image_url = $data->{$field_main}[0]['filepath'];
    }
  }
  return $show_case_image_url;
}

/**
 * Process various show case image info
 * @param stdClass $account
 * @param type $data
 * @param type $field_main primary image field
 * @param type $field_submain optional image field
 * @return type
 */
function content_migrate_unt_process_various_showcase_image_fileinfo(stdClass $account, $data, $field_main, $field_submain) {
  $show_case_image_fileinfo = array();
  if ($field_submain != '') {
    if (isset($data->{$field_submain}[0]['filepath']) && !empty($data->{$field_submain}[0]['filepath'])) {
      $show_case_image_fileinfo[0] = $data->{$field_submain}[0];
    }
  }

  // pick main image info, if present
  if ($field_main != '') {
    if (isset($data->{$field_main}[0]['filepath']) && !empty($data->{$field_main}[0]['filepath'])) {
      $show_case_image_fileinfo[0] = $data->{$field_main}[0];
    }
  }
  return $show_case_image_fileinfo;
}

/**
 * Process body and other parts
 * @param stdClass $account
 * @param type $data
 * @param array $field_names gallery field names
 * @param type $slide_field slideshow field
 */
function content_migrate_unt_handle_gallery(stdClass $account, stdClass $row, $data, $field_names, $site_url) {
  $pos = 0;
  foreach ($field_names as $pos => $field_name) {
    foreach ($data->{$field_name} as $pos => $image_slides) {
      $fileinfo[0] = $image_slides;
      if (empty($image_slides['filepath'])) {
        continue;
      }
      if ($row->showcase_image_fileinfo[0]['filename'] == $image_slides['filename']) {
        continue;
      }
      $image_processed = content_migrate_save_remote_image($site_url, $image_slides['filepath']);
      if ($image_processed['success'] == 1) {
        $file_saved = $image_processed['file_saved'];
        $image = content_migrate_unt_process_image_multiple_file($file_saved, $fileinfo);
        $account->field_gallery_image[LANGUAGE_NONE][$pos] = $image;
        $pos++;
      }
    }
  }
}

/**
 * Get unix time from the passed date
 * @param type $date
 * @return type
 */
function content_migrate_unt_get_unixtime_from_date($date) {
  $parsed_date = date_parse($date);
  $passed_time = gmmktime($parsed_date['hour'], $parsed_date['minute'], $parsed_date['second'], $parsed_date['month'], $parsed_date['day'], $parsed_date['year']);
  return intval($passed_time);
}

/**
 * Map People Data
 * @param  stdClass $account [description]
 * @param  [type]   $data    [description]
 * @return [type]            [description]
 */
function content_migrate_map_person_data(stdClass $account, $data) {
  $data->title = strtolower($data->title);
  $data->title = content_migrate_unt_process_special_characters($data->title);
  $data->title = (($data->title == 'dr') or ($data->title == 'mr') or ($data->title == 'mrs') or ($data->title == 'ms')) ? $data->title . "." : $data->title;
  $data->title = ($data->title == 'professor') ? 'prof.' : $data->title;
  $data->title = ucwords($data->title);

  $account->uid = 1;
  $account->field_name[LANGUAGE_NONE][0]['title'] = $data->title;
  $account->field_name[LANGUAGE_NONE][0]['given'] = $data->nameone;
  $account->field_name[LANGUAGE_NONE][0]['middle'] = $data->initial;
  $account->field_name[LANGUAGE_NONE][0]['family'] = $data->nametwo;

  $account->field_name[LANGUAGE_NONE][0]['safe']['title'] = $data->title;
  $account->field_name[LANGUAGE_NONE][0]['safe']['given'] = $data->nameone;
  $account->field_name[LANGUAGE_NONE][0]['safe']['middle'] = $data->initial;
  $account->field_name[LANGUAGE_NONE][0]['safe']['family'] = $data->nametwo;

  $data->title = ($data->title != '') ? $data->title . " " : '';
  $data->initial = ($data->initial != '') ? $data->initial . " " : '';
  $data->nameone = ($data->nameone != '') ? $data->nameone . " " : '';
  $data->nametwo = ($data->nametwo != '') ? $data->nametwo . " " : '';
  $account->title = $data->title . $data->initial . $data->nameone . $data->nametwo;

  $data->Biography = content_migrate_unt_process_special_characters($data->Biography);

  $account->body[LANGUAGE_NONE][0]['value'] = $data->Biography;
  $account->body[LANGUAGE_NONE][0]['safe_value'] = $data->Biography;
  $account->body[LANGUAGE_NONE][0]['format'] = 'full_html';
}

/**
 * Process Pdf inside body
 * @param stdClass $account
 * @param type $data
 * @param type $site_url
 */
function content_migrate_unt_process_body_pdf($body, $site_url) {
  if (variable_get('content_migrate_unt_skip_image_handling')) {
    return $body;
  }
  $site_path = variable_get('content_migrate_unt_base_url', '');
  $img_collection = content_migrate_unt_body_pdf_info($body);
  $file_extension = variable_get('content_migrate_unt_file_extensions', 'pdf,docx,doc,wmv,ram');
  $allowed_extension = explode(",", $file_extension);
  $file_list = array();
  if (!isset($img_collection['0']['href'])) {
    return $body;
  }
  if ($img_collection['0']['href'] != '') {
    foreach ($img_collection as $pos => $img_info) {
      $path_parts = pathinfo($img_info['href']);
      if (!isset($path_parts['extension'])) {
        continue;
      }
      if (!in_array(strtolower($path_parts['extension']), $allowed_extension)) {
        continue;
      }
      $file_link = $img_info['href'];
      if (isset($file_list[$file_link])) {
        continue;
      }
      $file_list[$file_link] = $file_link;
      $pdf_url = '';
      $pdf_url = content_migrate_unt_get_file_path($img_info['href']);
      $filename = content_migrate_get_image_name($pdf_url);
      $filename = content_migrate_generate_filename($filename);
      $pdf = @file_get_contents($pdf_url);
      if (!empty($pdf)) {
        $file_saved = file_save_data($pdf, 'public://' . $filename, FILE_EXISTS_RENAME);
        if ($file_saved->fid) {
          $replace_url = file_create_url($file_saved->uri);
          $body = str_ireplace($img_info['href'], $replace_url, $body);
        }
      }
    }
  }
  $body = str_ireplace("http://default", $site_path, $body);
  return $body;
}

/**
 * Get Pdf source
 * @param type $body
 * @param type $substitute
 */
function content_migrate_unt_body_pdf_info($body) {
  // read all image tags into an array
  preg_match_all('/<A[^>]+>/i', $body, $img_tags);
  $orig_pdf_src = array();
  for ($i = 0; $i < count($img_tags[0]); $i++) {
  // get the source string
    preg_match('/href="([^"]+)/i', $img_tags[0][$i], $imgage);
    if(!isset($imgage[0])) {
      continue;
    }
    $orig_pdf_src[]['href'] = str_ireplace( 'href="', '',  $imgage[0]);
  }
  // will output all your img src's within the html string
  return $orig_pdf_src;
}

/**
 * Process Abstract
 * @param stdClass $account
 * @param type $data
 */
function content_migrate_unt_process_abstract_data(stdClass $account, $abstract) {
  content_migrate_unt_pass_field_data($account, 'field_abstract', $abstract);
}

/**
 * Retain update time
 * @param  [type] $data [description]
 * @param  [type] $changed [description]
 * @return [type]       [description]
 */
function content_migrate_unt_retain_update_time(stdClass $node, $changed) {
  if ($changed == 0) {
    return '';
  }
  // $changed = content_migrate_unt_process_changed_date($data['node']->RecordDate);
  $query = db_update('node')
  ->condition('nid', $node->nid)
  ->fields(array('changed' => $changed))
  ->execute();
}

/**
 * Assign newsletter term to migrated contents
 * @param  stdClass $account [description]
 * @return [type]            [description]
 */
function content_migrate_unt_process_newsletter(stdClass $account) {
  $lang = $account->language;
  $na_newsletter_tid = variable_get('content_migrate_unt_newsletter_na_tid', 601);
  $account->field_simplenews_term[$lang][0]['tid'] = $na_newsletter_tid;
}

/**
 * Process body and other parts
 * @param stdClass $account
 * @param type $data
 */
function content_migrate_unt_process_publication_body_title(stdClass $account, $data) {
  content_migrate_unt_process_newsletter($account);
  content_migrate_unt_map_author($account, $data['node']->CatID, 'migrate_map_contentcategoryterm', 'tid', 'field_content_category');
  $title = (isset($data['node']->ContentTitle)) ? $data['node']->ContentTitle : '';
  $title = (empty($title)) ? (isset($data['node']->content['Title']) ? $data['node']->content['Title'] : '') : $title;
  $account->title = content_migrate_unt_process_special_characters($title);
  if ($account->uid == 0) {
    $account->uid = 1;
  }
  $account->status = 1;
  $publishing_data = (isset($data['node']->content['PublishingData'])) ? $data['node']->content['PublishingData'] : '';
  $body_data = (isset($data['node']->content['Synopsis'])) ? $data['node']->content['Synopsis'] : '';
  $bibliography_data = (isset($data['node']->content['Bibliography'])) ? $data['node']->content['Bibliography'] : '';
  $contents_data = (isset($data['node']->content['Contents'])) ? $data['node']->content['Contents'] : '';
  $field_isbn = (isset($data['node']->content['ISBNSoftback'])) ? $data['node']->content['ISBNSoftback'] : '';
  $field_isbn_hardback = (isset($data['node']->content['ISBNHardback'])) ? $data['node']->content['ISBNHardback'] : '';
  $abstract = (isset($data['node']->content['Abstract'])) ? $data['node']->content['Abstract'] : '';
  content_migrate_unt_pass_field_data($account, 'body', $body_data);
  content_migrate_unt_pass_field_data($account, 'field_isbn', $field_isbn);
  content_migrate_unt_pass_field_data($account, 'field_isbn_hardback', $field_isbn_hardback);
  content_migrate_unt_pass_field_data($account, 'field_table_of_content', $contents_data);
  content_migrate_unt_pass_field_data($account, 'field_bibliography', $bibliography_data);
  content_migrate_unt_pass_field_data($account, 'field_text', $publishing_data);
  content_migrate_unt_pass_field_data($account, 'field_abstract', $abstract);
}

/**
 * Pass value in the field
 * @param  stdClass $account    [description]
 * @param  [type]   $field_name [description]
 * @param  [type]   $value      [description]
 * @param  string   $format     [description]
 * @return [type]               [description]
 */
function content_migrate_unt_pass_field_data(stdClass $account, $field_name, $value, $format = 'full_html') {
  if ($field_name == 'field_abstract') {
    $site_url = variable_get('content_migrate_unt_org_base_url', 'http://iis.ac.uk');
    $value = content_migrate_unt_process_body_image($value, $site_url);
  }
  $value = content_migrate_unt_process_special_characters($value);
  $value = htmlspecialchars_decode($value);
  $account->{$field_name}[LANGUAGE_NONE][0]['value'] = $value;
  $account->{$field_name}[LANGUAGE_NONE][0]['safe_value'] = $value;
  $account->{$field_name}[LANGUAGE_NONE][0]['format'] = $format;
}

/**
 * Get Migrated node id for passed sourceid's
 * @param  stdClass $author     [description]
 * @param  string   $table_name [description]
 * @return [type]               [description]
 */
function content_migrate_unt_map_author(stdClass $account, $author, $table_name = 'migrate_map_authornode', $reference_type = 'nid', $map_field = 'field_people') {
  if (empty($author)) {
    return '';
  }
  $all_authors = explode(",", $author);
  $result = db_select($table_name, 'n')
      ->condition('n.sourceid1', array($all_authors), 'IN')
      ->fields('n')
      ->execute()
      ->fetchAll();
  foreach ($result as $data) {
    $account->{$map_field}[LANGUAGE_NONE][][$reference_type] = $data->destid1;
  }
}

/**
 * Process library image and get the image related information
 * @param  [type] $data [description]
 * @return [type]       [description]
 */
function content_migrate_unt_process_library_image($data) {
  $image = array('found' => 0, 'name' => '', 'caption' => '');
  $image['name'] = (isset($data['node']->content['FirstImage']) && $data['node']->content['FirstImage'] != '') ? $data['node']->content['FirstImage'] : '';
  $image['caption'] = (isset($data['node']->content['FirstImageCaption']) && $data['node']->content['FirstImageCaption'] != '') ? $data['node']->content['FirstImageCaption'] : '';
  if ($image['name'] == '') {
    $image['name'] = (isset($data['node']->content['SecondImage']) && $data['node']->content['SecondImage'] != '') ? $data['node']->content['SecondImage'] : '';
    $image['caption'] = (isset($data['node']->content['SecondImageCaption']) && $data['node']->content['SecondImageCaption'] != '') ? $data['node']->content['SecondImageCaption'] : '';
  }
  if ($image['name'] == '') {
    $image['name'] = (isset($data['node']->content['ThirdImage']) && $data['node']->content['ThirdImage'] != '') ? $data['node']->content['ThirdImage'] : '';
    $image['caption'] = (isset($data['node']->content['ThirdImageCaption']) && $data['node']->content['ThirdImageCaption'] != '') ? $data['node']->content['ThirdImageCaption'] : '';
  }
  if ($image['name'] != '') {
    $image['found'] = 1;
  }
  return $image;
}

/**
 * Retain update time
 * @param  [type] $data [description]
 * @param  [type] $changed [description]
 * @return [type]       [description]
 */
function content_migrate_unt_update_chagnged_time($nid, $changed) {
  if ($changed == 0) {
    return '';
  }
  $query = db_update('node')
  ->condition('nid', $nid)
  ->fields(array('changed' => $changed))
  ->execute();
}

/**
 * Make Image/file url
 * @param  [type] $site_url [description]
 * @param  [type] $image    [description]
 * @return [type]           [description]
 */
function content_migrate_unt_get_file_path($file_path) {
  $site_url = variable_get('content_migrate_unt_org_base_url', 'http://iis.ac.uk');
  $file_url = '';
  $file_url = $site_url . '/' . $file_path;
  $file_url = str_ireplace(" ", "%20", $file_url);
  $file_url = str_ireplace("&amp;", "&", $file_url);
  $file_url = str_ireplace($site_url . "//", $site_url . "/", $file_url);
  return $file_url;
}

/**
 * Get Author value
 * @param  [type] $data [description]
 * @return [type]       [description]
 */
function content_migrate_unt_get_author_data($data) {
  $author = '';
  if (isset($data['node']->content['Authors'])) {
    $author = $data['node']->content['Authors'];
  }
  if (empty($author)) {
    if (isset($data['node']->content['Author'])) {
      $author = $data['node']->content['Author'];
    }
  }
  return $author;
}
