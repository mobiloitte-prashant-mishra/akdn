<?php
// function scs_custom_feeds_presave(FeedsSource $source, $entity, $item) {
  //$entity->field_focus_area['en'][0]['tid']=$entity->field_focus_area['und'][0]['tid'];
  //$entity->field_country['en'][0]['tid']=$entity->field_country['und'][0]['tid'];
  /*if ($entity->feeds_item->entity_type == 'node') {
    // Skip saving this entity.
    $entity->feeds_item->skip = TRUE;
  }*/
// }
/**
 * Implements hook_cron
 */
/*function scs_custom_cron() {
  $result = db_query("SELECT nid FROM {node} WHERE type = 'article'");
  foreach($result as $record) {
    $node = node_load($record->nid);
    $title = $node->title;
    $lan = $node->language;
    $csvFile = "pr_caption_and_copyright_export.csv";
    //$csv = readCSV($csvFile);
    foreach($csv as $key=>$value) {
      if ($value[0] == $title) {
        $caption = $value[1];
        $copyright = $value[2];
      }e
    }
    $file_id = $node->field_article_img[$lan][0]['fid'];
    $file = file_load($file_id);
    $file->field_captions['und'][0]['value'] = $caption;
    $file->field_copyright['und'][0]['value'] = $copyright;
    file_save($file);
    //node_save($node);
  }
}

/**
 * Read csv file
 */
/*function readCSV($csvFile){
  if($file_handle = fopen($csvFile, 'r')) {
    while (!feof($file_handle) ) {
      $line_of_text[] = fgetcsv($file_handle, 1024);
    }
    fclose($file_handle);
    return $line_of_text;
  }
  else {
    die('Could not read file');
  }
}
*/
/**
 * Implements Hook_init()
 */
function scs_custom_init(){
    global $theme;
    global $base_url;
    if($theme == 'seven') {
         $link = drupal_get_path('module', 'scs_custom').'/css/admin.css';
         drupal_add_css($link,array('weight' => CSS_THEME));
    }
}

/**
 * Function to resolve tsa tid issue.
 */
function scs_custom_query_node_access_alter(QueryAlterableInterface $query) {
  $denied_tids = _tsa_fetch_denied_terms();
  if (!empty($denied_tids)) {
    $conditions =& $query->conditions();
    if (!empty($conditions[0]['field']) && ('tid' === $conditions[0]['field'])) {
      $conditions[0]['field'] = 't.tid';
    }
  }
}

/**
 * Implements hook_entity_property_info_alter().
 */
function scs_custom_solr_entity_property_info_alter(&$info) {
  $info['node']['properties']['entity_type'] = array(
    'type' => 'text',
    'label' => t('Type of the Node'),
    'getter callback' => 'scs_custom_solr_entity_type_callback',
    );
}

/**
 * Get type of the node [in case of an article, get the category]
 * @param type $node
 * @return type
 */
function scs_custom_solr_entity_type_callback($node) {
  $type = $node->type;
  if ($node->type == 'article') {
    $type =
     scs_custom_solr_get_article_category_name($node->field_article_cat);
  }
  if ($node->type == 'podcast') {
    $type = "Video";
  }
  $type = str_ireplace("_", " ", $type);
  return $type;
}

/**
 * Get type of the Article Category
 * @param type $data
 * @return type
 */
function scs_custom_solr_get_article_category_name($data) {
  $cat = '';
  $name = 'article';
  foreach ($data as $lang => $category) {
    $cat = (isset($category[0]['tid'])) ? intval($category[0]['tid']) : '0';
  }
  if ($cat > 0) {
    $term = taxonomy_term_load($cat);
    $name = $term->name;
    $name = ($cat == 2516) ? "Media" : $name;
  }
  return $name;
}

/**
 * @file
 *   Custom module for speech center.ity
 */

function scs_custom_menu() {
  $items['admin/config/regional/language/switcher'] = array(
    'title' => 'Switcher Settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('akdn_custom_switcher_settings'),
    'access arguments' => array('administer languages'),
    'type' => MENU_LOCAL_TASK,
    );
  return $items;
}

/**
 * Implements hook_form().
 */
function scs_custom_switcher_settings($form, &$form_state) {
  $all_langs = locale_language_list('name');

  $form['akdn_custom_switcher_lang'] = array(
    '#type' => 'checkboxes',
    '#title' => t('What languages should be used as the default set on listing pages?'),
    '#options' => $all_langs,
    '#default_value' => variable_get('akdn_custom_switcher_lang', array()),
    );
  return system_settings_form($form);
}

/**
 * Implements hook_node_presave().
 */
function scs_custom_node_presave($node) {
  $nodetype = $node->type;
  $node_state = $node->workbench_moderation['current']->from_state;
  /*
    Author: kaustubh bhagwat
    Date: 14 jan 2016
    Put the value of new field called field_read_article_by from field_media_source_url
   */

  /* Get node type*/
    $nodetype = $node->type;

    $get_current_mod_state = $node->workbench_moderation_state_new;
    /*$get_last_mod_state = $node->workbench_moderation_state_current;
    $replace_condition = $get_last_mod_state != 'published' && $get_current_mod_state == 'published';*/
    /* Get node type*/
  if ($node->type == "article") {
      if(!empty($node->field_media_source_url)){
        $url = $node->field_media_source_url['und'][0]['url'];
        //$title = $node->field_media_source_url['und'][0]['title'];
        $node->field_read_article_by['und'][0]['title'] = 'Read Article by';
        $node->field_read_article_by['und'][0]['url'] = $url;
      }
      else {
        $node->field_read_article_by['und'][0]['title'] = 'Read Article by';
      }
  }
  if ($node->type == 'speech') {
    if (property_exists($node, 'field_brightcove_video')) {
      if (isset($node->field_brightcove_video[LANGUAGE_NONE][0]['brightcove_id'])) {
        $brightcove_id = $node->field_brightcove_video[LANGUAGE_NONE][0]['brightcove_id'];
        $node->field_brightcove_id[LANGUAGE_NONE][0]['value'] = $brightcove_id;
      }
    }
  }
  if ($node->type == 'event') {
    $date = null;
    $lang = $node->language;
    if(isset($node->field_event_date[$lang][0]['value']) || ($node->field_event_date[$lang][0]['value'] == '')){
      $date = date('Y',$node->field_event_date[$lang][0]['value']);
      $node->field_custom_date_filter[$lang][0]['value'] = $date;
    }
  }
  if ($node->type == 'article' || $node->type == 'speech') {
    $date = null;
    $lang = $node->language;
    if(isset($node->field_publish_date[$lang][0]['value']) || ($node->field_publish_date[$lang][0]['value'] != '')){
      $date = date('Y',$node->field_publish_date[$lang][0]['value']);
      $node->field_custom_date_facet[$lang][0]['value'] = $date;
    }
  }
  if ($node->type == 'publication') {// for some reasons the above code is not working for publications
    $date = null;
    $lang = 'und';
    if(isset($node->field_publish_date[$lang][0]['value']) || ($node->field_publish_date[$lang][0]['value'] != '')){
      $date = date('Y',$node->field_publish_date[$lang][0]['value']);
      $node->field_custom_date_facet[$lang][0]['value'] = $date;
    }
  }

/**
 * This code sets the home page tiles image on the basis of publish state of the content
 */
  switch ($nodetype) {
    case 'article':
    if ($node->field_showcase_image_on_homepage['und'][0]['value'] == 1 && $get_current_mod_state == 'published') {
      _update_article_tile_image($node);
    }
    break;

    default:
    if ($node->field_showcase_image_on_homepage['und'][0]['value'] == 1 && $get_current_mod_state == 'published') {
      _update_node_image_front($node);
    }
    break;
  }
}

/**
 * This function will update image on the homepage tiles for aticle types.
 * This function will not work for other content types.
 * @param object $node [will conain all node related data].
 */
function _update_article_tile_image($node){
    $node_id = $node->nid;
    $image = $node->field_article_img['und'][0]['fid'];
    $tid = $node->field_article_cat['und'][0]['tid'];
    $term = taxonomy_term_load($tid);
    $termname = $term->name;
    $strlwr = drupal_strtolower($termname);
    if ($strlwr == 'press release') {
          // The taxonomy term for that particular nodeype is loaded so as to put the content image.
      $tiletax = taxonomy_get_term_by_name('Press Releases', 'workbench_tiles');
      if (!empty($tiletax)) {
        $tidload = array_shift($tiletax);
        $tidload = $tidload->tid;
      }
      $workbench_tiles_term = taxonomy_term_load($tidload);
          // set and save the image to that taxonomy term
      $workbench_tiles_term->field_image['und']['0']['fid'] = $image;
      $workbench_tiles_term->field_node[LANGUAGE_NONE][0]['value'] = $node_id;
      taxonomy_term_save($workbench_tiles_term);
    }
    else if($strlwr == 'in the media') {
          // The taxonomy term for that particular nodeype is loaded so as to put the content image.
      $tiletax = taxonomy_get_term_by_name('In the Media', 'workbench_tiles');
      if (!empty($tiletax)) {
        $tidload = array_shift($tiletax);
        $tidload = $tidload->tid;
      }
      $workbench_tiles_term = taxonomy_term_load($tidload);
          // set and save the image to that taxonomy term
      $workbench_tiles_term->field_image['und']['0']['fid'] = $image;
      $workbench_tiles_term->field_node[LANGUAGE_NONE][0]['value'] = $node_id;
      taxonomy_term_save($workbench_tiles_term);
    }
}

/**
 * This function will update image on the homepage tiles for specified content type.
 * This function will not work for article type.
 * @param object $node [will conain all node related data].
 */

function _update_node_image_front($node){
  $nodetype = $node->type;
  $node_id = $node->nid;
    switch ($nodetype) {
      case 'speech':
      $image = $node->field_speech_image['und'][0]['fid'];
      $tiletax = taxonomy_get_term_by_name('Speeches', 'workbench_tiles');
      if (!empty($tiletax)) {
        $tidload = array_shift($tiletax);
        $tidload = $tidload->tid;
      }
      $workbench_tiles_term = taxonomy_term_load($tidload);
      $workbench_tiles_term->field_image['und']['0']['fid'] = $image;
      $workbench_tiles_term->field_node[LANGUAGE_NONE][0]['value'] = $node_id;
      taxonomy_term_save($workbench_tiles_term);
    break;

    case 'publication':
      $image = $node->field_publication_image['und'][0]['fid'];
      $tiletax = taxonomy_get_term_by_name('Publications', 'workbench_tiles');
       if (!empty($tiletax)) {
        $tidload = array_shift($tiletax);
        $tidload = $tidload->tid;
      }
      $workbench_tiles_term = taxonomy_term_load($tidload);
      $workbench_tiles_term->field_image['und']['0']['fid'] = $image;
      $workbench_tiles_term->field_node[LANGUAGE_NONE][0]['value'] = $node_id;
      taxonomy_term_save($workbench_tiles_term);
    break;

    case 'event':
      $image = $node->field_event_image['und'][0]['fid'];
      $tiletax = taxonomy_get_term_by_name('Events', 'workbench_tiles');
      if (!empty($tiletax)) {
        $tidload = array_shift($tiletax);
        $tidload = $tidload->tid;
      }
      $workbench_tiles_term = taxonomy_term_load($tidload);
      $workbench_tiles_term->field_image['und']['0']['fid'] = $image;
      $workbench_tiles_term->field_node[LANGUAGE_NONE][0]['value'] = $node_id;
      taxonomy_term_save($workbench_tiles_term);
    break;

    default:
      # code...
    break;

    }
  }
/**
 * Implements hook_node_insert().
 */
function scs_custom_node_insert($node) {
  /* Get node type*/
  $nodetype = $node->type;
  /* Get node id*/
  $node_id = $node->nid;
  switch ($nodetype) {
  case 'article':
    if ($node->field_showcase_image_on_homepage['und'][0]['value'] == 1 && $get_current_mod_state == 'published') {
      _update_article_tile_image($node);
    }
    break;

    default:
    if ($node->field_showcase_image_on_homepage['und'][0]['value'] == 1 && $get_current_mod_state == 'published') {
      _update_node_image_front($node);
    }
    break;
  }
}
/**
 * Implements hook_node_delete. This will remove the tile on home page and replace with defalt image for the tile.
 * @param  [type] $node a node obgject to handle node.
 * @return [type]       [description]
 */
function scs_custom_node_delete($node) {
    /* Get node type*/
  $nodetype = $node->type;

  /* Get node id*/
  $node_id = $node->nid;

  switch ($nodetype) {
    case 'article':
      // Get the latest/recent article image-fid and the tid
      // and save it in a variable.
    //$image = $node->field_article_img['und'][0]['fid'];
    $tid = $node->field_article_cat['und'][0]['tid'];
    $term = taxonomy_term_load($tid);
    $termname = $term->name;
    $strlwr = drupal_strtolower($termname);
    if ($strlwr == 'press release') {
          // The taxonomy term for that particular nodeype is loaded so as to put the content image.
      $tiletax = taxonomy_get_term_by_name('Press Releases', 'workbench_tiles');
      if (!empty($tiletax)) {
        $tidload = array_shift($tiletax);
        $tidload = $tidload->tid;
      }
      $workbench_tiles_term = taxonomy_term_load($tidload);
          // set and save the image to that taxonomy term
      if($workbench_tiles_term->field_node[LANGUAGE_NONE][0]['value'] == $node_id) {
        $workbench_tiles_term->field_image['und']['0']['fid'] = '';
        $workbench_tiles_term->field_node[LANGUAGE_NONE][0]['value'] = Null;
        taxonomy_term_save($workbench_tiles_term);
      }
    }
    else if($strlwr == 'in the media') {
          // The taxonomy term for that particular nodeype is loaded so as to put the content image.
      $tiletax = taxonomy_get_term_by_name('In the Media', 'workbench_tiles');
      if (!empty($tiletax)) {
        $tidload = array_shift($tiletax);
        $tidload = $tidload->tid;
      }
      $workbench_tiles_term = taxonomy_term_load($tidload);
          // set and save the image to that taxonomy term
      if($workbench_tiles_term->field_node[LANGUAGE_NONE][0]['value'] == $node_id) {
          $workbench_tiles_term->field_image['und']['0']['fid'] = '';
          $workbench_tiles_term->field_node[LANGUAGE_NONE][0]['value'] = Null;
          taxonomy_term_save($workbench_tiles_term);
      }
    }
    break;

    case 'speech':
    $image = $node->field_speech_image['und'][0]['fid'];
    $tiletax = taxonomy_get_term_by_name('Speeches', 'workbench_tiles');
    if (!empty($tiletax)) {
      $tidload = array_shift($tiletax);
      $tidload = $tidload->tid;
    }
    $workbench_tiles_term = taxonomy_term_load($tidload);
    if ($workbench_tiles_term->field_node[LANGUAGE_NONE][0]['value'] == $node_id) {
        $workbench_tiles_term->field_image['und']['0']['fid'] = '';
        $workbench_tiles_term->field_node[LANGUAGE_NONE][0]['value'] = Null;
        taxonomy_term_save($workbench_tiles_term);
    }
    break;

    case 'event':
    $image = $node->field_event_image['und'][0]['fid'];
    $tiletax = taxonomy_get_term_by_name('Events', 'workbench_tiles');
    if (!empty($tiletax)) {
      $tidload = array_shift($tiletax);
      $tidload = $tidload->tid;
    }
    $workbench_tiles_term = taxonomy_term_load($tidload);
    if ($workbench_tiles_term->field_node[LANGUAGE_NONE][0]['value'] == $node_id) {
        $workbench_tiles_term->field_image['und']['0']['fid'] = '';
        $workbench_tiles_term->field_node[LANGUAGE_NONE][0]['value'] = Null;
        taxonomy_term_save($workbench_tiles_term);
    }
    break;

    case 'publication':
    $image = $node->field_publication_image['und'][0]['fid'];
    $tiletax = taxonomy_get_term_by_name('Publications', 'workbench_tiles');
    if (!empty($tiletax)) {
      $tidload = array_shift($tiletax);
      $tidload = $tidload->tid;
    }
    $workbench_tiles_term = taxonomy_term_load($tidload);
    if ($workbench_tiles_term->field_node[LANGUAGE_NONE][0]['value'] == $node_id) {
        $workbench_tiles_term->field_image['und']['0']['fid'] = '';
        $workbench_tiles_term->field_node[LANGUAGE_NONE][0]['value'] = Null;
        taxonomy_term_save($workbench_tiles_term);
    }
    break;

    default:
      # code...
    break;
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function scs_custom_form_speech_node_form_alter(&$form, &$form_state) {
  // Hide the bright cove id and serial id fields, as these fields should
  // not be visible to users.
  $form['field_brightcove_id']['#attributes']['style'][] = 'display:none;';
}


/**
 * Implements hook_form_FORM_ID_alter().
 */
function scs_custom_form_taxonomy_form_term_alter(&$form, &$form_state, $form_id) {
  if(arg(4) == 'add' || arg(3) == 'edit'){
    if($form['vocabulary_machine_name']['#value'] == 'communication_s_resources') {
      $form['#submit'][]='scs_custom_communication_resources_submit';
    }
  }
}

/**
 * Implements hook_form_FORM_ID_submit().
 */
function scs_custom_communication_resources_submit($form, &$form_state) {
  $form_state['redirect'] = 'communication-resources';
}

function scs_custom_form_alter(&$form, &$form_state, $form_id) {
  // Hide custom date field
  global $user;
  $form['field_custom_date_facet']['#access'] = FALSE;
  $form['field_custom_date_filter']['#access'] = FALSE;

  switch($form_id) {
    /*case 'taxonomy_form_term' :
    // Altering taxonomy form.
    if(arg(4) == 'add' || arg(3) == 'edit'){
      if($form['vocabulary_machine_name']['#value'] == 'communication_s_resources'){
        $form['relations']['parent']['#multiple'] = FALSE;
        $form['relations']['#collapsed'] = FALSE;
        $form['relations']['weight']['#access'] = FALSE;
        $form['relations']['#title'] = 'Parent';
        $form['relations']['parent']['#title'] = 'Select Tile Parent';
        $form['relations']['parent']['#description'] = 'Select in case of defining subtiles.';
      }
    }
    break;*/

    case 'article_node_form':
    $path = drupal_get_path('module', 'scs_custom');
    $form['#attached']['js'][] = $path . '/scs_custom.js';
    // $form['field_role_access_view_article']['#access'] = FALSE;
    // $form['#submit'][] = 'scs_custom_article_node_form_submit';
    //$form['field_read_article_by']['und'][0]['#title'] = '';
    if(empty($form['field_media_source_url']['und'][0]['#default_value'])){
        $form['field_read_article_by']['und'][0]['#default_value']['title'] = '';
        //$form->field_read_article_by['und'][0]['#default_value']]
      }
    break;


    case 'event_node_form' :
    // $form['field_role_access_view_permissio']['#access'] = FALSE;
    // $form['#submit'][] = 'scs_custom_event_node_form_submit';
    break;

    case 'speech_node_form' :
    // $form['field_role_access_view_speech']['#access'] = FALSE;
    // $form['#submit'][] = 'scs_custom_speech_node_form_submit';
    break;

    case 'publication_node_form' :
    // $form['field_role_access_view_publicati']['#access'] = FALSE;
    // $form['#submit'][] = 'scs_custom_publication_node_form_submit';
    break;
    break;

    case 'views_exposed_form':
    if ($form_state['view']->name == 'solr_search') {
      if (isset($_GET['search_api_views_fulltext']) && $_GET['search_api_views_fulltext'] != '') {
        $form['reset']['#access'] = TRUE;
      }
      else {
        $form['reset']['#access'] = FALSE;
      }
      if ($form_state['view']->current_display == 'page') {
        $form['search_api_views_fulltext']['#attributes']['placeholder'] = t('Search AKDN');
        $form['submit']['#attributes'] = array (
          'style' => 'display:none'
          );
      }
      elseif ($form_state['view']->current_display == 'page_2') {
        $form['search_api_views_fulltext']['#attributes']['placeholder'] = t('Contact Search');
        if (isset($_GET['search_api_views_fulltext']) && $_GET['search_api_views_fulltext'] != '') {
          $form['reset']['#access'] = TRUE;
        }
        else {
          $form['reset']['#access'] = FALSE;
        }

        $form['submit']['#attributes'] = array (
          'style' => 'display:none'
          );

      }
    }

    break;
    case 'contact_node_form':
    unset($form['title']);
    $form['title']['#required'] = FALSE;
    array_unshift($form['#validate'], 'scs_custom_contact_node_form_validate');
    break;

  }
}


// function scs_custom_event_node_form_submit($form, &$form_state) {
//   $value = implode(',',$form['vppn']['vppn_roles']['#value']);
//   $form_state['values']['field_role_access_view_permissio']['und'][0]['value'] = $value;
// }

// function scs_custom_speech_node_form_submit($form, &$form_state) {
//   $value = implode(',',$form['vppn']['vppn_roles']['#value']);
//   $form_state['values']['field_role_access_view_speech']['und'][0]['value'] = $value;
// }

// function scs_custom_publication_node_form_submit($form, &$form_state) {
//   $value = implode(',',$form['vppn']['vppn_roles']['#value']);
//   $form_state['values']['field_role_access_view_publicati']['und'][0]['value'] = $value;
// }

// function scs_custom_article_node_form_submit($form, &$form_state) {
//   // $value = implode(',',$form['vppn']['vppn_roles']['#value']);
//   // $form_state['values']['field_role_access_view_article']['und'][0]['value'] = $value;
// }

function scs_custom_contact_node_form_validate($form, &$form_state) {
  //echo'<pre>';print_r($form_state);die();
  $form_state['build_info']['args'][0]->title = $form_state['values']['field_first_name']['und'][0]['value'] . " " . $form_state['values']['field_surname']['und'][0]['value'];
  foreach ($form_state['values']['field_phone_number']['und'] as $key => $value) {
    $mobile_no = $value['value'];
    if (strlen(trim($mobile_no)) > 0){
      if (!is_numeric($mobile_no)) {
        form_set_error('submitted][mobile_no', t('Mobile No. must be Numeric'));
      }
    }
  }
}

function scs_custom_node_view_alter(&$build) {
  $node = $build['#node'];
  if($node->type == 'contact') {
    $node->title = $node->field_first_name['und'][0]['value'] . " " .
    $node->field_surname['und'][0]['value'];
    drupal_set_title($node->title);
  }

  switch ($node->type) {
    case 'article':
    if (empty($node->field_article_link[LANGUAGE_NONE][0]['url'])) {
      unset($build['field_article_link']);
    }
    if (empty($node->field_events_reference[LANGUAGE_NONE][0]['nid'])) {
      unset($build['field_events_reference']);
    }
    break;
  }
}

function scs_custom_views_pre_render(&$view) {
  if ($view->name == "folders_list") {
    if (isset($view->result[0]->field_field_dms[0]['raw']['nid'])) {
      $cid = get_folder_cid($view->result[0]->field_field_dms[0]['raw']['nid']);
      $view->result[0]->field_field_dms[0]['rendered']['#href']= 'filedepot/folder/'.$cid;
    }
  }
}

function get_folder_cid($nid) {
  $result = db_query("SELECT cid  FROM {filedepot_categories} WHERE nid = :nid",          array(':nid' => $nid))->fetchField();
  return $result;
}
function scs_custom_taxonomy_term_presave($term) {
  // Change existing term? Nothing to do!
  if ((isset($term->tid)) && ($term->tid > 0)) {
    return;
  }
  // Lookup the term in the given vocabulary
  $query = new EntityFieldQuery;
  $result = $query
  ->entityCondition('entity_type', 'taxonomy_term')
  ->propertyCondition('name', $term->name)
  ->propertyCondition('vid', $term->vid)
  ->execute();
  // Term doesn't exist: handle it the normal way
  if (empty($result['taxonomy_term'])) {
    return;
  }
    // Term exists already: update it
  $termslist = array_keys($result['taxonomy_term']);
  $tid = array_shift($termslist);
  $term->tid = $tid;
  $original = taxonomy_term_load($tid);
  $term->original = $original;
}

/**
 * Implements hook_block_info().
 */
function scs_custom_block_info() {
  $blocks['scs_custom_speech_tools'] = array(
    'info' => t('AKDN Speech Tools'),
    );
  $blocks['scs_custom_language_switcher'] = array(
    'info' => t('SCS Custom Language Switcher'),
    );
  $blocks['language_header'] = array(//For header
    'info' => t('SCS Custom Language Switcher Header'),
    );
  $blocks['scs_custom_speech_quotes_heading'] = array(
    'info' => t('AKDN Speech Quote Heading'),
    );
  $blocks['scs_custom_reset_filters'] = array(
    'info' => t('Reset Filters'),
    );
  $blocks['scs_custom_related_content'] = array(
    'info' => t('SCS Related Content'),
    'cache' => DRUPAL_NO_CACHE,
    );

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function scs_custom_block_view($delta = '') {
  $block = array();

  switch ($delta) {
    case 'scs_custom_speech_tools':
    $block['subject'] = t('AKDN Speech Tools');
    $block['content'] = scs_custom_speech_tools();

    break;

    case 'scs_custom_language_switcher':
    $block['subject'] = t('This page is also availabe in ');
    $block['content'] = scs_custom_language_switcher();

    break;

    case 'language_header':
    $block['subject'] = t('');
    $block['content'] = scs_custom_language_switcher_header();

    break;

    case 'scs_custom_speech_quotes_heading':
    $block['subject'] = t('Speech Quote heading');
    $block['content'] = scs_custom_speech_quotes_heading();

    break;

    case 'scs_custom_reset_filters':
    $block['subject'] = t('Reset Filters');
    $block['content'] = scs_custom_reset_filters();

    break;

    case 'scs_custom_related_content':
    $block['subject'] = t('SCS Related Content');
    $block['content'] = scs_custom_related_content();
    break;
  }

  return $block;
}

/**
 * Displays custom language switcher
 */
function scs_custom_language_switcher($main_switcher = FALSE) {
  if (drupal_multilingual()) {
    $path = drupal_is_front_page() ? '<front>' : $_GET['q'];
    $links = language_negotiation_get_switch_links('language_url', $path);
    $new_links = $links->links;
  // Narrow links based on node page translations.
    if (arg(0) == 'node' && is_numeric(arg(1))) {
      $node = node_load(arg(1));
      $is_translated = translation_node_get_translations($node->tnid);
    }

  // Remove current language from list
    global $language;
    $lang_name = $language->language;
    unset($new_links[$lang_name]);

  // Display block only when content is translated
    if ($is_translated) {
      foreach($new_links as $key=>$value) {
        if (!array_key_exists($key, $is_translated)) {
          unset($new_links[$key]);
        }
      }
    // Somehow href of translated node is redirecting to same node
    // Updating href to the translated node
      foreach($is_translated as $key=>$value) {
        $nid = $value->nid;
        $lan = $value->language;
        $new_links[$lan]['href'] = 'node/'.$nid;
      }
      drupal_add_css(drupal_get_path('module', 'locale') . '/locale.css');
      $class = "language-switcher-{$links->provider}";
      $variables = array(
        'links' => $new_links,
        'attributes' => array('class' => array($class)),
        );
      return theme('links__locale_block', $variables);
    } else {
      return FALSE;
    }
  } else {
   return FALSE;
 }

}

/**
 * Displays custom language switcher on header
 */
function scs_custom_language_switcher_header($main_switcher = FALSE) {
  if (drupal_multilingual()) {
    $path = drupal_is_front_page() ? '<front>' : $_GET['q'];
    $links = language_negotiation_get_switch_links('language_url', $path);
    $new_links = $links->links;
  // Narrow links based on node page translations.
    if (arg(0) == 'node' && is_numeric(arg(1))) {
      $node = node_load(arg(1));
      $is_translated = translation_node_get_translations($node->tnid);
    }

  // Remove current language from list
    global $language;
    $lang_name = $language->language;
    unset($new_links[$lang_name]);

  // Display block only when content is translated
    if ($is_translated) {
      foreach($new_links as $key=>$value) {
        if (!array_key_exists($key, $is_translated)) {
          unset($new_links[$key]);
        }
      }
    // Somehow href of translated node is redirecting to same node
    // Updating href to the translated node
      foreach($is_translated as $key=>$value) {
        $nid = $value->nid;
        $lan = $value->language;
        $new_links[$lan]['href'] = 'node/'.$nid;
      }
      drupal_add_css(drupal_get_path('module', 'locale') . '/locale.css');
      $class = "language-switcher-{$links->provider}";
      $variables = array(
        'links' => $new_links,
        'attributes' => array('class' => array($class)),
        );
      return theme('links__locale_block', $variables);
    } else {
      return FALSE;
    }
  } else {
   return FALSE;
 }

}

/**
 * Function to create reset link to reset Faceted search filters
 */
function scs_custom_reset_filters() {
  global $language;
  echo "<span class='kc-reset-filters'>" . "<span class='kc-reset-filter-text'>" . Filters . "</span>". l('Reset', current_path(), array('language' => $language->language, 'html' => TRUE, 'attributes' => array('class' => 'akdn-solr-rest-link'))) . "</span>";
}

/**
 * Function to create the akdn speech tools block.
 */
function scs_custom_speech_tools() {
  $vocabulary = taxonomy_vocabulary_machine_name_load('speech_themes');
  $terms = entity_load('taxonomy_term', FALSE, array('vid' => $vocabulary->vid));

  foreach ($terms as $term) {
    $class = "inactive-theme";
    if (isset($_GET['f'])) {
      if (array_search('field_speech_themes:' . $term->tid, $_GET['f']) !== FALSE) {
        $class = "active-theme";
      }
    }
    $list[] = l(t($term->name), 'quote-finder',
      array(
        'query' => array(
          'f'  => array(
            '0' => 'field_speech_themes:' . $term->tid,
            ),
          ),
        'attributes' => array('class' => array($class)),
        ));
  }

  $theme_args = array('items' => $list, 'title' => t('Quote Finder'), 'type' => 'ol');
  $content = theme('item_list', $theme_args);

  return $content;
}

/**
 * Function AKDN speech quotes heading.
 */
function scs_custom_speech_quotes_heading() {
  if (isset($_GET['f'])) {
    foreach ($_GET['f'] as $value) {
      if (strstr($value, 'field_speech_themes')) {
        $theme = explode(":", $value);
        $theme = $theme[1];
        $term = taxonomy_term_load($theme);
        return t('Quotations by His Highness the Aga Khan on @theme', array('@theme' => $term->name));
      }
    }
  }
  return "";
}


/**
 * Function to create related content.
 */
function scs_custom_related_content() {
  $node = menu_get_object();
  $output = "";
  // Speeches.
  $output .= scs_custom_related_content_process_data($node, 'field_speeches_reference', 'Speeches:', 'ul');
  return $output;
}


/**
 * Show related content data and process accordingly
 * @param  [type] $node       [description]
 * @param  [type] $field_name [description]
 * @param  [type] $title      [description]
 * @param  string $type       [description]
 * @return [type]             [description]
 */
function scs_custom_related_content_process_data($node, $field_name, $head_title, $type ='ul') {
  $output = '';
  if (isset($node->{$field_name}[LANGUAGE_NONE])) {
    $items = array();
    foreach ($node->{$field_name}[LANGUAGE_NONE] as $value) {
      $title = scs_custom_return_get_short_title(intval($value['nid']));
      if (empty($title)) {
        continue;
      }
      $items[] = l($title, 'node/' . $value['nid']);

    }
    if (count($items) > 0) {
      $theme_args = array('items' => $items, 'title' => t('<span class="views-label">'.$head_title.'</span>'), 'type' => $type);
      $output .= theme('item_list', $theme_args);

    }
  }
  return $output;
}

/**
 * Function to return the short title.
 * @param
 * $nid: node id.
 */
function scs_custom_return_get_short_title($nid) {
  global $language;
  $lang = $language->language;
  $lang = 'und';
  $title = db_query('SELECT field_short_title_value FROM {field_data_field_short_title} WHERE entity_id = :nid and language = :language',
    array(':nid' => $nid, ':language' => $lang))->fetchField();
  return $title;
}

function scs_custom_node_view($node, $view_mode, $langcode) {
  if ($view_mode == "full" && $node->type == "article") {
    $article_type = explode('/', $node->path[alias]);
    if($article_type[1] == 'media') {
      if (empty($node->field_article_author['und'][0]['value'])) {
        unset($node->content['field_article_author']);
      }
      if (empty($node->field_media_source_url['und'][0]['value'])) {
        unset($node->content['field_media_source_url']);
      }
      if (empty($node->field_media_source['und'][0]['value'])) {
        unset($node->content['field_media_source']);
      }
      if (empty($node->field_publish_date['und'][0]['value'])) {
        unset($node->content['field_publish_date']);
      }
    }
    $article_type = explode('/', $node->path[alias]);
    if($article_type[1] == 'press-release') {
     unset($node->content['field_publish_date']);
     unset($node->content['field_article_author']);
     unset($node->content['field_media_source_url']);
     unset($node->content['field_media_source']);
   }
 }
}

/*
  @function alters the views query where name of the view is specified.
  @param view: view object of the specified view.
  @param query: Query object to modify the query.
 */
  function scs_custom_views_query_alter(&$view, &$query){
    if ($view->name == 'files'){
      $roles_id =_get_roles();
      $join = new views_join();
      $join->table = 'users_roles';
      $join->field = 'uid';
      $join->left_table = 'users_file_managed';
      $join->left_field = 'uid';
      $join->type = 'INNER';

      $query->table_queue['ur'] = array (
        'alias' => 'ur',// I believe this is optional
        'table' => 'users_roles',
        'relationship' => 'users',
        'join' => $join,
        );
      $query->where[] = array(
        'conditions' => array(
          array(
            'field' => 'ur.rid',
            'value' => $roles_id,
            'operator' => 'IN',
            ),
        // add more conditions if you want to
          ),
        //'type' => 'OR' ,// I believe this is an operator for multiple conditions
        );
    }
  }

/*
@function returns the roles array for the current user
 */
function _get_roles() {
  global $user;
  $user_roles = array_keys($user->roles);
  $roles = array();
  $query = db_select('role','roles');
  $query->fields('roles',array('rid','name'));
  $result = $query->execute()->fetchAll();
  foreach ($result as $key => $value) {
    array_push($roles, (int)$value->rid);
  }
  if (($key = array_search('2', $user_roles)) !== false) {
   unset($user_roles[$key]);
 }
 if (in_array('16', $user_roles)) {
  if (($key = array_search('3', $roles)) !== false) {
   unset($roles[$key]);
   $role_array = array_merge($user_roles,$roles);
 }
}
if (in_array('3', $user_roles)) {
  $role_array = array_merge($user_roles,$roles);
}
if (in_array('11', $user_roles)) {
  $user_array = $user_roles;
}
return $user_array;
}
