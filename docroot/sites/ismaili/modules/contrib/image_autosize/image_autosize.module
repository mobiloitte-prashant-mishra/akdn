<?php
/**
 * @file image_autosize.module
 *
 * After adding to an input format, this filter will parse the contents of
 * submitted content and automatically scale image files to match the set
 * dimensions of img tags.
 */

/**
 * Implements hook_init().
 */
function image_autosize_init() {
     drupal_add_js(drupal_get_path('module', 'image_autosize') . '/image_autosize.js');
}

/**
 * Implements hook_menu().
 */
function image_autosize_menu() {
  $items['image_autosize_ajax_create_image_style'] = array(
    'title' => 'Create Image style',
    'page callback' => 'image_autosize_ajax_image_style',
    'page arguments' => $settings,
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,

  );

  return $items;
}

/**
 * Implements hook_filter_info().
 */
function image_autosize_filter_info() {
  $filters['image_autosize'] = array(
    'title' => t('Image Autosize filter'),
    'description' => t('Use image style instead of original image, based on alignment.'),
    'process callback' => '_filter_image_autosize_process',
    'settings callback' => '_filter_image_autosize_settings',
    'default settings' => array(
      'minwidth' => 0,
      'link' => array(
        'enabled' => 0,
        'class' => '',
        'rel' => '',
      ),
      'image_locations' => array('local'),
      'styles' => array(
        'full_width' => 0,
        'file_media_full_width' =>0,
        'half_width' => 0,
        'file_media_half_width' =>0,
        'one_third_left' => 0,
        'file_media_third_left' => 0,
        'one_third_right' => 0,
        'file_media_right_third' => 0,
        'half_width_right' => 0,
        'file_media_half_right' => 0,
        'half_width_left' => 0,
        'file_media_left_half' => 0,
      ),
    ),
  );

  return $filters;
}

/**
 * Implements hook_theme().
 */
function image_autosize_theme() {
  return array(
    'image_autosize_image' => array(
      'variables' => array('image' => NULL, 'settings' => NULL),
    ),
  );
}

/**
 * Settings callback for Image Autosize filter.
 */
function _filter_image_autosize_settings($form, &$form_state, $filter, $format, $defaults) {
  $filter->settings += $defaults;

  $settings['image_locations'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Resize images stored'),
    '#options' => array(
      'local' => t('Locally'),
      'remote' => t('On remote servers'),
    ),
    '#default_value' => $filter->settings['image_locations'],
    '#required' => TRUE,
    '#description' => t('This option will determine which images will be analyzed for &lt;img&gt; tag differences. Enabling autosizing of remote images might not have any effect if you don\'t have Remote Stream Wrapper installed.'),
  );
  $settings['minwidth'] = array(
    '#type' => 'textfield',
    '#title' => t('Minimum width (px) of image'),
    '#size' => 3,
    '#default_value' => $filter->settings['minwidth'],
    '#description' => t('Only process images with a minimal width. Set it as 0 to process all images.'),
  );

  $settings['link'] = array(
    '#type' => 'container',
    '#title' => t('Link to original image'),
  );
  $settings['link']['enabled'] = array(
    '#type' => 'checkbox',
    '#title' => t('If resized, add a link to the original image.'),
    '#default_value' => $filter->settings['link']['enabled'],
  );
  $settings['link']['class'] = array(
    '#type' => 'textfield',
    '#title' => t('Optionally, give it the class'),
    '#size' => '10',
    '#default_value' => $filter->settings['link']['class'],
  );
  $settings['link']['rel'] = array(
    '#type' => 'textfield',
    '#title' => t('and/or a rel attribute'),
    '#size' => '10',
    '#default_value' => $filter->settings['link']['rel'],
  );

  $settings['styles'] = array(
    '#type' => 'container',
    '#title' => t('Image style for alignment'),
  );
  $aligns = array('media-full-width'=>'full_width',
    'media-element file-media-full-width' => 'file_media_full_width',
    'full'=>'half_width',
    'media-element file-media-large' => 'file_media_half_width',
    'one-third-left'=>'one_third_left',
    'media-element file-media-third-left' =>'file_media_third_left',
    'one-third-right'=> 'one_third_right',
    'media-element file-media-right-third' => 'file_media_right_third',
    'half-right'=> 'half_width_right',
    'media-element file-media-half-right' => 'file_media_half_right',
    'half-left' => 'half_width_left',
    'media-element file-media-left-half' => 'file_media_left_half');
  $styles = array(0 => t('- Disabled -'));
  foreach (image_styles() as $key => $style) {
    $styles[$key] = $style['name'];
  }
  foreach ($aligns as $key => $align) {
    $settings['styles'][$key] = array(
      '#type' => 'select',
      '#title' => t($align),
      '#options' => $styles,
      '#default_value' => $filter->settings['styles'][$key],
    );
  }

  return $settings;
}

/**
 * Process function for Image Autosize filter.
 */
function _filter_image_autosize_process($text, $filter) {
  $settings = $filter->settings;
  if (!$images = image_autosize_get_images($text, $settings)) {
    return $text;
  }

  image_autosize_filter_process($images, $text, $settings);
  drupal_alter('image_autosize_postfilter', $text);
  return $text;
}

/**
 * Processing function for image autosize filter.
 *
 * @param $images
 *   An array of image information, detailing images that need to be replaced.
 * @param $text
 *   The original text of the post that needs src tags updated.
 */
function image_autosize_filter_process($images, &$text, $settings) {
  $search = array();
  $replace = array();
  foreach ($images as $image) {
    $search[] = $image['img_tag'];
    $replace[] = image_autosize_image_tag($image, $settings);
  }

  $text = str_replace($search, $replace, $text);
}

/**
 * Replace img tag with autosize one.
 */
function image_autosize_image_tag($image, $settings) {
  // Maybe we need some preprocess on $image
  // If not, then go directly to the theming layer:
  $image['attributes']['src'] = image_style_url($settings['styles'][$image['attributes']['class']], $image['local_path']);
  drupal_alter('image_autosize_infilter', $image);
  return theme('image_autosize_image', array('image' => $image, 'settings' => $settings));
}

/**
 * Parsing function to locate all images in a piece of text that need replacing.
 *
 * @param $settings
 *   An array of settings that will be used to identify which images need
 *   updating.
 *
 * @param $text
 *   The text to be updated with the new img src tags.
 */
function image_autosize_get_images($text, $settings) {
  $base_path = base_path();
  $images = array();

  // Find all image tags, ensuring that they have a src.
  $matches = array();
  preg_match_all('/((<a [^>]*>)[ ]*)?(<img[^>]*?src[ ]*=[ ]*"([^"]+)"[^>]*>)/i', $text, $matches);
  // Loop through matches and find if replacements are necessary.
  // $matches[0]: All complete image tags and preceeding anchors.
  // $matches[1]: The anchor tag of each match (if any).
  // $matches[2]: The anchor tag and trailing whitespace of each match (if any).
  // $matches[3]: The complete img tag.
  // $matches[4]: The src value of each match.

  foreach ($matches[0] as $key => $match) {
    $link_tag = $matches[1][$key];
    $img_tag = $matches[3][$key];
    $src = $matches[4][$key];
    $has_link = (bool) $link_tag;

    $attributes = array();

    // Find attributes of this image tag.
    $attribute_matches = array();
    preg_match_all('/([a-z]+)[ ]*=[ ]*"([^"]*)"/i', $img_tag, $attribute_matches);
    foreach ($attribute_matches[0] as $key => $match) {
      $attribute = $attribute_matches[1][$key];
      $attribute_value = $attribute_matches[2][$key];
      $attributes[$attribute] = $attribute_value;
    }

    // We also take care of alignment specified with float in CSS.
    if (isset($attributes['style'])) {
      if (preg_match('/\bfloat[ ]*:[ ]*(left|right)\b/i', $attributes['style'], $match)) {
        $attributes['align'] = $match[1];
      }
      unset($attributes['style']);
    }


    // Find the image align if any.
    $align = isset($attributes['align']) ? strtolower($attributes['align']) : '';
    if (!in_array($align, array('left', 'right', 'center'))) {
      $align = 'none';
    }

    // Determine if this is a local or remote file.
    $location = 'unknown';
    if (strpos($src, $base_path) === 0) {
      $location = 'local';
    }
    elseif (preg_match('/http[s]?:\/\/' . preg_quote($_SERVER['HTTP_HOST'] . $base_path, '/') . '/', $src)) {
      $location = 'local';
    }
    elseif (strpos($src, 'http') === 0) {
      $location = 'remote';
    }

    // If not resizing images in this location, continue on to the next image.
    if (!in_array($location, $settings['image_locations'])) {
      continue;
    }

    // Convert the URL to a local path. Pay attention: it could by an
    // image style derivative.
    $local_path = NULL;
    if ($location == 'local') {
      // Remove the http:// and base path.
      $local_path = preg_replace('/(http[s]?:\/\/' . preg_quote($_SERVER['HTTP_HOST'], '/') . ')?' . preg_quote($base_path, '/') . '/', '', $src, 1);
      // Convert to a public file system URI.
      $directory_path = file_stream_wrapper_get_instance_by_scheme('public')->getDirectoryPath() . '/';
      if (preg_match('!^' . preg_quote($directory_path, '!') . '!', $local_path)) {
        $local_path = 'public://' . preg_replace('!^' . preg_quote($directory_path, '!') . '!', '', $local_path);
      }
      // Convert to a file system path if using private files.
      elseif (preg_match('!^(\?q\=)?' . $lang_codes . 'system/files/!', $local_path)) {
        $local_path = 'private://' . preg_replace('!^(\?q\=)?' . $lang_codes . 'system/files/!', '', $local_path);
      }
      $local_path = rawurldecode($local_path);
    }

    // Get the image size.
    if ($location == 'local') {
      $image_size = @getimagesize($local_path);
    }
    else {
      $image_size = @getimagesize($src);
    }
    // If minwidth not satisfied, don't do anything.
    if ($image_size !== FALSE && $image_size[0] < $settings['minwidth']) {
      continue;
    }

    // Remove no longer appropriate attributes
    unset($attributes['width']);
    unset($attributes['height']);

    if (isset($attributes['style'])) {
      $attributes['style'] = preg_replace('/\b(float|width|height)[ ]*:[ ]*.+?\b/i', $attributes['style'], '');
    }

    $images[] = array(
      'link_tag' => $link_tag,
      'img_tag' => $img_tag,
      'align' => $align,
      'attributes' => $attributes,
      'has_link' => $has_link,
      'origin' => $src,
      'local_path' => $local_path,
    );
  }


  return $images;
}

function image_autoresize_cvf_convert_object_to_array($data) {

    if (is_object($data)) {
        $data = get_object_vars($data);
    }

    if (is_array($data)) {
        return array_map(__FUNCTION__, $data);
    }
    else {
        return $data;
    }
}

function theme_image_autosize_image($variables) {
/*print_r($variables);
die();*/
  $meta_info ='';
  $image = $variables['image'];
  $settings = $variables['settings'];
  $alt = $image['attributes']['alt'];

  $flag = 0;
 if(isset($variables['image']['attributes']['info']) && $variables['image']['attributes']['info'] != " ") {
  $flag = 1;
  $a = urldecode($variables['image']['attributes']['info']);
  $b = json_decode($a);
  $c = image_autoresize_cvf_convert_object_to_array($b);

  $alt = t($c['fields']['field_file_image_alt_text[und][0][value]']);

  $meta_info .= '<div class="field field-name-field-file-image-title-text field-type-text field-label-hidden">';
  $meta_info .= '<div class="field-items">';
  $meta_info .= '<div class="field-item even">'.t($c['fields']['field_file_image_title_text[und][0][value]']).'</div>';
  $meta_info .= '</div>';
  $meta_info .= '</div>';

  $meta_info .= '<div class="field field-name-field-credit field-type-text field-label-hidden">';
  $meta_info .= '<div class="field-items">';
  $meta_info .= '<div class="field-item even">'.t($c['fields']['field_credit[und][0][value]']).'</div>';
  $meta_info .= '</div>';
  $meta_info .= '</div>';

 /* $meta_info .= '<div class="field field-name-field-rough-caption field-type-text field-label-hidden">';
  $meta_info .= '<div class="field-items">';
  $meta_info .= '<div class="field-item even">'.t($c['fields']['field_rough_caption[und][0][value]']).'</div>';
  $meta_info .= '</div>';
  $meta_info .= '</div>';

  $meta_info .= '<div class="field field-name-field-media-source field-type-text field-label-hidden">';
  $meta_info .= '<div class="field-items">';
  $meta_info .= '<div class="field-item even">'.t($c['fields']['field_media_source[und][0][value]']).'</div>';
  $meta_info .= '</div>';
  $meta_info .= '</div>';

  $meta_info .= '<div class="field field-name-field-media-description field-type-text-long field-label-hidden">';
  $meta_info .= ' <div class="field-items">';
  $meta_info .= '<div class="field-item even">'.t($c['fields']['field_media_description[und][0][value]']).'</div>';
  $meta_info .= '</div>';
  $meta_info .= '</div>';

  $meta_info .= '<div class="field field-name-field-external-url field-type-link-field field-label-hidden">';
  $meta_info .= '<div class="field-items">';
  $meta_info .= ' <div class="field-item even">'.t($c['fields']['field_external_url[und][0][title]']).'</div>';
  $meta_info .= ' </div>';
  $meta_info .= '</div>';*/

  unset($image['attributes']['info']);
}

  $allowed_classes =  array('media-full-width',
    'full',
    'one-third-left',
    'one-third-right',
    'half-right',
    'half-left',
    'media-element file-media-third-left',
    'media-element file-media-half-right',
    'media-element file-media-right-third',
    'media-element file-media-left-half',
    'media-element file-media-large',
    'media-element file-media-full-width');
  if(!in_array($image['attributes']['class'], $allowed_classes)){
     $image['attributes']['src'] = $image['origin'];
  }

 if($settings['styles'][$image['attributes']['class']] == '0') {
    $image['attributes']['src'] = $image['origin'];
  }

  $check_img_src = drupal_http_request($image['attributes']['src']);
  if($check_img_src->code != '200') {
    $image['attributes']['src'] = $image['origin'];
  }

  // We don't need ALT attribute because we display it explicitely as image
  // caption.

  $image['attributes']['alt'] = $alt;
  // We use CSS to make the alignment.
  unset($image['attributes']['align']);
  $img = '<img' . drupal_attributes($image['attributes']) . ' />';
  if ($settings['link']['enabled']) {
    $attributes = array();
    if ($settings['link']['class']) {
      $attributes['class'] = $settings['link']['class'];
    }
    if ($settings['link']['rel']) {
      $attributes['rel'] = $settings['link']['rel'];
    }

    $img = l($img, $image['origin'], array(
      'html' => TRUE,
      'attributes' => $attributes,
    ));
  }

  if ($flag == 1) {
    $output .= '<div class="'.$image['attributes']['class'].'">' .$img . $meta_info . '</div>';
  } else {
    $output =  $img;
  }

  return $output;
}


/* hook_media_token_to_markup_alter
*  add class on media image used in body
*/
function image_autosize_media_token_to_markup_alter(&$element, $tag_info, $settings) {
  $allowed_view_modes = array('media-full-width',
    'full',
    'one-third-left',
    'one-third-right',
    'half-right',
    'half-left',
    'media-element file-media-third-left',
    'media-element file-media-half-right',
    'media-element file-media-right-third',
    'media-element file-media-left-half',
    'media-element file-media-large',
    'media-element file-media-full-width');
  if (($element['content']['#bundle'] == 'image') && (in_array($element['content']['file']['#view_mode'], $allowed_view_modes))) {
         $element['content']['file']['#item']['attributes']['class']= $element['content']['file']['#view_mode'];
  }
}


function image_autosize_ajax_image_style() {
/*[media-full-width] => banner
    [media-element file-media-full-width] => banner
    [full] => half_width
    [media-element file-media-large] => half_width
    [one-third-left] => one_third
    [media-element file-media-third-left] => brightcove_browser
    [one-third-right] => one_third
    [media-element file-media-right-third] => one_third
    [half-right] => half_width
    [media-element file-media-half-right] => half_width
    [half-left] => half_width
    [media-element file-media-left-half] => half_width */

  $get_url = trim($_REQUEST['img_src']);
  $img_size = $_REQUEST['size'];

  $pos = strpos($get_url, 'itok');
    if ($pos === false) {
      $query = db_select('filter', 'f');
      $query->condition('name', 'image_autosize ', '=');
      $query->condition('format', 'full_html ', '=');
      $query->fields('f');
      $result = $query->execute();
      $style_settings = array();
      foreach ($result as $rec) {
        $style_settings = unserialize($rec->settings);
        $style_settings = $style_settings['styles'];
      }

      $image_cache = $style_settings['media-full-width']; //default image style full width

      if($img_size == 'full') {
        $image_cache = $style_settings['media-full-width']; //full width
      }

      if($img_size == 'half') {
        $image_cache = $style_settings['full']; //half width
      }

      if($img_size == 'one_third') {
        $image_cache = $style_settings['one-third-left']; //on third width
      }

      $temp = explode('/', $get_url);
      $last = end($temp);
      $url= 'public://'.$last;
      $resize_image_url = image_style_url($image_cache, $url);
      $img_check = drupal_http_request($resize_image_url);
      if($img_check->code == '200') {
        print $resize_image_url;
      } else {
        print $get_url;
      }
    } else {
     print $get_url;
    }
}
