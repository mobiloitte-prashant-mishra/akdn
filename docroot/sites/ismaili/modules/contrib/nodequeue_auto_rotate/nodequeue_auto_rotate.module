<?php

/**
 * @file
 * A module to Auto Rotate Nodequeues on a schedule.
 */

/**
 * Implements hook_form_alter().
 */
function nodequeue_auto_rotate_form_nodequeue_edit_queue_form_alter(&$form, &$form_state) {
  $default_date = NULL;
  $default_frequency = NULL;
  $default_checkbox = FALSE;
  $default_collapsed = TRUE;

  foreach (_nodequeue_auto_rotate_load() as $key => $value) {
    if ($key == $form['qid']['#value']) {
      $default_queues[$key] = $key;
      $default_date = $value['date'];
      $default_frequency = $value['freq'];
      $default_checkbox = TRUE;
      $default_collapsed = FALSE;
    }
  }

  /*
   * Got this from auto_nodqueue.module. I was adding weight.
   * This is ugly. The nodequeue form doesn't come with field weights,
   * and we don't want to add them ourselves. This seems safer as
   * we only assume one field's name.
   */
  $form_orig = $form;
  $form = array();
  foreach ($form_orig as $key => $value) {
    $form[$key] = $value;
    if ($key == 'title') {
      $form['rotate_schedule'] = array(
        '#type' => 'fieldset',
        '#title' => t('Rotate Schedule'),
        '#collapsible' => TRUE,
        '#collapsed' => $default_collapsed,
      );
      $form['rotate_schedule']['expand_rotate_schedule'] = array(
        '#type' => 'checkbox',
        '#title' => t('Check here if you want to rotate queue on a schedule.'),
        '#default_value' => $default_checkbox,
      );
      $form['rotate_schedule']['nodequeue_rotate_on'] = array(
        '#type' => 'date_popup',
        '#title' => t('Rotation Start Date'),
        '#date_format' => 'Y-m-d H:i:s',
        '#date_year_range' => '0:+10',
        '#default_value' => !empty($default_date) ? format_date($default_date, 'custom', 'Y-m-d H:i:s') : '',
      );
      $form['rotate_schedule']['nodequeue_rotate_frequency'] = array(
        '#type' => 'textfield',
        '#title' => t('Frequency'),
        '#description' => 'Frequency of rotation. Empty or 0 for only date indicated.',
        '#size' => 10,
        '#maxlength' => 20,
        '#element_validate' => array('element_validate_integer'),
        '#default_value' => $default_frequency,
      );
    }
  }

  $form['#submit'][] = 'nodequeue_auto_rotate_form_nodequeue_edit_queue_form_alter_submit';
}

/**
 * Implements hook_form_validate().
 */
function nodequeue_auto_rotate_edit_queue_form_validate($form, &$form_state) {
  if ($form_state['values']['nodequeue_rotate_frequency'] && !$form_state['values']['nodequeue_rotate_on']) {
    form_set_error('Rotation Start Date', t('Enter a date to start rotation.'));
  }
}

/**
 * Submit function nodequeue_edit_queue_form.
 */
function nodequeue_auto_rotate_form_nodequeue_edit_queue_form_alter_submit($form, &$form_state) {
  $qid = $form['qid']['#value'];

  _nodequeue_auto_rotate_delete($qid);

  if ($form_state['values']['nodequeue_rotate_on']) {
    $time = strtotime($form_state['values']['nodequeue_rotate_on']);
    $now = time();
    db_insert('nodequeue_auto_rotate')->fields(array(
      'qid' => $qid,
      'rotate_start' => $time,
      'rotate_frequency' => $form_state['values']['nodequeue_rotate_frequency'],
    ))->execute();
  }
}

/**
 * Helper function to delete nodequeue scheduler data from DB.
 */
function _nodequeue_auto_rotate_delete($qid) {
  db_query("DELETE FROM {nodequeue_auto_rotate} WHERE qid=:qid", array(':qid' => $qid));
}

/**
 * Helper function to load nodequeue scheduler data from DB.
 */
function _nodequeue_auto_rotate_load() {
  $result = array();
  $query = db_select('nodequeue_auto_rotate', 'nsr')
  ->fields('nsr', array('qid', 'rotate_start', 'rotate_frequency'))
  ->execute();
  while ($row = $query->fetchObject()) {
    $result[$row->qid]['date'] = $row->rotate_start;
    $result[$row->qid]['freq'] = $row->rotate_frequency;
  }
  return $result;
}

/**
 * Implements hook_cron().
 */
function nodequeue_auto_rotate_cron() {
  $now = time();
  $query = db_select('nodequeue_auto_rotate', 'nrs')
  ->fields('nrs', array('qid', 'rotate_start', 'rotate_frequency'))
  ->condition('rotate_start', $now, '<')
  ->execute();

  while ($row = $query->fetchObject()) {
    $input = (int) $row->rotate_frequency;
    $rotate = $row->rotate_start + ($input * 86400);

    db_query("UPDATE {nodequeue_schedule_rotate} SET  `rotate_start` = :rotate WHERE `qid` = :qid", array(':rotate' => $rotate, ':qid' => $row->qid));

    $subqueues = nodequeue_load_subqueues_by_queue($row->qid);
    $subqueue = array_shift(array_values($subqueues));
    nodequeue_queue_front($subqueue, $subqueue->count);
  }
}
