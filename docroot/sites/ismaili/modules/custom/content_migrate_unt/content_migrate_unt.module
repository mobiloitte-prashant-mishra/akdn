<?php

define('CONTENT_MIGRATE_DATABASE_NAME', variable_get('content_migrate_database', 'source_db_name'));
define('CONTENT_MIGRATE_DB_PREFIX', variable_get('content_migrate_unt_source_db_prefix', ''));

/**
 * Implements hook_migrate_api().
 * For migration classes to be recognized by the Migrate module.
 */
function content_migrate_unt_migrate_api() {
  $api = array(
    'api' => 2,
    'migrations' => array(
     'ArticleContent' => array('class_name' => 'ArticleContentMigration'),
     'PrimaryCategoryTerm' => array('class_name' => 'PrimaryCategoryTermMigration'),
     'TagsTerm' => array('class_name' => 'TagsTermMigration'),
     'GeographyTerm' => array('class_name' => 'GeographyTermMigration'),
     'ContentAuthorTerm' => array('class_name' => 'ContentAuthorTermMigration'),
     'GalleryContent' => array('class_name' => 'GalleryContentMigration'),
     'SpeechContent' => array('class_name' => 'SpeechContentMigration'),
     'RecipeContent' => array('class_name' => 'RecipeContentMigration'),
     'AttributionTerm' => array('class_name' => 'AttributionTermMigration'),
     'RecipeTypeTerm' => array('class_name' => 'RecipeTypeTermMigration'),
     'EventContent' => array('class_name' => 'EventContentMigration'),
     'InternalArticleContent' => array('class_name' => 'InternalArticleContentMigration'),
     'SpecialArticleContent' => array('class_name' => 'SpecialArticleContentMigration'),
     'FestivalArticleContent' => array('class_name' => 'FestivalArticleContentMigration'),
     'RedirectArticleContent' => array('class_name' => 'RedirectArticleContentMigration'),
     'VideoArticleContent' => array('class_name' => 'VideoArticleContentMigration'),
     'MediaContent' => array('class_name' => 'MediaContentMigration'),
     'GeneralMediaContent' => array('class_name' => 'GeneralMediaContentMigration'),
     'ProcessSpecialContent' => array('class_name' => 'ProcessSpecialContentMigration'),
    ),
  );
  return $api;
}

/**
 * Implements hook_menu().
 */
function content_migrate_unt_menu() {
  $items = array();
  $items['admin/config/services/content_migrate_unt_source'] = array(
    'title' => 'Migration - Database settings',
    'description' => 'Get the database name.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('content_migrate_unt_config'),
    'access arguments' => array('administer DRUPAL migration'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/config/services/content_migrate_unt_source/db'] = array(
    'title' => 'Content migration - Database settings',
    'description' => 'Get the database name.',
    'access arguments' => array('administer DRUPAL migration'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  return $items;
}

/**
 * Implements hook_perm().
 */
function content_migrate_unt_perm() {
  return array('administer DRUPAL migration');
}

/**
 * Form for getting the Typo3 database name.
 */
function content_migrate_unt_config($form_state) {
  $category = "1,1,TheIsmaili.org;2,6,Nutrition Centre;3,16,Golden Jubilee;6,11,Ismaili Centre;7,,Learning Centre;8,,ISC;";

  $nutrient = "1,,Calories;2,,Protein;3,8126,Fat;4,8161,Saturated Fat;5,,Carbohydrate;6,8166,Sugar;7,,Fibre;8,8171,Salt;";

  $article_type = "1,8961,Internal;2,8966,External;4,8976,Twish;5,8981,Stub;8,8971,Special;9,1136,Festival;";

  $series_map = "519,9056,field_primary_category;";

  $form['content_migrate_database'] = array(
    '#type' => 'textfield',
    '#title' => t('Database Name'),
    '#description' => t('The Content db must be accessible by the drupal db user and must reside on the same db server.'),
    '#default_value' => variable_get('content_migrate_database', 'source_db_name'),
    '#required' => TRUE
  );
  $form['content_migrate_unt_source_db_prefix'] = array(
    '#type' => 'textfield',
    '#title' => t('Database prefix'),
    '#description' => t('Prefix used for all the tables in the producttion/source db for migration.'),
    '#default_value' => variable_get('content_migrate_unt_source_db_prefix', ''),
    '#required' => FALSE
  );
    $form['content_migrate_unt_base_url'] = array(
    '#type' => 'textfield',
    '#title' => t('Site Base Url'),
    '#description' => t('Set base url for image processing of current site.'),
    '#default_value' => variable_get('content_migrate_unt_base_url', ''),
    '#required' => FALSE
  );
  $form['content_migrate_unt_org_base_url'] = array(
    '#type' => 'textfield',
    '#title' => t('Original Site Base Url'),
    '#description' => t('Set Original base url for image processing without trailing slash.'),
    '#default_value' => variable_get('content_migrate_unt_org_base_url', 'http://iis.ac.uk'),
    '#required' => FALSE
  );
  $form['content_migrate_unt_article_type_mapping'] = array(
    '#type' => 'textarea',
    '#title' => t('Article Type Mapping from OLD to new'),
    '#description' => t('Separate each section by semicolon. individual by comma. e.g 1,218,TheIsmaili.org; Format old id, tid, name'),
    '#default_value' => variable_get('content_migrate_unt_article_type_mapping', $article_type),
    '#required' => FALSE
  );
  $form['content_migrate_unt_category_mapping'] = array(
    '#type' => 'textarea',
    '#title' => t('Category Mapping from OLD to new'),
    '#description' => t('Separate each section by semicolon. individual by comma. e.g 1,218,TheIsmaili.org; Format old id, tid, name'),
    '#default_value' => variable_get('content_migrate_unt_category_mapping', $category),
    '#required' => FALSE
  );
  $form['content_migrate_unt_nutrient_mapping'] = array(
    '#type' => 'textarea',
    '#title' => t('Nutrient Mapping from OLD to new'),
    '#description' => t('Separate each section by semicolon. individual by comma. e.g 1,218,TheIsmaili.org; Format old id, New nid, name'),
    '#default_value' => variable_get('content_migrate_unt_nutrient_mapping', $nutrient),
    '#required' => FALSE
  );
    $form['content_migrate_unt_series_mapping'] = array(
    '#type' => 'textarea',
    '#title' => t('Series Mapping from Old Series id to New Term'),
    '#description' => t('Separate each section by semicolon. individual by comma. e.g 1,218,TheIsmaili.org; Format old id, New nid, field_name'),
    '#default_value' => variable_get('content_migrate_unt_series_mapping', $series_map),
    '#required' => FALSE
  );
  $form['content_migrate_unt_view_migrated_list'] = array(
    '#type' => 'checkbox',
    '#title' => t('View Migrations'),
    '#default_value' => variable_get('content_migrate_unt_view_migrated_list', FALSE),
    '#description' => t('Check if want to show migration nodes.'),
  );
  $form['content_migrate_unt_image_title_size'] = array(
    '#type' => 'textfield',
    '#title' => t('Size of Image title'),
    '#description' => t('Pass the size of the Image title/caption Size allowed.'),
    '#default_value' => variable_get('content_migrate_unt_image_title_size', 255),
    '#required' => FALSE
  );
  $form['content_migrate_unt_recipe_tid'] = array(
    '#type' => 'textfield',
    '#title' => t('Recipe Workbench Section Tid'),
    '#description' => t('Pass the tid of the Nutrition Centre tid'),
    '#default_value' => variable_get('content_migrate_unt_recipe_tid', '1071'),
    '#required' => FALSE
  );
    $form['content_migrate_unt_media_path'] = array(
    '#type' => 'textfield',
    '#title' => t('Media Path'),
    '#description' => t('Pass the Media Path of the Image'),
    '#default_value' => variable_get('content_migrate_unt_media_path', 'http://www.theismaili.org/assets/3/'),
    '#required' => FALSE
  );
  $form['content_migrate_unt_skip_workbench_handling'] = array(
    '#type' => 'checkbox',
    '#title' => t('Skip Workbench processing'),
    '#default_value' => variable_get('content_migrate_unt_skip_workbench_handling', TRUE),
    '#description' => t('Check if want to skip Workbench processing.'),
  );
  return system_settings_form($form);
}

/**
 * Get file name from image path
 * @param type $image_path
 * @param type $default_name
 * @return type
 */
function content_migrate_get_image_name($image_path, $default_name = 'just.jpg') {
  $image_path = str_ireplace("%20", " ", $image_path);
  $files = explode("/", $image_path);
  $file_name = (isset($files[count($files) - 1])) ? $files[count($files) - 1] : $default_name;
  return $file_name;
}

/**
 * Save the remote image
 * @param type $image
 * @param type $filename
 * @return type
 */
function content_migrate_save_remote_image($site_url, $image_url, $skip = 0) {
  $image_processed = array('success' => 0);
  if (variable_get('content_migrate_unt_skip_image_handling')) {
    return $image_processed;
  }
  if ($image_url == '') {
    return $image_processed;
  }
  $show_case_image_url = '';
  $show_case_image_url = content_migrate_unt_get_file_path($image_url);
  $filename = content_migrate_get_image_name($show_case_image_url);
  $filename = content_migrate_generate_filename($filename , $skip);
  $image = @file_get_contents($show_case_image_url);
  if (!empty($image)) {
    $file_saved = file_save_data($image, 'public://' . $filename, FILE_EXISTS_RENAME);
    if ($file_saved->fid) {
      $image_processed['success'] = 1;
      $image_processed['file_saved'] = $file_saved;
    }
  }
  return $image_processed;
}

/**
 * Generate unique filename
 * @param type $filename
 */
function content_migrate_generate_filename($filename, $skip = 0) {
  $file = explode(".", $filename);
  $max = count($file) - 2;
  if ($skip == 1) {
    return $filename;
  } else {
    $file[$max] = $file[$max] . "-" . rand(1000, time());
  }
  $output = implode(".", $file);
  return $output;
}

/**
 * Make Image/file url
 * @param  [type] $site_url [description]
 * @param  [type] $image    [description]
 * @return [type]           [description]
 */
function content_migrate_unt_get_file_path($file_path) {
  $site_url = variable_get('content_migrate_unt_org_base_url', 'http://iis.ac.uk');
  $file_url = '';
  $file_url = $site_url . '/' . $file_path;
  $file_url = str_ireplace(" ", "%20", $file_url);
  $file_url = str_ireplace("&amp;", "&", $file_url);
  $file_url = str_ireplace($site_url . "//", $site_url . "/", $file_url);
  return $file_url;
}


/**
 * Processed saved file
 * @param type $file_saved
 */
function content_migrate_unt_process_image_file($file_saved, $pos = 0) {
  $img = array();
  foreach ($file_saved as $key => $value) {
    $img[LANGUAGE_NONE][$pos][$key] = $value;
  }
  return $img;
}

/**
 * Retain update time
 * @param  [type] $data [description]
 * @param  [type] $changed [description]
 * @return [type]       [description]
 */
function content_migrate_unt_retain_update_time(stdClass $node, $changed) {
  if ($changed <= 0) {
    $changed = 0;
  }
  // $changed = content_migrate_unt_process_changed_date($data['node']->RecordDate);
  $query = db_update('node')
  ->condition('nid', $node->nid)
  ->fields(array('changed' => $changed))
  ->execute();
}

/**
 * Process date section
 * @param stdClass $account
 * @param type $data
 */
function content_migrate_unt_get_unix_timestamp($date, $old_format = 'd/m/Y H:i') {
  $parsed_date = date_parse_from_format($old_format, $date);
  $time = mktime($parsed_date['hour'], $parsed_date['minute'], $parsed_date['second'],
  $parsed_date['month'], $parsed_date['day'], $parsed_date['year'] );
  return $time;
}

/**
 * Set the moderation state of the node to Publish
 * @param  stdClass $account
 * @return [type]
 */
function content_migrate_unt_publish_node($nid, $publish_status = 2) {
  if ($publish_status == 1) {
    $published = 1;
    $state = 'published';
  }
  $node = node_load($nid);
  $query = db_update('workbench_moderation_node_history')
    ->condition('hid', $node->workbench_moderation['current']->hid)
    ->fields(array('published' => $published))
    ->execute();
  workbench_moderation_moderate($node, $state);
  $live_revision = workbench_moderation_node_current_load($node);
  $live_revision->status = $published;
  $live->changed = $node->changed;
  $live_revision->revision = 0;
  $live_revision->workbench_moderation['updating_live_revision'] = TRUE;
  node_save($live_revision);
}

/**
 * Set field format
 * @param  stdClass $node       [description]
 * @param  [type]   $field_name [description]
 * @param  string   $format     [description]
 * @return [type]               [description]
 */
function content_migrate_unt_set_field_format(stdClass $node, $field_name, $format = 'full_html') {
  $node->{$field_name}[LANGUAGE_NONE][0]['format'] = $format;
}

/**
 * Process image inside body
 * @param stdClass $account
 * @param type $data
 * @param type $site_url
 */
function content_migrate_unt_process_body_image($body, $site_url, $replace_pattern = "/imagedetail/", $skip_image = 'no') {
  $body = str_ireplace('class="imagelink', 'class="imagelink colorbox init-colorbox-processed cboxElement', $body);
  $find_data = '.jpg" /></a><br />';
  $replace_data = '.jpg" /></a>';
  $body = str_ireplace($find_data, $replace_data, $body);
  $body = str_ireplace('style="', 'stylee="', $body);
  $body = content_migrate_unt_process_body_pdf($body, $site_url);
  $site_path = variable_get('content_migrate_unt_base_url', '');
  $img_collection = content_migrate_unt_body_image_info($body);
  if (!isset($img_collection['0']['src'])) {
    return $body;
  }
  if ($img_collection['0']['src'] != '') {
    foreach ($img_collection as $pos => $img_info) {
      $path_parts = pathinfo($img_info['src']);
      //skip and remove presence of such file from the body
      if (($path_parts['basename'] == $skip_image) && ($skip_image != 'no')) {
        $body = str_ireplace($img_info['src'], '', $body);
        continue;
      }
      $find_data = 'alt="' . $img_info['alt'] .'"';
      $replace_data = ' title="' . $img_info['alt'] .'" ' . 'alt="' . $img_info['alt'] .'"';
      $body = str_ireplace($find_data, $replace_data, $body);
      $alt_arr = explode("Photo:", $img_info['alt']);
      $caption = $alt_arr[0];
      $copyright = trim($alt_arr[1]);
      if ($copyright != '') {
        $find_data = 'Photo: ' . $copyright . '</div>';
        $replace_data = '<span class="img-tag">' . $copyright  .'</span></div>';
        $body = str_ireplace($find_data, $replace_data, $body);
      }
      $body = str_ireplace($img_info['src'], '/ismaili/sites/ismaili/files/' . $path_parts['filename'] . '.jpg', $body);
      $body = str_ireplace('/imagedetail/' . $path_parts['filename'], '/ismaili/sites/ismaili/files/' . $path_parts['filename'] . '.jpg', $body);
    }
  }
  $body = str_ireplace("http://default", $site_path, $body);
  return $body;
}

/**
 * Get image source, caption and body data
 * @param type $body
 * @param type $substitute
 */
function content_migrate_unt_body_image_info($body, $find_tag = '<IMG ') {
  // read all image tags into an array
  $body = str_ireplace("<img", "<IMG", $body);
  preg_match_all('/<IMG[^>]+>/i', $body, $img_tags);
  $orig_image_src = array();
  $img = array();
  for ($i = 0; $i < count($img_tags[0]); $i++) {
  // get the source string
    preg_match('/src="([^"]+)/i', $img_tags[0][$i], $imgage);
    preg_match_all('/(alt|title|src)=("[^"]*")/i',$img_tags[0][$i], $img[$i]);
    // remove opening 'src=' tag, can`t get the regex right
    $orig_image_src[$i]['src'] = str_ireplace( 'src="', '',  $imgage[0]);
    if ($img[$i][1][0] == 'alt') {
      $orig_image_src[$i]['alt'] = substr($img[$i][2][0], 1, strlen($img[$i][2][0])-2);
    }
    if ($img[$i][1][1] == 'alt') {
      $orig_image_src[$i]['alt'] = substr($img[$i][2][1], 1, strlen($img[$i][2][1])-2);
    }
  }
  // will output all your img src's within the html string
  return $orig_image_src;
}

/**
 * Map article body etc
 * @param  stdClass $account  [description]
 * @param  stdClass $data     [description]
 * @param  [type]   $site_url [description]
 * @return [type]             [description]
 */
function content_migrate_unt_process_article_body_title(stdClass $account, stdClass $data, $site_url) {
  $account->field_short_title[LANGUAGE_NONE][0]['value'] = strip_tags($account->field_short_title[LANGUAGE_NONE][0]['value']);
  $account->title = strip_tags($account->title);
  if ($account->created <= 0) {
    $account->created = 0;
    $account->changed = 0;
  }
  if ($account->field_publish_date[LANGUAGE_NONE][0]['value'] <= 0) {
    $account->field_publish_date[LANGUAGE_NONE][0]['value'] = 0;
  }
  $short_title = trim($account->field_short_title[LANGUAGE_NONE][0]['value']);
  if (empty($short_title)) {
    $account->field_short_title[LANGUAGE_NONE][0]['value'] = $account->title;
  }
  $account->changed = $account->created;
  // process data for image presence
  $body_image = content_migrate_unt_process_body_image($data->contenttext, $site_url, "/imagedetail/");
  content_migrate_unt_pass_field_data($account, 'field_body', $body_image);
}

/**
 * Map Image Field
 * @param  stdClass $account  [description]
 * @param  stdClass $data     [description]
 * @param  [type]   $site_url [description]
 * @return [type]             [description]
 */
function content_migrate_unt_process_main_image(stdClass $account, stdClass $row, $site_url, $field_main_image = "field_main_image", $path = "assets/3/", $skip = 1, $pos = 0) {
  $media_id = $row->mediaid;
  if (!$media_id) {
    return '';
  }
  $main_image_url = $path . $media_id . '.jpg';
  $image_processed = content_migrate_save_remote_image($site_url, $main_image_url, $skip);
  if ($image_processed['success'] == 1) {
    $file_saved = $image_processed['file_saved'];
    $fid = $file_saved->fid;
    db_query("REPLACE INTO {migrate_map_mediacontent} (sourceid1, destid1) VALUES ($media_id,$fid)")->execute();
    $account->{$field_main_image} = content_migrate_unt_process_image_file($file_saved, $pos);
    content_migrate_unt_save_image_file_info($file_saved->fid, 'credit', $row->copyright);
    content_migrate_unt_save_image_file_info($file_saved->fid, 'file_image_title_text', $row->caption);
    content_migrate_unt_save_image_file_info($file_saved->fid, 'file_image_alt_text', $row->caption);
    
    content_migrate_unt_save_image_file_info($file_saved->fid, 'credit', $row->copyright);
    content_migrate_unt_save_image_file_info($file_saved->fid, 'media_label', $row->medianame);
    content_migrate_unt_save_image_file_info($file_saved->fid, 'rough_caption', $row->roughcaption);
    content_migrate_unt_save_image_file_info($file_saved->fid, 'media_source', $row->source);
    content_migrate_unt_save_image_file_info($file_saved->fid, 'media_description', $row->description);
  }
}

/**
 * Update workbench access
 * @param  [type] $nid    [description]
 * @param  [type] $tid    [description]
 * @param  string $scheme [description]
 * @return [type]         [description]
 */
function content_migrate_unt_update_workbench_access($nid, $tid, $scheme = 'taxonomy') {
  if (variable_get('content_migrate_unt_skip_workbench_handling')) {
    return '';
  }
  if (!$tid) {
    return '';
  }
  db_query("REPLACE INTO {workbench_access_node} (nid, access_id, access_scheme) VALUES ($nid,$tid,'" . $scheme ."')")->execute();
}

/**
 * Process image for multiple files
 * @param type $file_saved
 * @param type $pos
 * @return string
 */
function content_migrate_unt_process_image_multiple_file($file_saved, $data) {
  $img = array();
  foreach ($file_saved as $key => $value) {
    $img[$key] = $value;
  }
  $img['alt'] = $data->caption;
  $img['title'] = $data->caption;
  return $img;
}

/**
 * Get all gallery related items information
 * @param  [type] $gallery_id     Gallery id
 * @return [type] [description]
 */
function content_migrate_unt_save_gallery_info(stdClass $account, stdClass $row, $gallery_id, $site_url = "http://www.theismaili.org/", $exlcude_mediaid = '', $path = "assets/3/") {
  $query = "SELECT mg.displayorder, m.*,fm.fid FROM ismaili_mediagalleryitem mg
    left join ismaili_media m ON (mg.mediaid=m.mediaid)
    left join migrate_map_mediacontent mc on (m.mediaid=mc.sourceid1)
    left join file_managed fm ON (mc.destid1=fm.fid)
    WHERE galleryid = :gallery_id";
  $result = db_query($query, array(':gallery_id' => $gallery_id));
  $pos = 0;
  foreach($result as $data) {
    $media_id = $data->mediaid;
    if ($data->mediaid == $exlcude_mediaid) {
      continue;
    }
    $row->mediaid = $data->mediaid;
    if ($data->fid) {
      $image_file = file_load($data->fid);
      if ($image_file->fid) {
        foreach ($image_file as $key => $image_data) {
          $account->{'field_image_series'}[LANGUAGE_NONE][$pos][$key] = $image_data;
        }
      }
      $pos++;
      continue;
    }
    $main_image_url = $path . $data->mediaid . '.jpg';
    $image_processed = content_migrate_save_remote_image($site_url, $main_image_url, 1);
    if ($image_processed['success'] == 1) {
      $file_saved = $image_processed['file_saved'];
      $fid = $file_saved->fid;
      db_query("REPLACE INTO {migrate_map_mediacontent} (sourceid1, destid1) VALUES ($media_id,$fid)")->execute();
      $image = content_migrate_unt_process_image_multiple_file($file_saved, $data);
      $account->field_image_series[LANGUAGE_NONE][$pos] = $image;
      $pos++;
      content_migrate_unt_save_image_file_info($file_saved->fid, 'credit', $data->copyright);
      content_migrate_unt_save_image_file_info($file_saved->fid, 'file_image_title_text', $data->caption);
      content_migrate_unt_save_image_file_info($file_saved->fid, 'file_image_alt_text', $data->caption);
      content_migrate_unt_save_image_file_info($file_saved->fid, 'credit', $data->copyright);
      content_migrate_unt_save_image_file_info($file_saved->fid, 'media_label', $data->medianame);
      content_migrate_unt_save_image_file_info($file_saved->fid, 'rough_caption', $data->roughcaption);
      content_migrate_unt_save_image_file_info($file_saved->fid, 'media_source', $data->source);
      content_migrate_unt_save_image_file_info($file_saved->fid, 'media_description', $data->description);
    }
  }
} 

/**
 * Map media with main image field
 * @param  [stdClass] $account
 * @param  [stdClass] $row
 * @param  [type] $site_url
 * @param  [type] $field_name field to be mapped with the image
 */
function content_migrate_unt_gallery_series_media_mapping(stdClass $account, stdClass $row, $site_url, $pos, $field_name = 'field_image_series') {
  $pos = count($account->{$field_name});
  if ($row->fid) {
    $image_file = file_load($row->fid);
    if ($image_file->fid) {
      foreach ($image_file as $key => $data) {
        $account->{$field_name}[LANGUAGE_NONE][$pos][$key] = $data;
      }
    }
  } else {
    content_migrate_unt_process_main_image($account, $row, $site_url, $field_name);
  }
}

/*
* Save image related info
*/
function content_migrate_unt_save_image_file_info($entity_id, $field_name, $field_value, $language = 'und', $format = 'full_html') {
  $field_value = substr($field_value, 0, variable_get('content_migrate_unt_image_title_size', 255));

  $table_name = 'field_data_field_' . $field_name;
  $field_name_value = 'field_'. $field_name . '_value';
  $field_name_format = 'field_'. $field_name . '_format' ;
  $query = db_query("REPLACE INTO {$table_name} 
  (entity_type,bundle,entity_id,revision_id,language,delta,$field_name_value,$field_name_format)
    VALUES ('file','image','$entity_id','$entity_id','$language', '0','$field_value','$format')")->execute();
  return '';

  $query = db_insert('field_data_field_' . $field_name);
  $query->fields( array(
    'entity_type' => 'file',
    'bundle' => 'image',
    'entity_id' => $entity_id,
    'revision_id' => $entity_id,
    'language' => $language,
    'delta' => '0',
    'field_'. $field_name . '_value' => $field_value,
    'field_'. $field_name . '_format' => $format,
  ));
  $query->execute();
}

/**
 * Map Speech body etc
 * @param  stdClass $account  [description]
 * @param  stdClass $data     [description]
 * @param  [type]   $site_url [description]
 * @return [type]             [description]
 */
function content_migrate_unt_process_speech_body_title(stdClass $account, stdClass $data, $site_url) {
  if ($account->created <= 0) {
    $account->created = 0;
    $account->changed = 0;
  }
  $short_title = trim($account->field_short_title[LANGUAGE_NONE][0]['value']);
  if (empty($short_title)) {
    $account->field_short_title[LANGUAGE_NONE][0]['value'] = $account->title;
  }
  $account->changed = $account->created;
}

/**
 * Pass value in the field
 * @param  stdClass $account    [description]
 * @param  [type]   $field_name [description]
 * @param  [type]   $value      [description]
 * @param  string   $format     [description]
 * @return [type]               [description]
 */
function content_migrate_unt_pass_field_data(stdClass $account, $field_name, $value, $format = 'full_html') {
  $value = content_migrate_unt_process_special_characters($value);
  $value = htmlspecialchars_decode($value);
  $account->{$field_name}[LANGUAGE_NONE][0]['value'] = $value;
  $account->{$field_name}[LANGUAGE_NONE][0]['safe_value'] = $value;
  $account->{$field_name}[LANGUAGE_NONE][0]['format'] = $format;
}

/**
 * Find and replace some left special characters
 * @param  [type] $data [description]
 * @return [type]       [description]
 */
function content_migrate_unt_process_special_characters($data) {
  $character_set = array("â€“" => "–");
  foreach ($character_set as $find => $replace) {
    $data = str_ireplace($find, $replace, $data);
  }
  return $data;
}

/**
 * Get all Ingredients items information
 * Fields info :recipeid, position, itemid, measure, measureunit, metricmeasure, metricunit,
 * preparation, additionalinfo
 * @param  [stdClass] $account  
 * @param  [type] $recipeid     Recipe id
 * @return [type] [description]
 */
function content_migrate_unt_map_recipe_ingredients_info(stdClass $account, $recipeid) {
  $query = "SELECT ig.*, t.tagname FROM ismaili_ingredient ig
    LEFT JOIN ismaili_tag t ON (ig.itemid = t.tagid)
  WHERE ig.recipeid = :recipeid ORDER BY ig.position ASC";
  $result = db_query($query, array(':recipeid' => $recipeid));
  $position = 0;
  foreach($result as $data) {
    content_migrate_unt_trim_data_items($data);
    $output = '';
    $output = $data->measure . ' ' . $data->measureunit;
    if ($data->metricmeasure != '' and ($data->metricunit != '')) {
      $output = $data->metricmeasure . ' ' . $data->metricunit;
      if ($data->measure != '' and ($data->measureunit != '')) {
        $output = $output . ' (' . $data->measure . ' ' . $data->measureunit . ')';
      }
    }
   
    $output = content_migrate_unt_group_data_items($output, $data->tagname);
    if ($data->preparation != '' or $data->additionalinfo != '') {
      $output = $output . ',';
    }
    $output = content_migrate_unt_group_data_items($output, $data->preparation);
    $output = content_migrate_unt_group_data_items($output, $data->additionalinfo);
    $account->field_ingredients[LANGUAGE_NONE][$data->position]['value'] = $output;
    $account->field_ingredients[LANGUAGE_NONE][$data->position]['safe_value'] = $output;
    $account->field_ingredients[LANGUAGE_NONE][$data->position]['format'] = 'full_html';
    $position++;
  }
}

/**
* Trim data
**/
function content_migrate_unt_trim_data_items(&$data) {
  foreach ($data as $key => $value) {
    $data->{$key} = trim($value);
  }
}

/**
* Group ingredient data together
**/
function content_migrate_unt_group_data_items($data, $new_data, $separator_left = '',
  $separator_right = '') {
  $new_data = trim($new_data);
  if (empty($new_data)) {
    return $data;
  }
  $data = trim($data);
  if (empty($data)) {
    return $new_data;
  }
  $output = $data . ' ' . $separator_left . $new_data . $separator_right;
  return $output;
}

/**
 * Save to Nutrient field collection
 * @param stdClass $node
 * @param type $nid
 * @param type $value
 */
function content_migrate_unt_save_nutrient_field_collection(stdClass $node, $nid, $value) {
  $field_collection_item = entity_create('field_collection_item', array('field_name' => 'field_nutrient_data'));
  $field_collection_item->setHostEntity('node', $node);
  $field_collection_item->field_nutrient_element[LANGUAGE_NONE][0]['nid'] = $nid;
  $field_collection_item->field_nutrient_val[LANGUAGE_NONE][0]['value'] = $value;
  $field_collection_item->save();
}

/**
* Save migrated node info
 * @param type $sourceid1
 * @param type $destid1
*/
function content_migrate_unt_save_migrated_info($sourceid1, $destid1) {
  db_query("REPLACE INTO {migrate_map_migrated_node} (sourceid1, destid1) 
    VALUES ($sourceid1,$destid1)")->execute();
}

/**
 * Get content link info for mapping
 * @param  [stdClass] $account  
 * @param  [type] $contentid     Content id
 */
function content_migrate_unt_map_link_info(stdClass $account, $contentid) {
  $query = "SELECT * FROM ismaili_contentlink
  WHERE contentid = :contentid";
  $result = db_query($query, array(':contentid' => $contentid));
  $position = 0;
  foreach($result as $data) {
    $data->linkurl = trim($data->linkurl);
    if ($data->linkurl != '') {
      $account->field_related_links[LANGUAGE_NONE][$position]['url'] = $data->linkurl;
      $account->field_related_links[LANGUAGE_NONE][$position]['title'] = $data->linktitle;
      $position++;
    }
  }
}

/**
 * Series Mapping with term
 * @param  [stdClass] $account
 * @param  [stdClass] $row
 * @param  [type] $series_mapping
 * @param  [type] $default_category
 */
function content_migrate_unt_series_mapping(stdClass $account, stdClass $row, $series_mapping, $default_category = 'field_primary_category') {
  if ($series_mapping[$row->seriesid]['tid'] != '') {
    $series_field_name = ($series_mapping[$row->seriesid]['name']) ? $series_mapping[$row->seriesid]['name'] : $default_category;
    $series_tid = $series_mapping[$row->seriesid]['tid'];
    $account->{$series_field_name}[LANGUAGE_NONE][0]['tid'] = $series_mapping[$row->seriesid]['tid'];
  }
}

/**
 * Map media with main image field
 * @param  [stdClass] $account
 * @param  [stdClass] $row
 * @param  [type] $site_url
 * @param  [type] $field_name field to be mapped with the image
 */
function content_migrate_unt_media_mapping(stdClass $account, stdClass $row, $site_url, $field_name = 'field_main_image') {
  if ($row->fid) {
    $image_file = file_load($row->fid);
    if ($image_file->fid) {
      foreach ($image_file as $key => $data) {
        $account->{$field_name}[LANGUAGE_NONE][0][$key] = $data;
      }
    }
  } else {
    content_migrate_unt_process_main_image($account, $row, $site_url, $field_name);
  }
}

/**
 * Process Pdf inside body
 * @param stdClass $account
 * @param type $data
 * @param type $site_url
 */
function content_migrate_unt_process_body_pdf($body, $site_url) {
  $img_collection = content_migrate_unt_body_pdf_info($body);
  $site_path = variable_get('content_migrate_unt_base_url', '');

  $file_extension = variable_get('content_migrate_unt_file_extensions', 'pdf,docx,doc,wmv,ram');
  $allowed_extension = explode(",", $file_extension);
  $file_list = array();
  if (!isset($img_collection['0']['href'])) {
    return $body;
  }
  if ($img_collection['0']['href'] != '') {
    foreach ($img_collection as $pos => $img_info) {
      $path_parts = pathinfo($img_info['href']);
      if (!isset($path_parts['extension'])) {
        continue;
      }
      if (!in_array(strtolower($path_parts['extension']), $allowed_extension)) {
        continue;
      }
      $file_link = $img_info['href'];
      if (isset($file_list[$file_link])) {
        continue;
      }
      $file_list[$file_link] = $file_link;
      $pdf_url = '';
      $pdf_url = content_migrate_unt_get_file_path($img_info['href']);
      $filename = content_migrate_get_image_name($pdf_url);
      $filename = content_migrate_generate_filename($filename);
      $pdf = @file_get_contents($pdf_url);
      if (!empty($pdf)) {
        $file_saved = file_save_data($pdf, 'public://' . $filename, FILE_EXISTS_RENAME);
        if ($file_saved->fid) {
          $replace_url = file_create_url($file_saved->uri);
          $body = str_ireplace($img_info['href'], $replace_url, $body);
        }
      }
    }
  }
  $body = str_ireplace("http://default", $site_path, $body);
  return $body;
}

/**
 * Get Pdf source
 * @param type $body
 * @param type $substitute
 */
function content_migrate_unt_body_pdf_info($body) {
  // read all image tags into an array
  preg_match_all('/<A[^>]+>/i', $body, $img_tags);
  $orig_pdf_src = array();
  for ($i = 0; $i < count($img_tags[0]); $i++) {
  // get the source string
    preg_match('/href="([^"]+)/i', $img_tags[0][$i], $imgage);
    if(!isset($imgage[0])) {
      continue;
    }
    $orig_pdf_src[]['href'] = str_ireplace( 'href="', '',  $imgage[0]);
  }
  // will output all your img src's within the html string
  return $orig_pdf_src;
}

/**
 * Get content link
 * @param  [stdClass] $account
 * @param  [stdClass] $row
 */
function content_migrate_unt_get_migrated_nid(stdClass $account, stdClass $row) {
  $sourceid1 = $row->contentid;
  $query ="select destid1 from migrate_map_migrated_node WHERE sourceid1 = $sourceid1";
  $destid1 = db_query($query)->fetchField();
  $destid1 = intval($destid1);
  if ($destid1 > 0) {
    $account->field_parent_reference[LANGUAGE_NONE][0]['nid'] = $destid1;
  }
}