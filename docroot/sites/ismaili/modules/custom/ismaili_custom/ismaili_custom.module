<?php

/**
 * @file
 * Custom module for Ismaili.
 */

define('SUBSCRIBE_VIEW_TABLE', 'webform_views_subscribe_to_email_updates');

/**
 * Implements hook_form_FORM_ID_alter().
 */
function ismaili_custom_form_simplenews_subscriptions_multi_block_form_alter(&$form, &$form_state, $form_id) {
  unset($form['unsubscribe']);
  $form['subscribe']['#value'] = t('Subscribe Â»');
  $form['mail']['#attributes'] = array('placeholder' => t('Your Email Address'));
  $form['#submit'] ['0'] = 'redirect_to_subscribe_form';
  $form['#validate'] ['0'] = 'validate_to_subscribe_form';
  $webform_nid = 1;
  if (arg(0) == 'node' && arg(1) != '') {
    $webform_nid = arg(1);
  }
  $form['webform_nid'] = array(
    '#type' => 'hidden',
    '#default_value' => $webform_nid,
  );
}

/**
 * Determine the Webform for the subscription block
 * @return [type] [description]
 */
function ismaili_custom_retrieve_node_webform_id($webform_nid, $order = 'DESC') {
  $webform_nid = intval($webform_nid);
  $newsletter_nid = 10736;
  if ($webform_nid <= 1) {
    return $newsletter_nid;
  }
  // Get the Webform for Space node
  $nid = db_query("SELECT sp.entity_id FROM {nat} LEFT JOIN {field_data_field_institutional_space} sp
    ON (nat.tid=sp.field_institutional_space_tid) WHERE nat.nid= :pnid and sp.bundle= :pbundle
    ORDER BY sp.entity_id DESC LIMIT 1",
      array(':pnid' => $webform_nid, ':pbundle' => 'webform'))->fetchField();
  $nid = intval($nid);
  if ($nid) {
    return $nid;
  }
  // Get the WebForm for node having same space as of weborm
  $nid = db_query("SELECT web.entity_id FROM {field_data_field_institutional_space sp} LEFT JOIN {field_data_field_institutional_space web} ON (web.field_institutional_space_tid=sp.field_institutional_space_tid) WHERE sp.entity_id=:pnid and sp.entity_type=:pentity_type and web.bundle=:pbundle order by web.entity_id DESC LIMIT 1",
      array(':pnid' => $webform_nid, ':pentity_type' => 'node', ':pbundle' => 'webform'))->fetchField();
  $nid = intval($nid);
  if ($nid <= 0) {
    return $newsletter_nid;
  }
  return $nid;
}

/**
* function restores the value of email-id enterd by the user and redirects it to
* subscritpion block variable
*/
function redirect_to_subscribe_form($form, &$form_state) {
  $email_id = $form_state['values']['mail'];
  $webform_nid = $form_state['values']['webform_nid'];
  $simplenews_webform_nid = ismaili_custom_retrieve_node_webform_id($webform_nid);
  $_SESSION['temp_variable'] = $form_state['values']['mail'];
  if (!empty($email_id) && $simplenews_webform_nid != '') {
    $subscribe_info = webform_anonymous_edits_check_mail_presence($email_id, $simplenews_webform_nid);
    if ($subscribe_info['found'] == 1) {
      drupal_set_message(t('Your Subscription already exist.'));
      $params = array('webform_id' => $simplenews_webform_nid, 'mail' => $email_id);
      $link = l(t('click here'), 'generate-token/subscribe',
        array( 'html' => TRUE,
          'query' => $params,
          'attributes' => array('class' => 'subscribe-edit-link')
        )
      );
      drupal_set_message(t('Please ') . $link . ' to get the subscription information.');
    }
  }
  drupal_goto('node/' . $simplenews_webform_nid);
}

function validate_to_subscribe_form() {
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function ismaili_custom_form_views_exposed_form_alter(&$form, &$form_state, $form_id) {
  if ($form['#id'] == 'views-exposed-form-search-page') {
    $form['query']['#attributes'] = array('placeholder' => t('Search...'));
    ismaili_custom_handle_search_path($form);
  }

  if ($form['#id'] == 'views-exposed-form-hub-pages-block') {
    $form['query']['#attributes'] = array('placeholder' => t('Search...'));
  }
  if ($form['#id'] == 'views-exposed-form-nutrition-centre-page-1') {
    $form['query']['#attributes'] = array('placeholder' => t('Search...'));
  }


}

/**
 * Handle Search path
 * @param  [type] $form [description]
 * @return [type]       [description]
 */
function ismaili_custom_handle_search_path(&$form) {
  $base_path = base_path();
  $search_part = array('nid' => '', $path = '');
  switch (arg(0)) {
    case 'search':
      if (arg(1) != '') {
        $search_part['path'] = arg(1);
        $search_part['nid'] = arg(3);
      }
      break;
    case 'node' :
      $search_part = ismaili_custom_get_search_path(arg(1));
      break;
  }
  $form['#action'] = ($search_part['path'] != '') ? $base_path . 'search/'. $search_part['path'] : $base_path . 'search';
  if ($search_part['nid'] != '') {
    $form['#action'] = $form['#action'] . "/nid/" . $search_part['nid'];//@TODO: need t work here
  }
}

/**
 * Get Search path for Institutional Space.
 * @return [type] [description]
 */
function ismaili_custom_get_search_path($nid) {
  $output = array('path' => '', 'nid' => '');
  $query = "SELECT nid FROM {nat} n LEFT JOIN {taxonomy_vocabulary} v ON (n.vid=v.vid) WHERE v.machine_name='institutional_space' and n.nid = :pentity_id";
  $dest_id = db_query($query, array(':pentity_id' => $nid))->fetchField();
  $dest_id = intval($dest_id);
  if ($dest_id) {
    $output['path'] = drupal_get_path_alias('node/' . $dest_id);
    $output['nid'] = $dest_id;
    return $output;
  }
  $query = "SELECT nid FROM {nat} n LEFT JOIN {field_data_field_institutional_space} s ON (n.tid=s.field_institutional_space_tid) WHERE s.entity_id = :pentity_id";
  $dest_id = db_query($query, array(':pentity_id' => $nid))->fetchField();
  $dest_id = intval($dest_id);
  if ($dest_id) {
    $output['path'] = drupal_get_path_alias('node/' . $dest_id);
    $output['nid'] = $dest_id;
    return $output;
  }
}
/**
 * Implements hook_init().
 */
function ismaili_custom_init() {

  $drupal_get_path = drupal_get_path('module', 'ismaili_custom');
  if (drupal_is_front_page()) {
    drupal_add_js($drupal_get_path . '/js/home_page.js');
  }
  drupal_add_js($drupal_get_path . '/js/ismaili_custom.js');
  ismaili_custom_handle_redirect();
}

/**
 * Handle redirect functionality.
 */
function ismaili_custom_handle_redirect() {
  global $base_url;
  $dest_id = '';
  $ismaili_centers = array('807' => '7131', '808' => '7151', '809' => '', '810' => '', '841' => '');
  $node_redirect = array('22496' => '20861','22511' => '20861','22531' => '20861',
      '22501' => '22596','22506' => '22391', '22516' => '22596','22521' => '22611',
      '22526' => '22411','22536' => '20166','22541' => '17116','22546' => '20641',
      '22551' => '22616');
  $first_argument = strtolower(arg(0));
  $second_argument = arg(1);
  if (isset($_GET['ID'])) {
    $second_argument = $_GET['ID'];
    $first_argument = 'cms';
  }
  switch($first_argument) {
    case 'node':
      if (isset($node_redirect[$second_argument])) {
        $dest_id = $node_redirect[$second_argument];
      } else {
        return '';
      }
      break;
    case 'cms':
      if (isset($ismaili_centers[$second_argument])) {
        $dest_id = $ismaili_centers[$second_argument];
      } else {
        $dest_id = ismaili_custom_get_migrated_nid($second_argument, 'migrate_map_migrated_node');
      }
      break;
    case 'recipe':
      $dest_id = ismaili_custom_get_migrated_nid($second_argument, 'migrate_map_recipecontent');
      drupal_goto('/node/'. $dest_id);
      break;
    case 'tag':
      $dest_id = ismaili_custom_get_migrated_nid($second_argument, 'migrate_map_tagsterm');
      break;
  }
  if ($dest_id) {
    ismaili_custom_redirect_process($first_argument, $dest_id);
  }
}

/**
* Redirect from the old pattern to new one.
* @param  Integer $type type of the page[content/recipe/tag]
* @param  Integer $old_contentid old [contentid/recipeid/tag]
**/
function ismaili_custom_redirect_process($type, $dest_id = '') {
  if ($dest_id == '') {
    return;
  }
  switch ($type) {
    case 'cms':
    case 'recipe':
      drupal_goto('/node/'. $dest_id);
      break;
    case 'tag':
      drupal_goto('/taxonomy/term/' . $dest_id);
      break;
  }
}

/**
 * Get migrated nid/tid
 * @param  Integer $old_contentid
 */
function ismaili_custom_get_migrated_nid($old_contentid, $table_name = 'migrate_map_migrated_node') {
  $query = "select destid1 from {$table_name} WHERE sourceid1 = $old_contentid";
  $dest_id = db_query($query)->fetchField();
  $dest_id = intval($dest_id);
  return $dest_id;
}

/**
 * Implements hook_workbench_moderation_transition().
 *
 * Allows modules to respond to state transitions.
 *
 * @param $node
 *  The node that is being transitioned.
 *
 * @param $previous_state
 *  The state of the revision before the transition occurred.
 *
 * @param $new_state
 *  The new state of the revision.
 * @TODO
 *   Fix this function.
 */
function ismaili_custom_workbench_moderation_transition($node, $previous_state, $new_state) {
  if ($new_state == 'archived') {

  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function ismaili_custom_form_node_form_alter(&$form, &$form_state, $form_id) {
  // Make sure this node type actually has workflow_access stuff setup.
  global $user;
  if (isset($form_state['node']->type) && variable_get('workbench_access_node_type_' . $form_state['node']->type, 1) == 0) {
    return;
  }
  // Once the page has been created, don't allow changing the workbench area again.
  if (preg_match("/^node\/([0-9]+)\/edit/", current_path())
    && isset($user->roles[31])) {
    $form['workbench_access']['#disabled'] = TRUE;
  }
}

/**
 * Function to return the nat associated with hub pages.
 * @TODO: this function needs an argument, for the vocab.
 */
function ismaili_custom_get_nat_hub_pages() {
  $nat = "";
  if (isset($_GET['searchPath'])) {
    $nid = explode("/", $_GET['searchPath']);
    $nid = $nid[1];
  }
  else {
    $node = menu_get_object();
    $nid = $node->nid;
    $nat = $node->nat;
  }
  $nat = nat_get_terms_by_vocabulary($nid, array('46'));
  reset($nat);
  return key($nat);
}

/**
 * Implements hook_entity_info_alter
 */
function ismaili_custom_entity_info_alter(&$entity_info) {
  // Function to alter the default path of all the taxonomy terms
  $entity_info['taxonomy_term']['uri callback'] = 'ismaili_custom_taxonomy_term_uri';
}

/**
 * Alter taxonomy term path
 *   @param type $term
 *   @return custom url path for taxonomy terms
 */
function ismaili_custom_taxonomy_term_uri($term) {
  return array('path' => 'tags/' . $term->name);
}

/**
 * Implements hook_node_presave().
 */
function ismaili_custom_node_presave($node) {
  if ($node->type == 'speech_quote') {
    // Search the speech with serial id. Save the node reference.
    $serial_id = $node->field_serial_id[LANGUAGE_NONE]['0']['value'];
    $nid = db_query('SELECT entity_id from {field_data_field_serial_id} WHERE
      field_serial_id_value = :sid AND bundle = :bundle',
      array(':sid' => $serial_id, ':bundle' => 'speech'))->fetchField();
    // Save the node reference to the speech.
    if (!empty($nid)) {
      $node->field_speech_reference[LANGUAGE_NONE]['0']['nid'] = $nid;
    }
  }
  // The brightcove id would be mapped to brightcove field, if the content
  // is migrated via feeds.
  if ($node->type == 'speech') {
    $brightcove_id = $node->field_brightcove_id['und'];
    if (!empty($brightcove_id)) {
      $brightcove_id = $node->field_brightcove_id[LANGUAGE_NONE]['0']['value'];
      $node->field_brightcove[LANGUAGE_NONE]['0']['brightcove_id'] = $brightcove_id;
      $node->field_brightcove[LANGUAGE_NONE]['0']['player'] = 'full_size';
    }
  }
}

/**
 * Limit the available inline image styles.
 */
function ismaili_custom_media_wysiwyg_allowed_view_modes_alter(&$view_modes, &$file) {
  //dpm($view_modes);
  // TODO: make this configurable? or at least a wildcard to match inline_* ?
  $view_modes = array(
      // 'media_original' => array(
      //     'label' => 'Full Width',
      //     'custom settings' => TRUE,
      // ),
      'media_full_width' => array(
        'label' => 'Full Width',
        'custom settings' => FALSE,
      ),
      'media_large' => array(
          'label' => 'Half Width',
          'custom settings' => FALSE,
      ),
      'media_third_left' => array(
          'label' => 'One Third Left',
          'custom settings' => FALSE,
      ),
      'media_right_third' => array(
          'label' => 'One Third Right',
          'custom settings' => FALSE,
      ),
      'media_half_right' => array(
          'label' => 'Half Width Right',
          'custom settings' => FALSE,
      ),
      'media_left_half' => array(
          'label' => 'Half Width Left',
          'custom settings' => FALSE,
      ),
  );
}

function ismaili_custom_menu() {
  drupal_add_js(drupal_get_path('module', 'my2form') . '/abc.js');
  $items['admin/config/ismaili-custom/settings-general'] = array(
    'title' => 'General settings',
    'description' => 'General settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ismaili_custom_config'),
    'access arguments' => array('General setting Custom'),
  );
  $items['admin/config/ismaili-custom/settings-ga'] = array(
    'title' => 'Google analytic settings',
    'description' => 'Place google analytic setting for each pages.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ismaili_custom_ga_config'),
    'access arguments' => array('General setting Custom'),
  );
 $items['user/%user/space'] = array(
    'title' => 'Space',
    'access callback' => 'space_access_assign_user',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ismaili_custom_space_mapping_form',1),
    'type' => MENU_LOCAL_TASK,
    'weight' => 99,
  );
 /*
 $items['node_reference/autocomplete/node/institutional_space/field_gallery_items'] = array(
      'title' => 'Autocomplete for Gallery Items',
      'page callback' => 'ismaili_custom_gallery_items_autocomplete',
      'access callback' => 1,
      'type' => MENU_CALLBACK
    );
 $items['node_reference/autocomplete/node/institutional_space/field_select_menu_items'] = array(
      'title' => 'Autocomplete for Menu Items',
      'page callback' => 'ismaili_custom_menu_items_autocomplete',
      'access callback' => 1,
      'type' => MENU_CALLBACK
    );
 $items['node_reference/autocomplete/node/institutional_space/field_articles_for_journal'] = array(
      'title' => 'Autocomplete for Journals',
      'page callback' => 'ismaili_custom_articles_journal_autocomplete',
      'access callback' => 1,
      'type' => MENU_CALLBACK
    );

 $items['node_reference/autocomplete/node/institutional_space/field_upcoming_news'] = array(
      'title' => 'Autocomplete for Upcoming News',
      'page callback' => 'ismaili_custom_upcoming_news_autocomplete',
      'access callback' => 1,
      'type' => MENU_CALLBACK
    );
  $items['node_reference/autocomplete/node/institutional_space/field_more_link'] = array(
      'title' => 'Autocomplete for More Items',
      'page callback' => 'ismaili_custom_more_items_autocomplete',
      'access callback' => 1,
      'type' => MENU_CALLBACK
    );
    */
  $items['admin/webform/filters'] = array(
  'title' => 'Webform view',
  'page callback' => 'drupal_get_form',
  'page arguments' => array("ismaili_custom_webform_listing"),
  'access callback' => TRUE,
);
  $items['admin/people/simplenews/unconfimed-simplenews'] = array(
    'title' => 'Newsletter Unconfirmed',
    'page callback' => 'ismaili_custom_get_unconfimed_simplenewsletters',
    'access arguments' => array('General setting Custom'),
    'type' => MENU_LOCAL_TASK
 );
  $items['admin/people/simplenews/unsubscribed-simplenews'] = array(
    'title' => 'Newsletter Unsubscribed',
    'page callback' => 'ismaili_custom_get_unsubscribed_simplenewsletters',
    'access arguments' => array('General setting Custom'),
    'type' => MENU_LOCAL_TASK
  );

  $items['admin/people/simplenews/subscribed-simplenews'] = array(
    'title' => 'Newsletter Subscribed',
    'page callback' => 'ismaili_custom_get_subscribed_simplenewsletters',
    'access arguments' => array('General setting Custom'),
    'type' => MENU_LOCAL_TASK
  );

  $items['admin/people/simplenews/data-export/%/%'] = array(
    'title' => 'Export Data',
    'page callback' => 'ismaili_custom_export_csv',
    'page arguments' => array(4,5),
    'access arguments' => array('General setting Custom'),
    'type' => MENU_CALLBACK
 );
  $items['newsletter/unsubscribe'] = array(
    'title' => 'Newsletter Unsubscription',
    'page callback' => 'drupal_get_form',
    'page arguments' => array("ismaili_custom_newsletter_unsubscription"),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK
 );
$items['admin/config/ismaili-settings/simplenewsletter'] = array(
    'title' => 'Simple Newsletter',
    'page callback' => 'drupal_get_form',
    'page arguments' => array("ismaili_custom_simplenewsletter_config"),
    'access arguments' => array('General setting Custom'),
 );
  $items['admin/content/file/file-bulk-upload'] = array(
    'title' => 'File Bulk Upload',
    'description' => 'Import files.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ismaili_bulk_plupload'),
    'access arguments' => array('File Bulk Upload'),
    'type' => MENU_LOCAL_ACTION,
    'weight' => 11,
  );

  $items['admin/content/file/thumbnails/file-bulk-upload'] = array(
    'title' => 'File Bulk Upload',
    'description' => 'Import files.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ismaili_bulk_plupload'),
    'access arguments' => array('File Bulk Upload'),
    'type' => MENU_LOCAL_ACTION,
    'weight' => 11,
  );

  return $items;
}

/**
 * Form callback function for test page visible at URL "plupload-test".
 */
function ismaili_bulk_plupload($form, &$form_state) {
  $form['pud'] = array(
    '#type' => 'plupload',
    '#title' => 'Plupload',
    '#upload_validators' => array(
      'file_validate_extensions' => array('jpg jpeg gif png txt doc xls pdf ppt pps odt ods odp'),
    ),
    // '#validators' => array(...);
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Submit',
  );

  return $form;
}

/**
 * Submit callback for plupload_test form.
 */
function ismaili_bulk_plupload_submit($form, &$form_state) {
  global $base_url;
  $saved_files = array();
  $scheme = variable_get('file_default_scheme', 'public') . '://';
  // We can't use file_save_upload() because of
  // http://www.jacobsingh.name/content/tight-coupling-no-not
  // file_uri_to_object();
  foreach ($form_state['values']['pud'] as $uploaded_file) {
    if ($uploaded_file['status'] == 'done') {
      $source = $uploaded_file['tmppath'];
      $destination = file_stream_wrapper_uri_normalize($scheme . $uploaded_file['name']);
      // Rename it to its original name, and put it in its final home.
      // Note - not using file_move here because if we call file_get_mime
      // (in file_uri_to_object) while it has a .tmp extension, it horks.
      $destination = file_unmanaged_move($source, $destination, FILE_EXISTS_RENAME);
      $file = plupload_file_uri_to_object($destination);
      file_save($file);
      $saved_files[] = $file;
    }
    else {
      // @todo: move this to element validate or something and clean up t().
      form_set_error('pud', "Upload of {$uploaded_file['name']} failed");
    }
  }

  $form_state['redirect'] = $base_url . '/admin/content/file';
}

function ismaili_custom_export_csv($st,$cat='all') {
$webform_nid = '10736';
module_load_include('inc','webform','includes/webform.submissions');
$query = db_select("simplenews_subscription","ss");
$query->fields("ss", array("timestamp","status","snid","tid"));
$query->leftJoin("simplenews_subscriber","ssb","ssb.snid = ss.snid");
$query->leftJoin('taxonomy_term_data', 'td', 'td.tid = ss.tid');
$query->fields("ssb",array("mail"))
      ->fields("td",array("name"))
      ->condition("ss.status", $st)
      ->groupBy("ss.snid")
      ->orderBy("ss.snid","DESC");
$submmited = array(
     'category' => '',
  );

if(isset($cat) && $cat !='all'){
   $query->condition("ss.tid", $cat);
}

$results = $query->execute();
$header = array('Status', 'Timestamp', 'Subscriber', 'First Name', 'Last Name', 'DOB' , 'Country ', "Category");
$row = array();
$rows = array();
foreach($results as $result){
  $status = '';
  switch ($result->status) {
    case '0':
      $status = 'Unsubcribed';
      break;
    case '1':
      $status = 'Subcribed';
      break;

    case '2':
      $status = 'Not Confirmed';
      break;
  }
    $web_submission = array();
    $web_sub = db_select('webform_submitted_data', 'w')
    ->fields('w', array('sid'))
    ->condition('nid', $webform_nid,'=')
    ->condition('cid', '7', '=')
    ->condition('data', $result->mail,'=')
    ->orderBy('sid',"DESC")
     ->execute()
    ->fetchAssoc();
     $sid =  $web_sub['sid'];
     $web_submission = webform_get_submission($webform_nid, $sid);


  $row = array($status, format_date($result->timestamp), $result->mail, @$web_submission->data['1']['value']['0'], @$web_submission->data['2']['value']['0'],@$web_submission->data['4']['value']['0'], @$web_submission->data['5']['value']['0'], $result->name);
  $rows[$result->snid] = $row;
}

  $filename= 'export-'.date('m-d-y').'.csv';

  if($st==0) {
     $filename= 'Newsletter-Unsubscribed-export-'.date('m-d-y').'.csv';
  }
   if($st==2) {
     $filename= 'Newsletter-Unconfirmed-export-'.date('m-d-y').'.csv';
  }
  if ($st == '1') {
    $filename= 'Newsletter-subscribed-export-'.date('m-d-y').'.csv';
  }
  $var['header'] =$header;
  $var['rows'] = $rows;
  $var['filename'] = $filename;
  _ismaili_custom_export_csv($var);
}

/**
* Autocomplete for More Items
*/
function ismaili_custom_more_items_autocomplete($string) {
  $matches = array();
  $space = $_SESSION['editnid'];
  if(isset($_SESSION['editnid']) && $_SESSION['editnid'] > 0) {
    $query = db_select('node', 'n');
    $query->join("taxonomy_index", "ti", "n.nid = ti.nid");
    $query->join("nat", "nat", "ti.tid = nat.tid");
    $query->fields("n", array("nid","title"))
    ->condition("n.status", 1, "=")
    ->condition("nat.nid", $space, "=")
    ->condition("n.title", "%" . db_like($string) . "%", "LIKE");
  } else {
    $query = db_select('node', 'n');
    $query->join("taxonomy_index", "ti", "n.nid = ti.nid");
    $query->join("nat", "nat", "ti.tid = nat.tid");
    $query->fields("n", array("nid","title"))
    ->condition("n.status", 1, "=")
    ->condition("n.title", "%" . db_like($string) . "%", "LIKE");
  }

  $result = $query->execute();
  foreach ($result as $row) {
    $matches[$row->title.' [nid:'.$row->nid.']'] = check_plain($row->title).' [nid:'.$row->nid.']';
  }
  // Return the result to the form in json
  drupal_json_output($matches);
}

/**
* Autocomplete for Menu Items
*/
function ismaili_custom_menu_items_autocomplete($string) {
  $matches = array();
  $space = $_SESSION['editnid'];
  if(isset($_SESSION['editnid']) && $_SESSION['editnid'] > 0) {
    $query = db_select('node', 'n');
    $query->join("taxonomy_index", "ti", "n.nid = ti.nid");
    $query->join("nat", "nat", "ti.tid = nat.tid");
    $query->fields("n", array("nid","title"))
    ->condition("n.status", 1, "=")
    ->condition("nat.nid", $space, "=")
    ->condition("n.title", "%" . db_like($string) . "%", "LIKE");
  } else {
    $query = db_select('node', 'n');
    $query->join("taxonomy_index", "ti", "n.nid = ti.nid");
    $query->join("nat", "nat", "ti.tid = nat.tid");
    $query->fields("n", array("nid","title"))
    ->condition("n.status", 1, "=")
    ->condition("n.title", "%" . db_like($string) . "%", "LIKE");
  }

  $result = $query->execute();
  foreach ($result as $row) {
    $matches[$row->title.' [nid:'.$row->nid.']'] = check_plain($row->title).' [nid:'.$row->nid.']';
  }
  // Return the result to the form in json
  drupal_json_output($matches);
}


/**
* Autocomplete for Journals
*/
function ismaili_custom_articles_journal_autocomplete($string) {
  $matches = array();
  $space = $_SESSION['editnid'];
  if(isset($_SESSION['editnid']) && $_SESSION['editnid'] > 0) {
    $query = db_select('node', 'n');
    $query->join("taxonomy_index", "ti", "n.nid = ti.nid");
    $query->join("nat", "nat", "ti.tid = nat.tid");
    $query->fields("n", array("nid","title"))
    ->condition("n.status", 1, "=")
    ->condition("nat.nid", $space, "=")
    ->condition("n.type", "child_compound_articles", "=")
    ->condition("n.title", "%" . db_like($string) . "%", "LIKE");
  } else {
    $query = db_select('node', 'n');
    $query->join("taxonomy_index", "ti", "n.nid = ti.nid");
    $query->join("nat", "nat", "ti.tid = nat.tid");
    $query->fields("n", array("nid","title"))
    ->condition("n.status", 1, "=")
    ->condition("n.type", "child_compound_articles", "=")
    ->condition("n.title", "%" . db_like($string) . "%", "LIKE");
  }

  $result = $query->execute();
  foreach ($result as $row) {
    $matches[$row->title.' [nid:'.$row->nid.']'] = check_plain($row->title).' [nid:'.$row->nid.']';
  }
  // Return the result to the form in json
  drupal_json_output($matches);
}
/**
* Autocomplete for Upcoming news
*/
function ismaili_custom_upcoming_news_autocomplete($string) {
  $matches = array();
  $space = $_SESSION['editnid'];
  if(isset($_SESSION['editnid']) && $_SESSION['editnid'] > 0) {
    $query = db_select('node', 'n');
    $query->join("taxonomy_index", "ti", "n.nid = ti.nid");
    $query->join("nat", "nat", "ti.tid = nat.tid");
    $query->fields("n", array("nid","title"))
    ->condition("n.status", 1, "=")
    ->condition("nat.nid", $space, "=")
    ->condition("n.title", "%" . db_like($string) . "%", "LIKE");
  } else {
    $query = db_select('node', 'n');
    $query->join("taxonomy_index", "ti", "n.nid = ti.nid");
    $query->join("nat", "nat", "ti.tid = nat.tid");
    $query->fields("n", array("nid","title"))
    ->condition("n.status", 1, "=")
    ->condition("n.title", "%" . db_like($string) . "%", "LIKE");
  }

  $result = $query->execute();
  foreach ($result as $row) {
    $matches[$row->title.' [nid:'.$row->nid.']'] = check_plain($row->title).' [nid:'.$row->nid.']';
  }
  // Return the result to the form in json
  drupal_json_output($matches);
}
/**
* Autocomplete for Gallery Items
*/
function ismaili_custom_gallery_items_autocomplete($string) {
  $matches = array();
  $space = $_SESSION['editnid'];
  if(isset($_SESSION['editnid']) && $_SESSION['editnid'] > 0) {
    $query = db_select('node', 'n');
    $query->join("taxonomy_index", "ti", "n.nid = ti.nid");
    $query->join("nat", "nat", "ti.tid = nat.tid");
    $query->fields("n", array("nid","title"))
    ->condition("n.status", 1, "=")
    ->condition("nat.nid", $space, "=")
    ->condition("n.type", "photo_gallery", "=")
    ->condition("n.title", "%" . db_like($string) . "%", "LIKE");
  } else {
    $query = db_select('node', 'n');
    $query->join("taxonomy_index", "ti", "n.nid = ti.nid");
    $query->join("nat", "nat", "ti.tid = nat.tid");
    $query->fields("n", array("nid","title"))
    ->condition("n.status", 1, "=")
    ->condition("n.type", "photo_gallery", "=")
    ->condition("n.title", "%" . db_like($string) . "%", "LIKE");
  }

  $result = $query->execute();
  foreach ($result as $row) {
    $matches[$row->title.' [nid:'.$row->nid.']'] = check_plain($row->title).' [nid:'.$row->nid.']';
  }
  // Return the result to the form in json
  drupal_json_output($matches);
}


 /**
 * Access callback for user space tab.
 */
function space_access_assign_user() {
  if (user_access('assign institutional space')) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Implements hook_permission().
 */
function ismaili_custom_permission() {
  return array(
    'assign institutional space' => array(
      'description' => t('Assign/display institutional sapce to user'),
      'title' => t('Assign/display institutional space'),
      ),
    'General setting Custom' => array(
      'title' => t('General setting for Nutrition Centre'),
      'description' => t('Set the various conffiguration.'),
    ),
    'File Bulk Upload' => array(
      'title' => t('File Bulk Upload'),
      'description' => t('Set the File Bulk Upload permission.'),
    ),
  );
}

/**
 * Assign Institutional Space to JI users.
 * @param  [type] $form       [description]
 * @param  [type] $form_state [description]
 * @param  [type] $user       [description]
 * @return [type]             [description]
 */
function ismaili_custom_space_mapping_form($form, &$form_state, $cuser) {
  global $user;
  if(!db_table_exists('ismaili_space_mapping')) {
    $ismaili_space_mapping_schema = array(
      'description' => 'Institutional space mapping',
      'fields' => array(
        'uid' => array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE),
        'nid' => array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE),
        ),
    );
    db_create_table('ismaili_space_mapping', $ismaili_space_mapping_schema);
  }

  $options = array();
  if(in_array('JI Administrator', $user->roles)) {
            $assigned_space_jiadmin = get_ji_user_selected_all_space($user->uid);
            $query = db_select('node', 'n')
              ->fields('n', array("nid", "title"))
              ->condition("type", 'institutional_space')
              ->condition("nid", $assigned_space_jiadmin, 'IN');
        } else {
            $query = db_select('node', 'n')
              ->fields('n', array("nid", "title"))
              ->condition("type", 'institutional_space');
        }
  $results = $query->execute()->fetchAll();

  if(check_ji_role($cuser)){
  $multiple = FALSE;
    if(in_array('JI Administrator', $cuser->roles)) {
      $multiple = TRUE;
    }
    if(get_ji_user_selected_space($cuser->uid) == "" && $multiple == FALSE) {
     $options[''] = t('-select space -');
    }
    foreach ($results as $result) {
       $options[$result->nid] = $result->title;
    }

    if((check_ji_role($user) && $user->uid == $cuser->uid) || (in_array('JI Administrator', $cuser->roles) && in_array('JI Administrator', $user->roles))) {
        $allspace = $options;
        $assigned_space = get_ji_user_selected_all_space($cuser->uid);
        $assigned = '<ul>';
        $is_assigned = TRUE;
        foreach($allspace as $key =>$value) {
          if(in_array($key,$assigned_space)) {
            $assigned .= '<li>'.l(t($value),drupal_get_path_alias('node/'.$key)).'</li>';
            $is_assigned = FALSE;
          }
        }
         $assigned .= '</ul>';

       if($is_assigned){
         $assigned = 'Institutional Space not assigned to this user.';
       }

       $form['info'] = array(
            '#type' => 'item',
            '#title' => t('Assigned Institutional Space'),
            '#markup' => $assigned,
            );
    } else {

        $form['space'] = array(
          '#type' => 'select',
          '#title' => t('Institutional Space'),
          '#options' => $options,
          '#default_value' => get_ji_user_selected_all_space($cuser->uid),
          '#multiple' => $multiple,
        );
        $form['space_user'] = array(
          '#type' => 'hidden',
          '#default_value' => $cuser->uid,
        );

        $form['remove_space'] = array(
          '#title' => t('Remove Institutional space from user'),
          '#type' => 'checkbox',
          '#default_value' => $cuser->uid,
        );

         $form['submit_button'] = array(
            '#type' => 'submit',
            '#value' => t('Save'),);
      }
    } else {
      $form['info'] = array(
      '#type' => 'item',
      '#title' => '',
      '#markup' => t('Space can only be assigned to JI Administrator, JI Contributor, JI Editor and JI Publisher roles'),
      );
    }
  return $form;
}

/**
 * [ismaili_custom_space_mapping_form_submit description]
 * @param  [type] $form       [description]
 * @param  [type] $form_state [description]
 * @return [type]             [description]
 */
function ismaili_custom_space_mapping_form_submit($form, &$form_state) {
  if($form_state['values']['remove_space'] == 1) {
    db_delete('ismaili_space_mapping')
      ->condition('uid', $form_state['values']['space_user'])
      ->execute();
    drupal_set_message(t('Institutional space removed from user.'));
  } else {
      if(is_array($form_state['values']['space'])){
        db_delete('ismaili_space_mapping')
        ->condition('uid', $form_state['values']['space_user'])
        ->execute();
        foreach ($form_state['values']['space'] as $value) {
          if($value > 0) {
          db_insert('ismaili_space_mapping')
                        ->fields(array(
                        'nid' => $value,
                        'uid' => $form_state['values']['space_user'],
              ))
              ->execute();
            }
         }
        if(count($form_state['values']['space']) > 0) {
          drupal_set_message(t('Institutional space assigned to user.'));
         }
      } else {
        if($form_state['values']['space'] !="") {
              if(get_ji_user_selected_space($form_state['values']['space_user']) != ""){
                  db_update('ismaili_space_mapping')
                      ->fields(array(
                      'nid' => $form_state['values']['space'],
                  ))
                  ->condition('uid', $form_state['values']['space_user'], '=')
                  ->execute();
                  drupal_set_message(t('Institutional space assigned to user.'));
              } else {
                   db_insert('ismaili_space_mapping')
                         ->fields(array(
                          'nid' => $form_state['values']['space'],
                          'uid' => $form_state['values']['space_user'],
                ))
                ->execute();
                drupal_set_message(t('Institutional Space assigned to user.'));
              }
          }
        }
   }
}

/**
* Check JI Roles from user object
*/
function check_ji_role($user) {
  if(in_array('JI Contributor', $user->roles) || in_array('JI Editor', $user->roles) || in_array('JI Publisher', $user->roles) || in_array('JI Administrator', $user->roles)) {
    return TRUE;
  } else {
    return FALSE;
  }
}

/**
 * [get_ji_user_selected_space description]
 * @param  [type] $uid [description]
 * @return [type]      [description]
 */
function get_ji_user_selected_space($uid) {
    $query = db_select('ismaili_space_mapping', 'space')
            ->fields('space', array("nid",'uid'))
            ->condition("uid", $uid);
    $results = $query->execute()->fetch();
    if ($results->nid) {
      return $results->nid;
    } else {
      return '';
    }
}

/**
 * [get_ji_user_selected_all_space description]
 * @param  [type] $uid [description]
 * @return [type]      [description]
 */
function get_ji_user_selected_all_space($uid) {
    $query = db_select('ismaili_space_mapping', 'space')
      ->fields('space', array("nid",'uid'))
      ->condition("uid", $uid);
    $results = $query->execute()->fetchAll();
    $space = array();
    foreach($results as $result) {
      $space[] = $result->nid;
    }
    return $space;
}

/**
 * Google Analytic settngs.
 */
function ismaili_custom_ga_config($form_state) {
  $description = t('Separate each Google Analytic code by semicolon. individual by comma. e.g UA-52705955-1,news-events/*;');
  $format = t('<br />Format: google_analytic_code,path_pattern;');
  $form['ismaili_custom_google_analytic_mapping'] = array(
    '#type' => 'textarea',
    '#title' => t('Google Analytic Pathwise Mapping.'),
    '#description' => $description . $format,
    '#default_value' => variable_get('ismaili_custom_google_analytic_mapping', ''),
    '#required' => FALSE
  );
  $description = t('Separate each Eu Cookie compliance Mapping. individual by comma. e.g 1,news-events/*;');
  $format = t('<br />Format: position,path_pattern;');
  $form['ismaili_custom_eu_cookie_compliance_mapping'] = array(
    '#type' => 'textarea',
    '#title' => t('Eu Cookie compliance Mapping.'),
    '#description' => $description . $format,
    '#default_value' => variable_get('ismaili_custom_eu_cookie_compliance_mapping', ''),
    '#required' => FALSE
  );
  return system_settings_form($form);
}

/**
 * General setting.
 */
function ismaili_custom_config($form_state) {
  $ismaili_taxonomy_labels_mapping = "1,The Ismaili;16,Golden Jubilee;11,Ismaili Centres;6,Nutrition Centre;";
  $format = t('<br />Format: tid,label;');
  $description = t('Separate each section by semicolon. individual by comma. e.g. 1,The Ismaili;16,Golden Jubilee;11,Ismaili Centres;6,Nutrition Centre;');
  $form['ismaili_taxonomy_labels_mapping'] = array(
    '#type' => 'textarea',
    '#title' => t('Taxonomy Label Configuration.'),
    '#description' => $description . $format,
    '#default_value' => variable_get('ismaili_taxonomy_labels_mapping', $ismaili_taxonomy_labels_mapping),
    '#required' => FALSE
  );
  $ismaili_custom_compound_mapping = "title,title;body,body;language,language;field_short_title,field_short_title;field_parent_article,field_parent_article;";
  $format = t('<br />Format: destination_field_name,source_field_name;');
  $form['ismaili_custom_compound_mapping'] = array(
    '#type' => 'textarea',
    '#title' => t('Compoud Article Mapping (Exact).'),
    '#description' => $description . $format,
    '#default_value' => variable_get('ismaili_custom_compound_mapping', $ismaili_custom_compound_mapping),
    '#required' => FALSE
  );

  $ismaili_custom_compound_mapping_term = "field_author,field_institution_display_name;";
  $format = t('<br />Format: destination_field_name,source_field_name;');
  $form['ismaili_custom_compound_mapping_term'] = array(
    '#type' => 'textarea',
    '#title' => t('Compoud Article Mapping (Term).'),
    '#description' => $description . $format,
    '#default_value' => variable_get('ismaili_custom_compound_mapping_term', $ismaili_custom_compound_mapping_term),
    '#required' => FALSE
  );

  $ismaili_custom_compound_mapping_link = "field_body,field_source_link;";
  $format = t('<br />Format: destination_field_name,source_field_name;');
  $form['ismaili_custom_compound_mapping_link'] = array(
    '#type' => 'textarea',
    '#title' => t('Compoud Article Mapping (Link).'),
    '#description' => $description . $format,
    '#default_value' => variable_get('ismaili_custom_compound_mapping_link', $ismaili_custom_compound_mapping_link),
    '#required' => FALSE
  );
  return system_settings_form($form);
}

/**
 * [ismaili_custom_node_view description]
 * @param  [type] $node      [description]
 * @param  [type] $view_mode [description]
 * @return [type]            [description]
 */
function ismaili_custom_node_view($node, $view_mode) {
  $node->rss_elements[1] = array(
    'key' => 'dc:creator',
    'value' => 'TheIsmaili'
    );
}

/**
 * [ismaili_custom_node_insert description]
 * @param  [type] $node [description]
 * @return [type]       [description]
 */
function ismaili_custom_node_insert($node) {
  $type = '';
  $node_title = '';
  // global $user;
  switch ($node->type) {
    case 'news_headline_items':
      $type = $node->field_select_item_type['und']['0']['value'];
      $title = $node->title;
      if ($type == 'In The Media') {
        ismaili_custom_insert_data($node);
      }
      break;
  }


}

/**
 * Handle compound child article creation.
 * @param  [type] $old_node [description]
 * @return [type]           [description]
 */
function ismaili_custom_insert_data($old_node) {
  global $user;
  $node = new stdClass();
  $node->type = 'child_compound_articles';
  $default_fields_mapping = "title,title;language,language;field_short_title,field_short_title;field_parent_article,field_parent_article;";
  $compound_field_mapping = ismaili_traffic_lights_determine_mappings('ismaili_custom_compound_mapping', $default_fields_mapping);
  foreach ($compound_field_mapping  as $field => $data) {
    $source_field_name = $data['name'];
    if (isset($old_node->{$source_field_name})) {
      $node->{$field} = $old_node->{$source_field_name};
    }
  }
  $compound_field_mapping_terms = ismaili_traffic_lights_determine_mappings('ismaili_custom_compound_mapping_term', array());
  foreach ($compound_field_mapping_terms  as $field => $data) {
    $source_field_name = $data['name'];
    if (isset($old_node->{$source_field_name})) {
      $term = (isset($old_node->{$source_field_name}[LANGUAGE_NONE][0]['value'])) ?  $old_node->{$source_field_name}[LANGUAGE_NONE][0]['value'] : '';
      if ($term) {
        $tid = _get_tid_from_term_name($term);
        $node->{$field}[LANGUAGE_NONE][0]['tid'] = $tid;
      }
    }
  }

  $compound_field_mapping_link = ismaili_traffic_lights_determine_mappings('ismaili_custom_compound_mapping_link', array());
  foreach ($compound_field_mapping_link  as $field => $data) {
    $source_field_name = $data['name'];
    if (isset($old_node->{$source_field_name})) {
      $node->{$field}[LANGUAGE_NONE][0]['value']   = $old_node->{$source_field_name}[LANGUAGE_NONE][0]['url'];
      $node->{$field}[LANGUAGE_NONE][0]['summary'] = text_summary($old_node->{$source_field_name}[LANGUAGE_NONE][0]['url']);
      $node->{$field}[LANGUAGE_NONE][0]['format']  = 'filtered_html';
      $node->{$field}[LANGUAGE_NONE][0]['safe_value'] = $old_node->{$source_field_name}[LANGUAGE_NONE][0]['url'];
    }
  }
  node_object_prepare($node);
  $node = node_submit($node); // Prepare node for saving
  node_save($node);
}

/**
 * Get Term tid for passed term in the given Vocabulary.
 * @param  [type]  $term [description]
 * @param  integer $vid  [description]
 * @return [type]        [description]
 */
function _get_tid_from_term_name($term_name) {
  $vocabulary = 'authors';
  $arr_terms = taxonomy_get_term_by_name($term_name, $vocabulary);
  if (!empty($arr_terms)) {
    $arr_terms = array_values($arr_terms);
    $tid = $arr_terms[0]->tid;
  }
  else {
    $vobj = taxonomy_vocabulary_machine_name_load($vocabulary);
    $term = new stdClass();
    $term->name = $term_name;
    $term->vid = $vobj->vid;
    taxonomy_term_save($term);
    $tid = $term->tid;
  }
  return $tid;
}


/**
 * returns list of terms in a vocabulary using vocabulary machine name.
 * @param  [type] $machine name [description]
 * @return [type]  Array      [description]
 */
function taxonomy_options_array($machine_name) {
  $v = taxonomy_vocabulary_machine_name_load($machine_name);
  $terms = taxonomy_get_tree($v->vid);
  foreach ($terms as $term) {
    $options[$term->tid] = $term->name;
  }
  return $options;
}

/**
 * convert text in to url format.
 * @param  [type] $string [description]
 * @return [type]       [description]
 */
function replaceAll($text) {
    $text = strtolower(htmlentities($text));
    $text = str_replace(get_html_translation_table(), "-", $text);
    $text = str_replace(" ", "-", $text);
    $text = preg_replace("/[-]+/i", "-", $text);
    return $text;
}



/**
 * Add css to a particular path.
 * @param  [type] $page [description]
 * @return [type]       [description]
 */
function ismaili_custom_page_alter(&$page) {
  if (arg(0) == 'search' && arg(2) == 'nid') {
    unset($page['branding_right']);
    unset($page['menu']);
  }

  // add css file for node edit path
  if (arg(0) == 'node' and arg(2) == 'edit') {
    drupal_add_css(drupal_get_path('theme', 'ismaili') . "/css/custom_admin.css");
  }
  ismaili_custom_secondary_google_analytic();
}

/**
 * Add secondary Google Analytic.
 * @return [type] [description]
 */
function ismaili_custom_secondary_google_analytic() {
  $google_id = "";
  ismaili_custom_extend_google_anaytics($google_id, 1);
}

/**
 * Set Google Analytic ID for each path pattern settings.
 * @param  [type] $id [description]
 * @return [type]     [description]
 */
function ismaili_custom_extend_google_anaytics(&$id, $call = 0) {
  if ($call == 0) {
    return;
  }
  $site_path = drupal_get_path_alias();
  $ismaili_custom_google_analytic_mapping = ismaili_custom_determine_ga_mappings('ismaili_custom_google_analytic_mapping', '');
  foreach ($ismaili_custom_google_analytic_mapping as $pos => $data_info) {
    foreach ($data_info as $path => $data) {
      if (drupal_match_path($site_path, $path)) {
        $google_id = drupal_strtoupper($data['name']);
        ismaili_custom_apply_google_analytic($google_id);
      }
    }
  }
}

/**
 * Apply google Analytic on the page.
 * @param  [type] $google_id [description]
 * @return [type]            [description]
 */
function ismaili_custom_apply_google_analytic($google_id) {
  if ($google_id != '') {
    $script = "var _gaq = _gaq || [];_gaq.push(['_setAccount', '$google_id']);_gaq.push(['_trackPageview']);(function() {var ga = document.createElement('script');ga.type = 'text/javascript';ga.async = true;ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';var s = document.getElementsByTagName('script')[0];s.parentNode.insertBefore(ga, s);})();";
    drupal_add_js($script, array('type' => 'inline', 'scope' => 'header'));
  }
}

/**
 * Implements hook_form_alter().
 * Set workbench for recipe.
 * @TODO: change this to form_id_alter().
 */
function ismaili_custom_form_alter(&$form, &$form_state, $form_id) {
  if($form_id == 'registration_form'){
    unset($form['who_is_registering']['#options']['registration_registrant_type_me']);
    unset($form['who_is_registering']['#options']['registration_registrant_type_user']);
    $form['who_is_registering']['#default_value'] = 'anon_mail';
    drupal_add_css('.form-item.form-type-select.form-item-who-is-registering { display: none;}', $option['type'] = 'inline');
    drupal_add_css('.form-item.form-type-textarea.form-item-field-thank-you-message-und-0-value {display: none;}', $option['type'] = 'inline');
    drupal_add_css('.field.registration-slots {display: none;}',$option['type'] = 'inline');
    $form['#submit'][] = 'ismaili_custom_registration_form_redirect';
  } else if ($form_id == 'simplenews_confirm_add_form') {
    $form['#submit'][] = 'ismaili_custom_simplenews_confirm_submit';
  }
  ismaili_custom_get_nutrient_tooltip_form($form, $form_state, $form_id);
  ismaili_custom_hide_nutrient_field_form($form, $form_state, $form_id);
  ismaili_custom_handle_microsite_labels($form, $form_state, $form_id);
  ismaili_custom_handle_institutional_space_form($form, $form_state, $form_id);
  ismaili_custom_handle_institutional_space_hub_page_form($form, $form_state, $form_id);
  ismaili_custom_handle_simplenews_form($form, $form_state, $form_id);
  ismaili_custom_handle_simplenews_newsletters_form($form, $form_state, $form_id);
  ismaili_custom_handle_institutional_space_node_reference_form($form, $form_state, $form_id);
  ismaili_custom_handle_default_section_node_form($form, $form_state, $form_id);

}

/*--set default section--*/
function ismaili_custom_handle_default_section_node_form(&$form, &$form_state, $form_id) {
    switch ($form_id) {
      case 'article_node_form':
      case 'page_node_form':
      case 'calendar_pages_node_form':
      case 'child_compound_articles_node_form':
      case 'events_node_form':
      case 'photo_gallery_node_form':
      case 'news_headline_items_node_form':
      case 'parent_compound_articles_node_form':
      case 'speech_node_form':
      case 'speech_quote_node_form':
      case 'video_node_form':
      case 'webform_node_form':
      if(!isset($form['field_body'][und][0]['#entity']->workbench_access)) {
        $form['field_body'][und][0]['#entity']->workbench_access = array('1' =>1);
      }

      case 'calendar_event_node_form':
      if(!isset($form['body'][und][0]['#entity']->workbench_access)) {
        $form['body'][und][0]['#entity']->workbench_access = array('1' =>1);
      }

      case 'hub_page_node_form':
      if(!isset($form['field_summary'][und][0]['#entity']->workbench_access)) {
              $form['field_summary'][und][0]['#entity']->workbench_access = array('1' =>1);
      }

      case 'ismaili_centres_node_form':
      if(!isset($form['field_summary'][und][0]['#entity']->workbench_access)) {
              $form['field_summary'][und][0]['#entity']->workbench_access = array('11' => 11);
      }

      case 'news_headline_items_node_form':
       if(!isset($form['#entity']->workbench_access)) {
              $form['#entity']->workbench_access = array('1' => 1);
      }

      case 'nutrient_node_form':
       if(!isset($form['#entity']->workbench_access)) {
              $form['#entity']->workbench_access = array('6' => 6);
      }

      case 'people_node_form':
      case 'tips_node_form':
      if(!isset($form['#entity']->workbench_access)) {
              $form['#entity']->workbench_access = array('1' => 1);
      }

    }
}

/**
 * Institutioanl Space contents form Hub page select Management.
 * @param  [type] $form       [description]
 * @param  [type] $form_state [description]
 * @param  [type] $form_id    [description]
 * @return [type]             [description]
 */
function ismaili_custom_handle_institutional_space_hub_page_form(&$form, &$form_state, $form_id) {
  global $user;
    switch ($form_id) {
    case 'article_node_form':
    case 'page_node_form':
    case 'calendar_event_node_form':
    case 'child_compound_articles_node_form':
    case 'events_node_form':
    case 'photo_gallery_node_form':
    case 'parent_compound_articles_node_form':
    case 'calendar_pages_node_form':
    case 'footer_menu_node_form':
    case 'webform_node_form':
    case 'ip_hub_page_node_form':
        $hubpage_options = array();

	if(isset($form['field_institutional_space']['und']['#default_value'])) {
         if(is_array($form['field_institutional_space']['und']['#default_value'])) {
           $ip = $form['field_institutional_space']['und']['#default_value']['0'];
         } else {
           $ip = $form['field_institutional_space']['und']['#default_value'];
         }
       } else {
           $ip = 0;
       }


        $hubpage_options = get_hubpage_options($ip);
        $form['field_institutional_space']['und']['#ajax'] = array(
                'event' => 'change',
                'wrapper' => 'hubpage-wrapper',
                'callback' => 'hubpage_ajax_callback',
                'method' => 'replace',
            );
        $form['field_hub_page']['und']['#prefix'] = '<div id="hubpage-wrapper">';
        $form['field_hub_page']['und']['#suffix'] = '</div>';
        $form['field_hub_page']['und']['#options'] = $hubpage_options;
      break;
    default:
      break;
  }
}

/**
* Ajax callback for hubpage options
*/
function hubpage_ajax_callback($form, $form_state) {
    $ip = $form['field_institutional_space']['und']['#value'];
    $form['field_hub_page']['und']['#options'] = get_hubpage_options($ip);
    return $form['field_hub_page'];
}

/**
* Get hubpage options based on roles
*/
function get_hubpage_options($ip) {
    global $user;
    $nodes['_none'] = '- None -';
    if((int)$ip > 0) {
        if(is_array($ip)){
          $ip = $ip['0'];
        }
    $select = db_query("SELECT n.nid AS nid FROM {node} n
              LEFT JOIN {field_data_field_institutional_space} ip ON n.nid = ip.entity_id AND (ip.entity_type = 'node' AND ip.deleted = '0') WHERE ip.field_institutional_space_tid IN ($ip) AND n.status = '1' AND n.type IN  ('ip_hub_page')");
    } else {
        $select = db_query("SELECT n.nid AS nid FROM {node} n LEFT JOIN {field_data_field_institutional_space} ip ON n.nid = ip.entity_id AND (ip.entity_type = 'node' AND ip.deleted = '0') WHERE n.status = '1' AND n.type IN  ('ip_hub_page')");
        if(check_ji_role($user)) {
            $spaces = get_ji_user_selected_all_space($user->uid);
            $sp = array();
            foreach($spaces as $space){
            $default_space = nat_get_terms_by_vocabulary($space);
            reset($default_space);
              if(key($default_space) > 0) {
                $sp[] = key($default_space);
              }
            }
            $sp_str = implode(",", $sp);
            $select = db_query("SELECT n.nid AS nid FROM {node} n
              LEFT JOIN {field_data_field_institutional_space} ip ON n.nid = ip.entity_id AND (ip.entity_type = 'node' AND ip.deleted = '0') WHERE ip.field_institutional_space_tid IN ($sp_str) AND n.status = '1' AND n.type IN  ('ip_hub_page')");

        }

    }
   foreach($select as $node) {
            $term = nat_get_terms_by_vocabulary($node->nid);
            $term = array_values($term);
            $nodes[$term[0]->tid] = $term[0]->name;

    }
    return $nodes;
}

/**
* Set edit node id in session on institutional space edit form
*/

function ismaili_custom_handle_institutional_space_node_reference_form(&$form, &$form_state, $form_id) {
   if($form_id == 'institutional_space_node_form' && arg(1) > 0) {
        $_SESSION['editnid'] = arg(1);
   }
}

/**
 * Manage Simplenews Newsletters spacewise
 * @param  [type] $form       [description]
 * @param  [type] $form_state [description]
 * @param  [type] $form_id    [description]
 * @return [type]             [description]
 */
function ismaili_custom_handle_simplenews_newsletters_form(&$form, &$form_state, $form_id) {
  global $user;
  if ($form_id  != 'simplenews_admin_newsletter_issues') {
    return;
  }
  if ( (isset($user->roles['11'])) or (isset($user->roles['26']))) {
    return;
  }
  $space_info = ismaili_custom_retrieve_institutional_space_info();
  $spaces = get_ji_user_selected_all_space($user->uid);
  unset($form['filter']['filters']['buttons']['reset']);
  unset($form['filter']['filters']['category']['#options']['all']);
  unset($form['filter']['filters']['category']['#options']['tid-0']);
  $options = $form['filter']['filters']['category']['#options'];
  $allowed_categories = array();
  $default = array();
  foreach ($spaces as $space_nid) {
    if (isset($space_info[$space_nid])) {
      $title = $space_info[$space_nid]->title;
      $cat_ids = $space_info[$space_nid]->news_vid;
      foreach ($cat_ids as $key => $value) {
        if(isset($options['tid-' . $key])) {
          $allowed_categories['tid-' . $key] = $options['tid-' . $key];
          $default[] = 'tid-' . $key;
        }
      }
    }
  }
  unset($form['filter']['filters']['category']['#options']);
  $form['filter']['filters']['category']['#options'] = $allowed_categories;
  if (isset($_SESSION['simplenews_issue_filter']) && $_SESSION['simplenews_issue_filter']['category'] == 'all') {
    $_SESSION['simplenews_issue_filter']['category'] = $default[0];
  }
}

/**
 * Manage Simplenews category spacewise
 * @param  [type] $form       [description]
 * @param  [type] $form_state [description]
 * @param  [type] $form_id    [description]
 * @return [type]             [description]
 */
function ismaili_custom_handle_simplenews_form(&$form, &$form_state, $form_id) {
  global $user;
  if ($form_id  != 'simplenews_node_form') {
    return;
  }
  if ( (isset($user->roles['11'])) or (isset($user->roles['26']))) {
    return;
  }
  $space_info = ismaili_custom_retrieve_institutional_space_info();
  $spaces = get_ji_user_selected_all_space($user->uid);
  $options = $form['field_simplenews_term']['und']['#options'];
  $allowed_categories = array();
  foreach ($spaces as $space_nid) {
     if (isset($space_info[$space_nid])) {
      $title = $space_info[$space_nid]->title;
      $link = l(t($title), 'node/' . $space_nid);
      $cat_ids = $space_info[$space_nid]->news_vid;
      foreach ($cat_ids as $key => $value) {
        if(isset($options[$key])) {
          $allowed_categories[$key] = $options[$key] .'(' . $link .')';
        }
      }
    }
  }
  $form['field_simplenews_term']['und']['#options'] = $allowed_categories;
}

/**
 * Institutioanl Space Form Management.
 * @param  [type] $form       [description]
 * @param  [type] $form_state [description]
 * @param  [type] $form_id    [description]
 * @return [type]             [description]
 */
function ismaili_custom_handle_institutional_space_form(&$form, &$form_state, $form_id) {
  global $user;
  if(!check_ji_role($user)) {
    return;
  }
  switch ($form_id) {
    case 'article_node_form':
    case 'page_node_form':
    case 'calendar_event_node_form':
    case 'child_compound_articles_node_form':
    case 'events_node_form':
    case 'photo_gallery_node_form':
    case 'hub_page_node_form':
    case 'parent_compound_articles_node_form':
    case 'calendar_pages_node_form':
    case 'footer_menu_node_form':
    case 'webform_node_form':
    case 'ip_hub_page_node_form':
      $default_microsite_space = taxonomy_get_term_by_name('Space', 'microsite_space');
      reset($default_microsite_space);
      $space = get_ji_user_selected_space($user->uid);
      $default_space = nat_get_terms_by_vocabulary($space);
      reset($default_space);
      $form['field_microsite_institutional_sp']['und']['#default_value'] = key($default_microsite_space);
      $form['field_institutional_space']['und']['#default_value'] = (empty($form['field_institutional_space']['und']['#default_value']['0'])) ? key($default_space) : $form['field_institutional_space']['und']['#default_value']['0'];
      drupal_add_css('#edit-field-microsite-institutional-sp, #edit-field-institutional-space {display:none!important;}', $option['type'] = 'inline');
        if(!in_array('JI Administrator', $user->roles)){
          return;
        }
      ismaili_custom_ji_administrator_form($form, $form_state, $form_id);
      break;
    default:
      break;
  }
}

/**
 * Managge Form for JI Administrators
 * @param  [type] $form       [description]
 * @param  [type] $form_state [description]
 * @param  [type] $form_id    [description]
 * @return [type]             [description]
 */
function ismaili_custom_ji_administrator_form(&$form, &$form_state, $form_id) {
  global $user;
  drupal_add_css('#edit-field-institutional-space {display:block!important;}',$option['type'] = 'inline');
  $spaces = get_ji_user_selected_all_space($user->uid);
  $sp = array();
  foreach($spaces as $space){
  $default_space = nat_get_terms_by_vocabulary($space);
  reset($default_space);
    if(key($default_space) > 0) {
      $sp[] = key($default_space);
    }
  }
  $array1 =$form['field_institutional_space']['und']['#options'];
  $array2 = array_flip($sp);
  $option = array();
  $option['_none'] = '- None -';
  foreach($array1 as $key =>$value) {
    if(array_key_exists($key, $array2)) {
      $option[$key] = $value;
    }
  }
  $form['field_institutional_space']['und']['#options'] = $option;
}

/**
 * function hook_form_taxonomy_form_term_alter
 * Adding a new field to taxonomy term edit for for hiding a term in facets
 * @param  [type] $form       [description]
 * @param  [type] $form_state [description]
 * @param  [type] $form_id    [description]
 * @return [type]             [description]
 */
function ismaili_custom_hide_nutrient_field_form(&$form, &$form_state, $form_id) {
  if ($form_id != 'nutrient_node_form') {
    return;
  }
  $data = variable_get('hide_nutrient_field', array());
  $key = $form_state['build_info']['args'][0]->field_machine_name[LANGUAGE_NONE][0]['value'];
  $checked = (isset($data[$key]) ) ? $data[$key] : 0;
  $form['hide_nutrient_field'] = array(
    '#title' => 'Hide Nutrient',
    '#type' => 'checkbox',
    '#default_value' => $checked,
    '#description' => 'Do not display value of this nutrient field on Front-end in the Recipe.',
  );
  $form['#submit'][] = 'ismaili_custom_hide_nutrient_form_submission';
}

/**
 * Set the toggle nutrient value from display
 * @param  [type] $form       [description]
 * @param  [type] $form_state [description]
 * @return [type]             [description]
 */
function ismaili_custom_hide_nutrient_form_submission($form, &$form_state){
  $data = variable_get('hide_nutrient_field', array());
  $key = $form_state['build_info']['args'][0]->field_machine_name[LANGUAGE_NONE][0]['value'];
  $hide = $form_state['values']['hide_nutrient_field'];
  $data[$key] = $hide;
  variable_set('hide_nutrient_field', $data);
  ismaili_custom_get_nutrient_fields_for_hidding(0);
}

/**
 * fucntion hook_form_taxonomy_form_term_alter
 * Adding a new field to taxonomy term edit for for hiding a term in facets
 * @param  [type] $form       [description]
 * @param  [type] $form_state [description]
 * @param  [type] $form_id    [description]
 * @return [type]             [description]
 */
function ismaili_custom_get_nutrient_tooltip_form(&$form, &$form_state, $form_id) {
  if ($form_id != 'nutrient_node_form') {
    return;
  }
  $data = variable_get('nutrient_tooltip', array());
  $key = $form_state['build_info']['args'][0]->field_machine_name[LANGUAGE_NONE][0]['value'];
  $tooltip = (isset($data[$key]) ) ? $data[$key] : '';
  $form['#submit'][] = 'ismaili_custom_nutrrient_tooltip_form_submission';
}

/**
 * Set Taxonomy which needs to be ommited from display
 * @param  [type] $form       [description]
 * @param  [type] $form_state [description]
 * @return [type]             [description]
 */
function ismaili_custom_nutrrient_tooltip_form_submission($form, &$form_state){
  $data = variable_get('nutrient_tooltip', array());
  $key = trim($form_state['build_info']['args'][0]->field_machine_name[LANGUAGE_NONE][0]['value']);
  $tooltip = strip_tags($form_state['input']['field_body'][LANGUAGE_NONE][0]['value']);
  $data[$key] = $tooltip;
  variable_set('nutrient_tooltip', $data);
}

/**
 * Alter view labels
 * @param [type] $view [description]
 */
function ismaili_custom_views_pre_render(&$view) {
  switch ($view->name) {
    case 'nutrition_centre':
      ismaili_custom_handle_nutrient_view_labels($view);
      ismaili_custom_handle_nutrient_view_hide_fields($view);
      break;
  }
  if($view->name == 'hub_pages' && $view->current_display == 'page_1') {
    $title = $view->build_info['substitutions']['%1'];
    $title = str_replace (array("-"),array(" "),$title);
    $view->build_info['substitutions']['%1'] = $title;
    $title = $view->build_info['substitutions']['!1'];
    $title = str_replace (array("-"),array(" "),$title);
    $view->build_info['substitutions']['!1'] = $title;
  }
}

/**
 * Hide Nutrient Fields marked for not to show.
 * @param  [type] $view [description]
 * @return [type]       [description]
 */
function ismaili_custom_handle_nutrient_view_hide_fields(&$view) {
  $remove_field_names = ismaili_custom_get_nutrient_fields_for_hidding();
  foreach ($remove_field_names as $field_name => $value) {
    unset($view->field[$field_name]);
  }
}

/**
 * Handle Nutrient Field labels used in Recipe.
 * @param  [type] $view [description]
 * @return [type]       [description]
 */
function ismaili_custom_handle_nutrient_view_labels(&$view) {
  $display_restrict = array ('page_5' => 'ismaili_traffic_lights_nutrients_actual',
    'page_4' => 'ismaili_traffic_lights_nutrients_serving',
    'page_3' => 'ismaili_traffic_lights_nutrients_serving');
  if (!isset($display_restrict[$view->current_display])) {
    return;
  }
  // Get the variable name used for field mapping with machine name [nutrient]
  $field_key = $display_restrict[$view->current_display];
  $nutrient_info = ismaili_custom_get_nutrient_data();
  $recipe_nutrient_mapping_actual = ismaili_traffic_lights_determine_mappings($field_key, array());
  foreach ($recipe_nutrient_mapping_actual as $field_name => $data) {
    if (isset($view->field[$field_name])) {
      $machine_name = $data['name'];
      $info = (isset($nutrient_info[$machine_name])) ? $nutrient_info[$machine_name] : array();
      if ($info['title']) {
        $title = ($info['short_title'] != '') ? $info['short_title'] : $info['title'];
        $unit = ($info['unit'] != '') ? ' (' . $info['unit'] . ')' : '';
        $view->field[$field_name]->options['label'] = $title . $unit;
      }
    }
  }
}

/**
 * Store the data in cache for each Nutrient retrieved.
 * @return string
 */
function ismaili_custom_get_nutrient_data($interval_hour = "36", $fetch = 1) {
  $key = 'all_nutrient_data';
  $data = "";
  $content = cache_get($key, CACHE_TRAFFIC_LIGHT);
  $reload_tree = (isset($content->created)) ? ismaili_traffic_lights_get_tree_status($content->created, $interval_hour) : TRUE;
  if ($reload_tree == FALSE) { // If timeout has not happened check for data presence
    $data = $content->data;
    if (($fetch == 1) && ($content->data == 0)) {
      $reload_tree = TRUE;
    }
  }
  if ($reload_tree == TRUE) {
    $data = ismaili_custom_get_all_nutrient_info();
    cache_set($key, $data, CACHE_TRAFFIC_LIGHT);
  }
  return $data;
}

/**
 * Get all Nutrient information.
 * Query the content type recipe to get all nutrient values to be saved into
 * an array.
 * @return:
 */
function ismaili_custom_get_all_nutrient_info() {
  $nutrient_data = array();
  $result = db_query('SELECT m.entity_id, field_machine_name_value, field_short_title_value, field_unit_value, title FROM field_data_field_machine_name m LEFT JOIN field_data_field_short_title t on (m.entity_id=t.entity_id) LEFT JOIN field_data_field_unit u on (m.entity_id=u.entity_id) LEFT JOIN node n on (m.entity_id=n.nid)');
  foreach($result as $data) {
    $machine_name = $data->field_machine_name_value;
    $nutrient_data[$machine_name] = array(
        'short_title' => $data->field_short_title_value,
        'title' => $data->title,
        'unit' => $data->field_unit_value,
        'nid' => $data->entity_id,
        'short_title' => $data->field_short_title_value,
    );
  }
  return $nutrient_data;
}

/**
 * Handle Microsite terms labels
 * @param  [type] $form       [description]
 * @param  [type] $form_state [description]
 * @param  [type] $form_id    [description]
 * @return [type]             [description]
 */
function ismaili_custom_handle_microsite_labels(&$form, &$form_state, $form_id) {
  $options = (isset($form['field_microsite'][LANGUAGE_NONE]['#options'])) ? $form['field_microsite'][LANGUAGE_NONE]['#options'] : '';
  if (is_array($options)) {
    foreach ($options as $tid => $data) {
      $form['field_microsite'][LANGUAGE_NONE]['#options'][$tid] = ismaili_custom_handle_change_term_label($tid, $data);
    }
  }
}

/**
 * Change the Taxonomy Term label
 * @param  [type] $tid           tid for which label is exoected
 * @param  [type] $default_value [description]
 * @return [type]                [description]
 */
function ismaili_custom_handle_change_term_label($tid, $default_value = '') {
  $term_label_mapping = ismaili_traffic_lights_determine_mappings('ismaili_taxonomy_labels_mapping', array());
  $label = (isset($term_label_mapping[$tid]['name'])) ? $term_label_mapping[$tid]['name'] : $default_value;
  return t($label);
}

/**
 * Show the Tooltip for passed fields tooltip
 * @param  array  $fields [description]
 * @return [type]         [description]
 */
function ismaili_custom_show_nutrient_label_tooltip( $fields = array()) {
  $tooltip_data = variable_get('nutrient_tooltip', array());
  $nutrient_info = ismaili_custom_get_nutrient_data();
  foreach  ($fields as $key => $machine_name) {
    $tool_tip_title = str_ireplace("'", '"', $tooltip_data[$machine_name]);
    $label = $nutrient_info[$machine_name]['short_title'];
    $info = (isset($nutrient_info[$machine_name])) ? $nutrient_info[$machine_name] : array();
    if ($info['title']) {
      $title = ($info['short_title'] != '') ? $info['short_title'] : $info['title'];
      $unit = ($info['unit'] != '') ? ' (' . $info['unit'] . ')' : '';
      $data = $title . $unit;
      $output .= "<td title='$tool_tip_title'>$data</td>";
    }
  }
  if ($output != '') {
    $output = "<table><tr class='nutrient_field_tooltip'>" . $output . "</tr></table>";
  }
  return $output;
}

/**
 * Get list of field name marked not to display
 * @return [type] [description]
 */
function ismaili_custom_get_nutrient_fields_for_hidding($interval_hour = 3, $fetch = 1) {
  $key = 'hide_nutrient_field_list';
  $data = "";
  $content = cache_get($key, CACHE_TRAFFIC_LIGHT);
  $reload_tree = (isset($content->created)) ? ismaili_traffic_lights_get_tree_status($content->created, $interval_hour) : TRUE;
  if ($reload_tree == FALSE) { // If timeout has not happened check for data presence
    $data = $content->data;
    if (($fetch == 1) && ($content->data == 0)) {
      $reload_tree = TRUE;
    }
  }
  if ($reload_tree == TRUE) {
    $data = ismaili_custom_get_hidden_fields();
    cache_set($key, $data, CACHE_TRAFFIC_LIGHT);
  }
  return $data;
}

/**
 * Get hidden fields in nutrient definition.
 * @return [type] [description]
 */
function ismaili_custom_get_hidden_fields() {
  $remove_field_names = array();
  $hide_fields = variable_get('hide_nutrient_field', array());
  $recipe_nutrient_lights_mapping = ismaili_traffic_lights_determine_mappings('ismaili_traffic_lights_traffic_field', array());
  $recipe_nutrient_mapping = ismaili_traffic_lights_determine_mappings('ismaili_traffic_lights_nutrients_serving', array());
  $recipe_nutrient_mapping_actual = ismaili_traffic_lights_determine_mappings("ismaili_traffic_lights_nutrients_actual", array());
  foreach ($hide_fields as $machine_name => $value) {
    if($value != 1) {
      continue;
    }
    ismaili_custom_determine_hide_fields($remove_field_names, $machine_name, $recipe_nutrient_lights_mapping);
    ismaili_custom_determine_hide_fields($remove_field_names, $machine_name, $recipe_nutrient_mapping);
    ismaili_custom_determine_hide_fields($remove_field_names, $machine_name, $recipe_nutrient_mapping_actual);
  }
  return $remove_field_names;
}

/**
 * Determine the nutrient field name marked for hiding
 * @param  [type] $remove_field_names [description]
 * @param  [type] $machine_name       [description]
 * @param  array  $nutrient_fields    [description]
 * @return [type]                     [description]
 */
function ismaili_custom_determine_hide_fields(&$remove_field_names, $machine_name, $nutrient_fields = array()) {
  foreach ($nutrient_fields as $key => $data) {
    $machine_name1 = $data['name'];
    if ($machine_name1 == $machine_name){
      $remove_field_names[$key] = $key;
      return;
    }
  }
}

 /**
 * Get Configuration processed in array form for Google Analytic.
 * @param  string $key [description]
 * @return [type]      [description]
 */
function ismaili_custom_determine_ga_mappings($mapping_key, $default_data = '') {
  $traffic_light_label = variable_get($mapping_key, $default_data);
  $traffic_light_label = str_ireplace(" ", "", $traffic_light_label);
  $traffic_light_label_arr = explode(";", $traffic_light_label);
  $traffic_light_label_mapping = array();
  foreach($traffic_light_label_arr as $pos => $data) {
    $data_arr = explode(",", $data);
    if (!isset($data_arr[0])) {
      continue;
    }
    $key = drupal_strtolower($data_arr[0]);
    $name = (isset($data_arr[1])) ? $data_arr[1] : '';
    if (empty($name)) {
      continue;
    }
    $traffic_light_label_mapping[$pos][$name]['name'] = $key;
  }
  return $traffic_light_label_mapping;
}

/**
 * Update node for indexing on solr.
 * @param  [type] $node [description]
 * @return [type]       [description]
 */
function ismaili_custom_node_update_for_solr($node) {
  if ($node->is_new) {
    $node->is_new = 0;
  }
  if ($node->workbench_moderation['my_revision']->state == 'published') {
    $published = 1;
    $state = 'published';
    $live_revision = $node;//workbench_moderation_node_current_load($node);
    $live_revision->status = $published;
    $live->changed = $node->changed;
    $live_revision->revision = 0;
    $live_revision->workbench_moderation['updating_live_revision'] = TRUE;
    node_save($live_revision);
  }
}

/**
 * Get all Institutional Space information.
 * Query the content type recipe to get all nutrient values to be saved into
 * an array.
 * @return:
 */
function ismaili_custom_get_institutional_space_info() {
  $institutional_space_info = array();
  $result = db_query('SELECT n.title, wc.extra,s.entity_id,n.nid,nat.tid,nat.vid
    FROM nat  left join node n ON (nat.nid=n.nid) LEFT JOIN field_data_field_institutional_space s
    ON (nat.tid=s.field_institutional_space_tid)
    left join webform_component wc
    ON (s.entity_id=wc.nid and wc.cid=7)
    WHERE n.type = :ptype and s.bundle= :pbundle', array(':pbundle' =>'webform', ':ptype' => 'institutional_space'));
  foreach($result as $data) {
    $extra_data = unserialize($data->extra);
    $data->news_vid = array();
    if(is_array($extra_data['news_vid'])) {
      $data->news_vid = $extra_data['news_vid'];
    }
    unset($data->extra);
    $institutional_space_info[$data->nid] = $data;
  }
  return $institutional_space_info;
}

/**
 * Get all Institutional Space information from Cache.
 * @return [type] [description]
 */
function ismaili_custom_retrieve_institutional_space_info($interval_hour = 1, $fetch = 1) {
  $key = 'institutional_space_info';
  $data = '';
  $content = cache_get($key, CACHE_TRAFFIC_LIGHT);
  $reload_tree = (isset($content->created)) ? ismaili_traffic_lights_get_tree_status($content->created, $interval_hour) : TRUE;
  if ($reload_tree == FALSE) { // If timeout has not happened check for data presence
    $data = $content->data;
    if (($fetch == 1) && ($content->data == 0 or $content->data == 'N;')) {
      $reload_tree = TRUE;
    }
  }
  if ($reload_tree == TRUE) {
    $data = ismaili_custom_get_institutional_space_info();
    cache_set($key, $data, CACHE_TRAFFIC_LIGHT);
  }
  return $data;
}

/**
 * Get the cookie path
 * @return [type] [description]
 */
function ismaili_custom_retrieve_cookie_compliance_path() {
  $base_path = base_path();
  $site_path = drupal_get_path_alias();
  $set_path = $base_path;
  $eu_cookie_compliance_mapping = ismaili_custom_determine_ga_mappings('ismaili_custom_eu_cookie_compliance_mapping', '');
  $found = 0;
  foreach ($eu_cookie_compliance_mapping as $pos => $data_info) {
    foreach ($data_info as $path => $data) {
      if (drupal_match_path($site_path, $path)) {
        $set_path = $path;
        $found = 1;
        break;
      }
    }
    if ($found) {
      break;
    }
  }

  $path_args = explode("/", $set_path);
  $set_path = $path_args[0];

  $node = node_load(arg(1));
  $eu_comp = 0;
  $eu_comp = $node->field_eu_compliance['und'][0]['value'];

  if ($path_args[0] == 'ismaili' && $path_args[1] != '') {
    $set_path = $path_args[1];
  }
  else if (arg(0) == 'node' && $node->type == 'institutional_space' && $eu_comp == 1 && $GLOBALS['user']->uid == 0) {
    $set_path = $GLOBALS['base_url']."/".$node->language."/node/".$node->nid;
  }

  return $set_path;
}

/**
 * Generate breadcrumb for Institutional Spaces
 * @param  [type] $node [description]
 * @return [type]       [description]
 */
function ismaili_custom_generate_breadcrumb($node, $home_title = 'Home', $separator = ' &raquo; ') {
  $links = array();
  $output = '';
  $links[] = l(t($home_title), '<front>');
  // Institutional Space Link
  $institutional_space_tid = $node->field_institutional_space;
  if (isset($institutional_space_tid['und'][0]['tid'])) {
    $data = ismaili_custom_retrieve_nat_node_info($institutional_space_tid['und'][0]['tid']);
    if (isset($data->nid)) {
      $links[] = l(t($data->title), 'node/' . $data->nid);
    }
  }
  // Hub page link
  $hub_page_tid = (isset($node->field_hub_page)) ? $node->field_hub_page : array();
  if (isset($hub_page_tid['und'][0]['tid'])) {
    $data = ismaili_custom_retrieve_nat_node_info($hub_page_tid['und'][0]['tid']);
    if (isset($data->nid)) {
      $links[] = l(t($data->title), 'node/' . $data->nid);
    }
  }
  $links[] = t($node->title);
  drupal_set_breadcrumb($links);
  $breadcrumb = drupal_get_breadcrumb();
  if (count($breadcrumb) > 1) {
    $output = implode($separator, $breadcrumb);
  }
  return $output;
}

/**
 * Retrieve Node info related to tid associated with Nat
 * @param  [type] $tid [description]
 * @return [type]      [description]
 */
function ismaili_custom_retrieve_nat_node_info($tid) {
  $data = array();
  $query = "SELECT n.nid, n.title FROM {nat} left join {node} n ON(nat.nid=n.nid) WHERE nat.tid = :ptid";
  $result = db_query($query, array(':ptid' => $tid));
  foreach($result as $data) {
    return $data;
  }
  return $data;
}

/**
* Custom permissions for node edit
*/
function ismaili_custom_node_access($node, $op, $account) {
  if(($node->workbench_moderation['current']->state != 'draft' ||  $node->status == 1) && $op =='update' && (in_array('JI Contributor',$account->roles))) {
     return NODE_ACCESS_DENY;
  }
  if(($node->status == 1) && $op =='update' && (in_array('Editor',$account->roles))) {
     return NODE_ACCESS_DENY;
  }

  if(($node->status == 1) && $op =='update' && (in_array('JI Editor',$account->roles))) {
     return NODE_ACCESS_DENY;
  }
 return NODE_ACCESS_IGNORE;
}

/**
 * Render tempates for various subscribe webforms.
 * @param  [type] $existing [description]
 * @param  [type] $type     [description]
 * @param  [type] $theme    [description]
 * @param  [type] $path     [description]
 * @return [type]           [description]
 */
function ismaili_custom_theme($existing, $type, $theme, $path) {
  // if($path = 'admin/webform/filters'){
  // return array(
  //   'ismaili_custom_webform_listing_form' => array('arguments' => array('form' => NULL),),
  // );

  // }
  $webform = array();
  $webform_info = variable_get('webform_anonymous_edits_webform_info', array());
  foreach($webform_info as $nid => $data  ) {
    if (!$data) {
      continue;
    }
    $webform['webform_form_' . $nid] = array(
      'render element' => 'form',
      'template' => 'webform-form-ispace',
      'path' => drupal_get_path('theme', 'ismaili') . '/templates',
      'pattern' => 'webform_form_[0-9]+',
    );
  }
  return $webform;
}

function simplenews_confirm_add_form_alter($form, &$form_state){

$form['#submit'][] = ismaili_custom_simplenews_form_alter();

}

function ismaili_custom_simplenews_form_alter($form, &$form_state) {
  simplenews_subscribe_user($form_state['values']['mail'], $form_state['values']['newsletter']->tid, FALSE, 'website');

  if (!$path = variable_get('simplenews_confirm_subscribe_paHi Everyone,ge', '')) {
    $path = variable_get('site_frontpage', 'node');
    drupal_set_message(t('%user was banned to the %newsletter mailing list.', array('%user' => $form_state['values']['mail'], '%newsletter' => _simplenews_newsletter_name($form_state['values']['newsletter']))));
  }

  $form_state['redirect'] = $path;
}

function ismaili_custom_webform_listing($form, &$form_state) {
$query = db_select(SUBSCRIBE_VIEW_TABLE,"wsd")->extend("PagerDefault")->limit(20);
$query->fields("wsd", array("sid","email","first_name","last_name","age_range","country"));
$submmited = array(
    'email' => '',
    'first_name' =>'',
    'last_name' => '',
    'age_range' => '',
    'country' => '',
);

foreach ($submmited as $key => $value) {
  if (isset($_GET[$key]) && !empty($_GET[$key])) {
      $submmited[$key] = $_GET[$key];
      if (is_string($submmited[$key])) {
          $query->condition("wsd.".$key,($submmited[$key]) . '%','LIKE');
      }else if(is_int($submmited[$key])) {
         $query->condition("wsd.".$key,$submmited[$key]);
      }

  }
}
$form['filter'] = array(
     '#type' => 'fieldset',
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#title' => t('Filter options')
  );
$form['filter']['email'] = array(
    '#type' => 'textfield',
    '#title' => t('Email'),
    '#default_value' => $submmited['email'],
  );
$form['filter']['first_name'] = array(
    '#type' => 'textfield',
    '#title' => t('First'),
    '#default_value' => $submmited['first_name'],
  );
$form['filter']['last_name'] = array(
    '#type' => 'textfield',
    '#title' => t('Last'),
    '#default_value' => $submmited['last_name'],
  );
$form['filter']['age_range'] = array(
    '#type' => 'textfield',
    '#title' => t('Age'),
    '#default_value' => $submmited['age_range'],
    '#description' => t("Enter Age like as year 1994."),
  );
$options = array('-select-');
$options+=country_get_list();
$form['filter']['country'] = array(
    '#type' => 'select',
    '#title' => t('country'),
    '#options' => $options,
    '#default_value' => $submmited['country'],
  );
$form['filter']['actions']['filter'] = array(
    '#type' => 'submit',
    '#value' => t('Filter'),
    '#submit' => array('ismaili_custom_webform_listing_submit'),
  );
$form['filter']['actions']['delete'] = array(
    '#type' => 'submit',
    '#value' => t('Delete'),
    '#submit' => array('ismaili_custom_webform_listing_delete'),
  );
$results = $query->execute();
$header = array('SID', 'Email', 'First','Last','Age','Country');
$row = array();
$rows = array();
foreach($results as $result){
  $row = array($result->sid, $result->email, $result->first_name, $result->last_name,$result->age_range,$result->country);
  $rows[$result->sid] = $row;
}
$form['subscribers'] = array(
   '#type' => 'tableselect',
   '#header' => $header,
   '#options' => $rows,
   '#empty' => t("No any subscriber"),
  );
$form["pager"]= array("#markup" => theme('pager'));
return $form;
}

function ismaili_custom_webform_listing_submit($form, &$form_state){
$email = $form_state['values']['email'];
$first_name = $form_state['values']['first_name'];
$last_name = $form_state['values']['last_name'];
$age_range = $form_state['values']['age_range'];
$country = $form_state['values']['country'];

$query = array(
    'email' => $email,
    'first_name' => $first_name,
    'last_name' => $last_name,
    'age_range' => $age_range,
    'country' => $country
  );
drupal_goto($_GET['q'], array('query' => $query));
}

function ismaili_custom_webform_listing_delete($form, &$form_state){
  module_load_include('inc', 'webform', 'includes/webform.submissions');
  foreach($form_state['values']['subscribers'] as $value){
    $nid = db_select('webform_submissions', 'wfs')
           ->fields("wfs", array("nid"))
           ->condition("wfs.sid", $value)
           ->execute()
           ->fetchField();
    $node = node_load($nid);
    $submission = webform_get_submission($nid, $value);
    webform_submission_delete($node, $submission);
  }
  drupal_set_message(t('Submission deleted.'));

    $email = $form_state['values']['email'];
    $first_name = $form_state['values']['first_name'];
    $last_name = $form_state['values']['last_name'];
    $age_range = $form_state['values']['age_range'];
    $country = $form_state['values']['country'];

    $query = array(
        'email' => $email,
        'first_name' => $first_name,
        'last_name' => $last_name,
        'age_range' => $age_range,
        'country' => $country
      );
    drupal_goto($_GET['q'], array('query' => $query));
}

function ismaili_custom_get_unconfimed_simplenewsletters(){
  return drupal_get_form("ismaili_custom_unconfimed_simplenews",2);
}

function ismaili_custom_get_unsubscribed_simplenewsletters(){
  return drupal_get_form("ismaili_custom_unconfimed_simplenews",0);
}

/**
 * Callback function for the subscribed simplenewsletters.
 */
function ismaili_custom_get_subscribed_simplenewsletters() {
  return drupal_get_form("ismaili_custom_unconfimed_simplenews",1);
}

function ismaili_custom_unconfimed_simplenews($form, $form_state,$sn_status = 2){
$query = db_select("simplenews_subscription","ss")->extend("PagerDefault")->limit(20);
$query->fields("ss", array("timestamp","status","snid","tid"));
$query->leftJoin("simplenews_subscriber","ssb","ssb.snid = ss.snid");
$query->leftJoin('taxonomy_term_data', 'td', 'td.tid = ss.tid');
$query->fields("ssb",array("mail"))
      ->fields("td",array("name"))
      ->condition("ss.status", $sn_status)
      ->groupBy("ss.snid")
      ->orderBy("ss.snid","DESC");
$submmited = array(
     'category' => '',
  );
$submmited['category']='all';
if(isset($_GET['category']) && !empty($_GET['category'])){
  $submmited['category'] = $_GET['category'];
   $query->condition("ss.tid", $submmited['category']);
}

$form['simplenews_filter'] = array(
     '#type' => 'fieldset',
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
    '#title' => t('options')
  );
$options = array("-select-");
$options+=simplenews_category_list();
$form['simplenews_filter']['category'] = array(
   '#type' => 'select',
   '#title' => 'Category',
   '#options' => $options,
   '#default_value' => $submmited['category'],
  );
$form['simplenews_filter']['filter'] = array(
   '#type' => 'submit',
   '#value' => 'Filter',
   '#submit' => array("ismaili_custom_filter_simplenews"),
  );
$form['simplenews_filter']['simplenews_subscribers_delete'] = array(
   '#type' => 'submit',
   '#value' => 'Delete',
   '#submit' => array("ismaili_custom_delete_simplenews"),
  );

$results = $query->execute();
$webform_nid = '10736';
module_load_include('inc','webform','includes/webform.submissions');
$header = array('Status', 'Timestamp', 'Subscriber', 'First Name', 'Last Name', 'DOB' , 'Country ', "Category");
$row = array();
$rows = array();
foreach($results as $result){
  $status = '';
  switch ($result->status) {
    case '0':
      $status = 'Unsubcribed';
      break;
    case '1':
      $status = 'Subcribed';
      break;

    case '2':
      $status = 'Not Confirmed';
      break;
  }
    $web_submission = array();
    $web_sub = db_select('webform_submitted_data', 'w')
    ->fields('w', array('sid'))
    ->condition('nid', $webform_nid,'=')
    ->condition('cid', '7', '=')
    ->condition('data', $result->mail,'=')
    ->orderBy('sid',"DESC")
     ->execute()
    ->fetchAssoc();
     $sid =  $web_sub['sid'];
     $web_submission = webform_get_submission($webform_nid, $sid);


  $row = array($status, format_date($result->timestamp), $result->mail, @$web_submission->data['1']['value']['0'], @$web_submission->data['2']['value']['0'],@$web_submission->data['4']['value']['0'], @$web_submission->data['5']['value']['0'], $result->name);
  $rows[$result->snid] = $row;
}


$form['simplenews_subscribers'] = array(
   '#type' => 'tableselect',
   '#header' => $header,
   '#options' => $rows,
   '#empty' => t("No any subscriber"),
  );
$form["pager"]= array("#markup" => theme('pager'));
$form['export'] = array(
    '#type' => 'markup',
    '#markup' => '<div>'.l('Export to CSV','admin/people/simplenews/data-export/'.$sn_status.'/'.$submmited['category']).'</div>',
    );

return $form;
}
function ismaili_custom_filter_simplenews($form, &$form_state){
  $category = $form_state['values']['category'];
  $query = array(
    'category' => $category,
  );
drupal_goto($_GET['q'], array('query' => $query));

}
function ismaili_custom_delete_simplenews($form, &$form_state){
 foreach($form_state['values']['simplenews_subscribers'] as $value){
  if(empty($value))
     continue;
   $query = db_select("simplenews_subscription","ss")->extend("PagerDefault")->limit(20);
    $query->fields("ss", array("timestamp","status","snid"));
    $query->leftJoin("simplenews_subscriber","ssb","ssb.snid = ss.snid");
    $query->fields("ssb",array("mail"))
          ->condition("ss.snid", $value);
    $subscriber = $query->execute()->fetchObject();
    if(is_object($subscriber))
      simplenews_subscriber_delete($subscriber);
    }
  drupal_set_message(t('Subscription deleted.'));
   $category = $form_state['values']['category'];
  $query = array(
    'category' => $category,
  );
drupal_goto($_GET['q'], array('query' => $query));

}


/*
* Look at hook_menu()
*/
function ismaili_custom_newsletter_unsubscription($form, $form_state){
   $form['unsb_text'] = array(
      '#markup' => t("Please enter your email address to confirm that you wish to unsubscribe from our mailing list."),
    );
    $form['email'] = array(
        '#type' => 'textfield',
        '#title' => t('Email'),
        '#required' => TRUE,
      );
    $form['unsubscribe'] = array(
        '#type' => 'submit',
        '#value' => t('Unsubscribe'),
      );
    return $form;
}

function ismaili_custom_newsletter_unsubscription_validate($form, &$form_state) {
  $email = $form_state['values']['email'];
  if (!valid_email_address($email)) {
    form_set_error("email", "Please enter valid Email");
  } else if (!simplenews_subscriber_load_by_mail($email)){
    form_set_error("email", t("There is no such subscription with this mail !email",array("!email" => $email)));
  }
}


function ismaili_custom_newsletter_unsubscription_submit($form, &$form_state) {
  $mail = $form_state['values']['email'];
  $category = simplenews_category_list();
  foreach ($category as $tid => $value) {
     simplenews_unsubscribe_user($mail, $tid, FALSE, 'website');
  }
  drupal_set_message(t("You unsbscribed successfully."));
}



function ismaili_custom_simplenewsletter_config($form, $form_state){
  $form['activation_msg'] = array(
       '#type' => 'textarea',
       '#title' => t('Activation message'),
       '#default_value' => variable_get('activation_msg', ''),
       '#description' => t('Use two tokens %mail and %newsletter to replace with actually data.'),
    );
   return system_settings_form($form);
}


function ismaili_custom_simplenews_confirm_submit($form, &$form_state) {
    $activation_msg = variable_get('activation_msg', '');
    if($activation_msg) {
      drupal_get_messages('status');
      $activation_msg = t($activation_msg, array('%mail' => $form_state['values']['mail'], '%newsletter' => _simplenews_newsletter_name($form_state['values']['newsletter'])));
      drupal_set_message(t($activation_msg), 'status', TRUE);
    }

}
/**
*Implementaion of hook_entity_update()
*/
function ismaili_custom_entity_update($entity, $type){
  ismaili_custom_registration_url_alias($entity, $type);
}

/**
*Implementaion of hook_entity_insert()
*/
function ismaili_custom_entity_insert($entity, $type){
    ismaili_custom_registration_url_alias($entity, $type);
}



function ismaili_custom_registration_url_alias($entity, $type) {
  if($type == 'node'){
      $is_registration = FALSE;
       $fields_info = field_info_instances($type, $entity->type);
       foreach ($fields_info as $field_name => $value) {
        $field_info = field_info_field($field_name);
        if($field_info['type'] == 'registration'){
             $is_registration = TRUE;
             break;
        }
      }
      $default_lang_code = language_default("language");
      if ($is_registration) {
        $source = 'node/' . $entity->nid.'/register';
         $n_alias = drupal_get_path_alias("node/".$entity->nid);
         $path = array(
            'source' => $source,
            'alias' => $n_alias.'/register',
            'language' => isset($entity->language) ? $entity->language : LANGUAGE_NONE,
          );
         $exist_path = path_load($source);
         if ($exist_path) {
              $path['pid'] = $exist_path['pid'];
         }
        path_save($path);
      }else if ($entity->tnid && $entity->tnid != $entity->nid && $entity->language != $default_lang_code){
         $source = 'node/'. $entity->nid;
         if ($entity->language == 'ar') {
           $n_alias = drupal_get_path_alias($source,$entity->language);
           $n_alias = $n_alias . '-ar';
         }
         else {
          $n_alias = drupal_get_path_alias($source,$entity->language);
         }

         $path = array(
            'source' => $source,
            'alias' => $n_alias,
            'language' => LANGUAGE_NONE,
          );
         $exist_path = path_load($source);
         if ($exist_path) {
              $path['pid'] = $exist_path['pid'];
         }
        path_save($path);
      }
    }
}


function ismaili_custom_registration_form_redirect($form, &$form_state) {
    $registration = $form_state['registration'];
    $wrapper = entity_metadata_wrapper('registration', $registration);
    $host = $wrapper->entity->value();
    $uri = entity_uri($registration->entity_type, $host);
    $form_state['redirect'] = $uri['path'];
  }


/**
 * Exports a CSV.
 *
 * @param array $variables
 *   An associative array of data containing "header" and "rows" keys.
 *   This is ready to be passed to theme_table(). See api.drupal.org/node/22950.
 *   Also contains the key "filename" specifying the filename.
 */
function _ismaili_custom_export_csv($variables) {
  drupal_add_http_header('Content-Type', 'text/csv; utf-8');
  drupal_add_http_header('Content-Disposition', 'attachment; filename=' . $variables['filename']);

  $output = '';
  $keys = array();
  foreach ($variables['header'] as $key => $value) {
    $keys[] = $value;
  }
  if ($keys) {
    $output .= implode(",", $keys) . "\n";
  }
  foreach ($variables['rows'] as $value) {
    $output .= implode(",", str_replace(",", "", $value)) . "\n";
  }
  print $output;
  exit;
}


function ismaili_custom_block_info() {
  $blocks = array();
  $blocks = array(
      'available_languages' => array(
      'info' => t('Available Languages'),
      'cache' => DRUPAL_NO_CACHE,
        ),
    );
  return $blocks;
}

function ismaili_custom_block_view($delta = ''  ) {
  $block = array();
  switch ($delta) {
    case 'available_languages':
      $block['subject'] = t('Available Languages');
      $block['content'] = _node_also_available_in();
      break;
  }
  return $block;
}

function _node_also_available_in() {
  global $language;
  $avail_languages;
  $lang_to_show = array();
  $languages = language_list();
  $node = menu_get_object();
  if(!is_object($node)) {
    return '';
  }
  $tnid = $node->tnid;
  $lang_array = array();
  $node_languages = translation_node_get_translations($tnid);
  if(isset($node_languages) && !empty($node_languages)) {
    foreach($node_languages as $lang_key => $lang_obj) {
      if($lang_key !== $node->language && $lang_obj->status !== 0) {
  $lang_array[$lang_key] = $lang_obj;
      }
    }
  }
  foreach ($lang_array as $key => $value) {
    if($value->status != 0){
      $avail_languages[$key]=$value;
    }
  }
  $html = array();
  if(!empty($avail_languages) && $node->status != 0) {
    foreach($avail_languages as $lang_key => $lang_obj) {
      $link = 'node/' . $lang_obj->nid;
      $html[] = l($languages[$lang_key]->native, $link, array('language' => $languages[$lang_key]));
      $theme_args = array('items' => $html, 'type' => 'ul');
      $content = theme('item_list', $theme_args);
    }
  }
  else {
    $content = '';
  }
  return $content;
}
/**
 * [Alters the workbench moderation access]
 * @param  [type] &$access access to the work bench
 * @param  [permission] $op operation permissions
 * @param  [object] $node    node object for node data access
 * @return [boolean]
 */
function ismaili_custom_workbench_moderation_access_alter(&$access, $op, $node) {
  if ($op == 'view revisions' && user_access('view revisions')){
    $access = TRUE;
  }
  elseif ($op == 'draft') {
    $access = TRUE;
  }
}




