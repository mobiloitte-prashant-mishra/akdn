<?php

/**
 * @file
 *   Custom module for nutrition centre traffic lights.
 */

define('CACHE_TRAFFIC_LIGHT', 'cache_traffic_light');


/**
* Implementation of hook_menu().
*/
function ismaili_traffic_lights_menu() {
  $items['admin/config/ismaili-settings'] = array(
    'title' => 'Ismaili Settings',
    'description' => 'Adjust Ismaili settings.',
    'position' => 'right',
    'weight' => -5,
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('General setting'),
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
    );
  $items['admin/config/ismaili-settings/traffic-lights'] = array(
    'title' => 'Traffic Lights',
    'description' => 'Configure traffic lights.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ismaili_traffic_lights_settings'),
    'access arguments' => array('General setting'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'ismaili_traffic_lights.admin.inc',
  );
  $items['admin/config/ismaili-settings/traffic-lights-general'] = array(
    'title' => 'General settings',
    'description' => 'Trffic light settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ismaili_traffic_lights_config'),
    'access arguments' => array('General setting'),
  );
  return $items;
}

/**
 * Implements hook_permission().
 */
function ismaili_traffic_lights_permission() {
  return array(
    'General setting' => array(
      'title' => t('General setting for Nutrition Centre'),
      'description' => t('Set the various configuration.'),
    ),
  );
}

/**
 * General setting.
 */
function ismaili_traffic_lights_config($form_state) {
  $traffic_light_labels = "L,Low;M,Med;H,High;sfat_light,Saturated Fat;fat_light,Fat;sugar_light,Sugar;salt_light,Salt;";
  $traffic_light_positions = "saturates,1;salt,3;fat,0;sugar,2;";
  $traffic_light_nutrients_positions = "calories,0;protein,1;fat,2;fibre,8;salt,10;saturates,3;sugar,7;calcium,12;iron,11;cholesterol,5;trans_fat,4;sodium,9;carbohydrate,6;";
  //Nutrient per serving
  $ismaili_traffic_lights_nutrients_serving = "sfat_nutrient,saturates,Saturated Fat;fat_nutrient,fat,Fat Nutrient;sugar_nutrient,sugar,Sugar;salt_nutrient,salt,Salt;";
  //Nutrient per 100gm/Actual
  $ismaili_traffic_lights_nutrients_actual = "sfat_nutrients,saturates,Saturated Fat;fat_nutrients,fat,Fat Nutrient;sugar_nutrients,sugar,Sugar;salt_nutrients,salt,Salt;";

  $ismaili_traffic_lights_traffic_field = "salt_light,salt,Salt;sugar_light,sugar,Sugar;fat_light,fat,Fat;sfat_light,saturates,Saturated;";

  $traffic_light_factor = "default,100;calories,100;";
  $form['ismaili_traffic_lights_ismaili_label'] = array(
    '#type' => 'textfield',
    '#title' => t('Set the Label for Ismaili Center'),
    '#description' => t('Pass the label.'),
    '#default_value' => variable_get('ismaili_traffic_lights_ismaili_label', 'The Ismaili Center'),
    '#required' => FALSE
  );
  $form['ismaili_traffic_lights_labels'] = array(
    '#type' => 'textarea',
    '#title' => t('Traffic Light Labels'),
    '#description' => t('Separate each section by semicolon. individual by comma. e.g L,Low;M,Med;H,High;'),
    '#default_value' => variable_get('ismaili_traffic_lights_labels', $traffic_light_labels),
    '#required' => FALSE
  );
  $format = t('<br />Format: field_name,machine_name,Label;');
  $description = t('Separate each section by semicolon. individual by comma. e.g salt_light,salt,Salt;sugar_light,sugar,Sugar;fat_light,fat,Fat;sfat_light,saturates,Saturated;');

  $form['ismaili_traffic_lights_traffic_field'] = array(
    '#type' => 'textarea',
    '#title' => t('Traffic Light Fields'),
    '#description' => $description . $format,
    '#default_value' => variable_get('ismaili_traffic_lights_traffic_field', $ismaili_traffic_lights_traffic_field),
    '#required' => FALSE
  );

  $description = t('Separate each section by semicolon. individual by comma. e.g sfat_nutrient,saturates,Saturated Fat;fat_nutrient,fat,Fat Nutrient;sugar_nutrient,sugar,Sugar;salt_nutrient,salt,Salt;');
  $form['ismaili_traffic_lights_nutrients_serving'] = array(
    '#type' => 'textarea',
    '#title' => t('Traffic Light Nutrients/Serving'),
    '#description' => $description . $format,
    '#default_value' => variable_get('ismaili_traffic_lights_nutrients_serving', $ismaili_traffic_lights_nutrients_serving),
    '#required' => FALSE
  );

  $description = t('Separate each section by semicolon. individual by comma. e.g sfat_nutrients,saturates,Saturated Fat;fat_nutrients,fat,Fat Nutrient;sugar_nutrients,sugar,Sugar;salt_nutrients,salt,Salt;');
  $form['ismaili_traffic_lights_nutrients_actual'] = array(
    '#type' => 'textarea',
    '#title' => t('Traffic Light Nutrients/100gm (actual)'),
    '#description' => $description . $format,
    '#default_value' => variable_get('ismaili_traffic_lights_nutrients_actual', $ismaili_traffic_lights_nutrients_actual),
    '#required' => FALSE
  );
  $form['ismaili_traffic_lights_positions'] = array(
    '#type' => 'textarea',
    '#title' => t('Traffic Light Position'),
    '#description' => t('Separate each section by semicolon. individual by comma. e.g saturates,0;salt,1;fibre,2;fat,3;sugar,4;'),
    '#default_value' => variable_get('ismaili_traffic_lights_positions', $traffic_light_positions),
    '#required' => FALSE
  );
  $form['ismaili_traffic_lights_nutrients_positions'] = array(
    '#type' => 'textarea',
    '#title' => t('Traffic Light nutrient Positions'),
    '#description' => t('Separate each Machine name of Nutrient by semicolon. individual by comma. e.g calories,0;carbohydrate,1;fat,2;fibre,3;protein,4;salt,5;saturates,6;sugar,7;sugars,8;'),
    '#default_value' => variable_get('ismaili_traffic_lights_nutrients_positions', $traffic_light_nutrients_positions),
    '#required' => FALSE
  );
  $form['ismaili_traffic_lights_factor'] = array(
    '#type' => 'textarea',
    '#title' => t('Traffic Light Factor for nutrient calculation per serving'),
    '#description' => t('Separate each section by semicolon. individual by comma. e.g L,Low;M,Med;H,High;'),
    '#default_value' => variable_get('ismaili_traffic_lights_factor', $traffic_light_factor),
    '#required' => FALSE
  );
  return system_settings_form($form);
}

/**
 * Get various Traffic lights nutrients positions
 * @return [type]      [description]
 */
function ismaili_traffic_lights_determine_nutrients_positions() {
  $traffic_light_nutrients_positions = "calories,0;protein,1;fat,2;fibre,8;salt,10;saturates,3;sugar,7;calcium,12;iron,11;cholesterol,5;trans_fat,4;sodium,9;carbohydrate,6;";
  $traffic_light_nutrient_position = variable_get('ismaili_traffic_lights_nutrients_positions', $traffic_light_nutrients_positions);
  $traffic_light_nutrient_position_arr = explode(";", $traffic_light_nutrient_position);
  $traffic_light_nutrient_position_mapping = array();
  foreach($traffic_light_nutrient_position_arr as $pos => $data) {
    $data_arr = explode(",", $data);
    $key = $data_arr[0];
    $nid = (isset($data_arr[1])) ? $data_arr[1] : '';
    $name = (isset($data_arr[2])) ? $data_arr[2] : '';
    if (empty($key)) {
      continue;
    }
    $traffic_light_nutrient_position_mapping[$key]['position'] = $nid;
    $traffic_light_nutrient_position_mapping[$key]['name'] = $name;
  }
  return $traffic_light_nutrient_position_mapping;
}

/**
 * Function to display the nutrient value.
 * @param: $property: property of the entity.
 */
function ismaili_traffic_lights_calculate_nutrient_value($property) {
  $list = array();
  $i = 0;
  $position_mapping = ismaili_traffic_lights_determine_nutrients_positions();
  
  $value_span = "<span class='nutrient-value'>";
  $unit_span = "<span class='nutrient-unit'>";
  $close_span = "</span>";
  $hide_fields = variable_get('hide_nutrient_field', array());
  $tooltip_data = variable_get('nutrient_tooltip', array());
  foreach ($property['field_nutrient_data:field_nutrient_element:title'] as $title) {
    $machine_name = $property['field_nutrient_data:field_nutrient_element:nutrient_machine_name'][$i];
    $unit = $property['field_nutrient_data:field_nutrient_element:field_unit'][$i];
    if (isset($hide_fields[$machine_name]) and $hide_fields[$machine_name] == 1) {
      $i++;
      continue;
    }
    $tooltip = (isset($tooltip_data[$machine_name]) ) ? $tooltip_data[$machine_name] : '';
    $machine_span = "<span class='nutrient-machine-name' title='$tooltip'>";
    $unit_label = ismaili_traffic_lights_get_label($unit);
    $pos = ($position_mapping[$machine_name]['position']);
    $nutrient_value = $property['field_nutrient_data:field_nutrient_val'][$i];
    $nutrient_value = ismaili_traffic_lights_get_nutrient_rounded_data($nutrient_value, $machine_name, 1);
    $list[$pos] = $machine_span . $title . $close_span . $value_span .
      $nutrient_value . $close_span . $unit_span . $unit_label . $close_span;
    $i++;
  }
  $nutrient_data = array();
  $positions = array_keys($list);
  sort($positions);
  for($ctr = 0; $ctr < count($list); $ctr++) {
    $pos = $positions[$ctr];
    $nutrient_data[$ctr] = $list[$pos];
  }
  $theme_args = array('items' => $nutrient_data, 'type' => 'ul');
  $content = theme('item_list', $theme_args);
  $output .= $content;
  return $output;
}

/**
 * Get label for the passed key.
 */
function ismaili_traffic_lights_get_label($key) {
  $label_mapping = ismaili_traffic_lights_determine_light_labels();
  $label = ($label_mapping[$key]['label'] != '') ? $label_mapping[$key]['label'] : $key;
  return $label;
}

/**
 * Implements of hook_flush_caches().
 */
function ismaili_traffic_lights_flush_caches() {
  return array(CACHE_TRAFFIC_LIGHT);
}

/**
 * Function to calculate the color of the traffic light.
 * @param: $property: property of the entity.
 */
function ismaili_traffic_lights_calculate_color($property, $type) {
  $list = array();
  $i = 0;
  $percentage = "";
  $background = "";
  $machine_names = $property['field_nutrient_data:field_nutrient_element:nutrient_machine_name'];
  $traffic_light = $property['field_nutrient_data:field_nutrient_element:field_traffic_light'];
  $weight = $property['field_nutrient_data:field_nutrient_element:field_weight'];
  $nutrient_val = $property['field_nutrient_data:field_nutrient_val'];
  $unit = $property['field_nutrient_data:field_nutrient_element:field_unit'];
  $i = 0;
  $traffic_counter = 0;
  $serving_wt = $property['field_serving_weight'][0];
  if ($serving_wt == '' or $serving_wt == 0) {
    $serving_wt = 100;
  }
  if ($type == 'table') {
    $list['0'] = l($property['string_title'], 'node/' . $property['nid']);
  }
  $label_mapping = ismaili_traffic_lights_determine_light_labels();
  $traffic_light_position_mapping = ismaili_traffic_lights_determine_positions();
  $per_portion = $serving_wt > 100 ? 1 : 0;
  if ($property['field_type_of_food'] == 'drink') {
    $per_portion = $serving_wt > 150 ? 1 : 0;
  }
  $tooltip_data = variable_get('nutrient_tooltip', array());
  $hide_fields = variable_get('hide_nutrient_field', array());
  foreach ($machine_names as $machine_name) {
    if ($traffic_light[$i]) {
      // Hide if it is marked not to show.
      if (isset($hide_fields[$machine_name]) and $hide_fields[$machine_name] == 1) {
        $i++;
        continue;
      }
      $tooltip = (isset($tooltip_data[$machine_name]) ) ? $tooltip_data[$machine_name] : '';
      $nutrient_value = ($nutrient_val[$i] * 100)/$serving_wt;
      $nutrient_value = round($nutrient_value, 1);
      //change.Added orignal value
      $recipe_data = array(
        'machine_name' => $machine_name,
        'type_of_food' => $property['field_type_of_food'],
        'nutrient_value' => $nutrient_value,
        'per_portion' => $per_portion,
        'original_value' => $nutrient_val[$i],
      );
      $title = (isset($property['field_nutrient_data:field_nutrient_element:field_short_title'][$i])) ? $property['field_nutrient_data:field_nutrient_element:field_short_title'][$i] : $property['field_nutrient_data:field_nutrient_element:title'][$i];
      $traffic_data = ismaili_traffic_light_compare($recipe_data);
      $percentage = $traffic_data['percentage'];
      $background = $traffic_data['color'];
      $label_key = $traffic_data['label'];
      $traffic_data['label'] = $label_mapping[$label_key]['label'];
      if ($type == 'list') {
        $pos = (isset($traffic_light_position_mapping[$machine_name])) ? $traffic_light_position_mapping[$machine_name]['position']: 0;
        $list[$pos] = "<div class='nutient-wrapper' title='$tooltip' style='background:$background;'>";
        $list[$pos] .= '<div class="nutrient-label">' . $title . '</div>' ;
        $list[$pos] .= '<div class="nutrient-color-label">' . $traffic_data['label']. '</div>' ;
        $list[$pos] .= '</div>';
      }
      else if($type == 'table') {
       $list[$weight[$i]] = '<div class="traffic-container">
        <span class="traffic-light"; style="width:' . $percentage . '; background:' . $background . ';">' .
        $nutrient_value . '</span>' . '</div>';
      }
      $traffic_counter++;
    }
    $i++;
  }
  $traffic_data = array();
  $positions = array_keys($list);
  sort($positions);
  for($ctr = 0; $ctr < count($list); $ctr++) {
    $pos = $positions[$ctr];
    $traffic_data[$ctr] = $list[$pos];
  }
  $theme_args = array('items' => $traffic_data, 'type' => 'ul');
  $content = theme('item_list', $theme_args);
  $output .= $content;
  return $output;
}


/**
 * Comparison function.
 * @param: $data: An associative array containing recipe nutrition values.
 *        $data = array(
 *          'machine_name' => 'fat',  // machine name of the nutrient.(e.g: fat, salt),
 *          'type_of_food' => 'food', // values can be food/drink.
 *          'nutrient_value' => '2.5', //
 *          'per_portion' => '1', // 0/1
 *        )
 * @return: $traffic_data: An associative array of color and the percentage value.
 */
function ismaili_traffic_light_compare($data) {
  $nutrient = ismaili_traffic_lights_get_nutrient_data(0);
  $traffic_data = array();
  $machine_name = $data['machine_name'];
  $type_of_food = $data['type_of_food'];
  $nutrient_value = $data['nutrient_value'];
  $original_value = $data['original_value'];

  $traffic_data['percentage'] = 100;
  if ($traffic_data['percentage'] > 100) {
    $traffic_data['percentage'] = 100;
  }
  $traffic_data['percentage'] = $traffic_data['percentage'] .'%';
  if ($nutrient_value <= $nutrient[$machine_name][$type_of_food]['low']) {
    $traffic_data['color'] = variable_get('ismaili_low', '#00FF00');
    $traffic_data['label'] = t('l');
  }
  else if ($nutrient_value > $nutrient[$machine_name][$type_of_food]['low'] &&
    $nutrient_value <= $nutrient[$machine_name][$type_of_food]['mid']) {
    $traffic_data['color'] = variable_get('ismaili_medium', '#FFBF00');
    $traffic_data['label'] = t('m');
  }

  if ($data['per_portion'] && $original_value > $nutrient[$machine_name][$type_of_food]['high_portion'] ) {
    $traffic_data['color'] = variable_get('ismaili_high', '#FF0000');
    $traffic_data['label'] = t('h');
  }

  else {
    if ($nutrient_value > $nutrient[$machine_name][$type_of_food]['high_100']) {
      $traffic_data['color'] = variable_get('ismaili_high', '#FF0000');
      $traffic_data['label'] = t('h');
    } 
    else if ($nutrient_value > $nutrient[$machine_name][$type_of_food]['low']) {
      $traffic_data['color'] = variable_get('ismaili_medium', '#FFBF00');
      $traffic_data['label'] = t('m');
    } else {
      $traffic_data['color'] = variable_get('ismaili_low', '#00FF00');
      $traffic_data['label'] = t('l');
    }
  }
  return $traffic_data;
}

/**
 * Implements hook_entity_property_info_alter().
 */
function ismaili_traffic_lights_entity_property_info_alter(&$info) {
  $info['node']['properties']['nutrient_machine_name'] = array(
    'type' => 'text',
    'label' => t('Nutrient machine name'),
    'getter callback' => 'ismaili_traffic_lights_get_machine_name',
  );
  $info['node']['properties']['string_title'] = array(
    'type' => 'text',
    'label' => t('String title'),
    'getter callback' => 'ismaili_traffic_lights_get_title',
  );
    $info['node']['properties']['node_title'] = array(
    'type' => 'text',
    'label' => t('Title of the node [used for search]'),
    'getter callback' => 'ismaili_traffic_lights_node_title',
  );
  $info['node']['properties']['ctype'] = array(
    'type' => 'text',
    'label' => t('Type of the node [Custom]'),
    'getter callback' => 'ismaili_traffic_lights_ctype',
  );
  $info['node']['properties']['cmicrosite'] = array(
    'type' => 'text',
    'label' => t('Name of the Microsite [Custom]'),
    'getter callback' => 'ismaili_traffic_lights_cmicrosite',
  );

  // Recipe Traffic light.
  $recipe_nutrient_lights_mapping = ismaili_traffic_lights_determine_mappings('ismaili_traffic_lights_traffic_field', "salt_light,salt,Salt;sugar_light,sugar,Sugar;fat_light,fat,Fat;sfat_light,saturates,Saturated;");
  foreach ($recipe_nutrient_lights_mapping  as $field => $data) {
    $info['node']['properties'][$field] = array(
      'type' => 'text',
      'label' => t($data['label'] . ' [Traffic Light]'),
      'getter callback' => 'ismaili_traffic_lights_nutrients_light',
    );
  }

  // Recipe Nutrient per Serving.
  $recipe_nutrient_mapping = ismaili_traffic_lights_determine_mappings('ismaili_traffic_lights_nutrients_serving', "sfat_nutrient,saturates,Saturated Fat;fat_nutrient,fat,Fat Nutrient;sugar_nutrient,sugar,Sugar;salt_nutrient,salt,Salt;");
  foreach ($recipe_nutrient_mapping  as $field => $data) {
    $info['node']['properties'][$field] = array(
      'type' => 'text',
      'label' => t($data['label'] . ' [Traffic Light Nutrient/Serving]'),
      'getter callback' => 'ismaili_traffic_lights_nutrients_nutrient_per_serving',
    );
  }

  // Recipe Nutrient per 100gm or say actual data.
  $recipe_nutrient_mapping_actual = ismaili_traffic_lights_determine_mappings("ismaili_traffic_lights_nutrients_actual","sfat_nutrients,saturates,Saturated Fat;fat_nutrients,fat,Fat Nutrient;sugar_nutrients,sugar,Sugar;salt_nutrients,salt,Salt;");
  foreach ($recipe_nutrient_mapping_actual  as $field => $data) {
    $info['node']['properties'][$field] = array(
      'type' => 'text',
      'label' => t($data['label'] . ' [Traffic Light Nutrient/100gm]'),
      'getter callback' => 'ismaili_traffic_lights_nutrients_nutrient_per_100gm',
    );
  } 

}

/**
 * Get Recipe Nutrient value/Per 100gm
 * @param  [type] $node [description]
 * @return [type]       [description]
 */
function ismaili_traffic_lights_nutrients_nutrient_per_100gm($node, array $options, $name, $type, $info) {
  //Get per 100gm nutrient data .ie. actual data
  $field_mapping = ismaili_traffic_lights_determine_mappings("ismaili_traffic_lights_nutrients_actual","sfat_nutrients,saturates,Saturated Fat;fat_nutrients,fat,Fat Nutrient;sugar_nutrients,sugar,Sugar;salt_nutrients,salt,Salt;");
  $machine_name = (isset($field_mapping[$name]['name'])) ? $field_mapping[$name]['name'] : '';
  return ismaili_traffic_lights_determine_nutrient($node, $name, $machine_name, 1);
}

/**
 * Get Saturated Fat Light Nutrient value
 * @param  [type] $node [description]
 * @return [type]       [description]
 */
function ismaili_traffic_lights_nutrients_nutrient_per_serving($node,  array $options, $name, $type, $info) {
  $field_mapping = ismaili_traffic_lights_determine_mappings('ismaili_traffic_lights_nutrients_serving', "sfat_nutrient,saturates,Saturated Fat;fat_nutrient,fat,Fat Nutrient;sugar_nutrient,sugar,Sugar;salt_nutrient,salt,Salt;");
  //Get per serving nutrient data
  $machine_name = (isset($field_mapping[$name]['name'])) ? $field_mapping[$name]['name'] : '';
  return ismaili_traffic_lights_determine_nutrient($node, $name, $machine_name, 0);
}

/**
 * Get Traffic Light Nutrient value of the specific nutrient of the Recipe.
 * @param  [type] $node       [description]
 * @param  string $field_name [description]
 * @return [type]             [description]
 */
function ismaili_traffic_lights_determine_nutrient($node, $field_name, $machine_name, $per_serving = 0) {
  if ($node->type != 'recipe') {
    return;
  }
  if (empty($field_name) or (empty($machine_name))) {
    return;
  }
  $serving_wt = $node->field_serving_weight[LANGUAGE_NONE][0]['value'];
  $traffic_data = ismaili_traffic_lights_get_nutrient_data_receipe($node, 36);
  // Return actual nutrient data for per serving
  if ($per_serving == 0) {
    $nutrient_value = (isset($traffic_data[$machine_name]['nutrient'])) ? $traffic_data[$machine_name]['nutrient'] : '';
    $nutrient_value = ismaili_traffic_lights_get_nutrient_rounded_data($nutrient_value, $machine_name);
    return $nutrient_value;
  }

  //Process for per serving weight
  $factors = ismaili_traffic_lights_determine_factor();
  $multiply_weight = 1.0;
  if (in_array($machine_name, $factors)) {
    $factor = $factors[$machine_name]['factor'];
  } else {
    $factor = $factors['default']['factor'];
  }
  if ($serving_wt > 0) {
    $multiply_weight = ($factor/$serving_wt);
  }
  $nutrient_value = round($traffic_data[$machine_name]['nutrient'] * $multiply_weight, 2);
  $nutrient_value = ismaili_traffic_lights_get_nutrient_rounded_data($nutrient_value, $machine_name);
  return $nutrient_value;
}

/**
 * Get Nutrient data rounded per specification
 * @param  [type] $nutrient_value [description]
 * @param  [type] $machine_name   [description]
 * @return [type]                 [description]
 */
function ismaili_traffic_lights_get_nutrient_rounded_data($nutrient_value, $machine_name, $skip = 0) {
  if ($nutrient_value == 0 and $skip != 1) {
    return 'N';
  }
  switch ($machine_name) {
    case 'calories':
      $nutrient_value = number_format((float)$nutrient_value, 0, '.', '');
      break;
    case 'sodium':
      $nutrient_value = number_format((float)$nutrient_value, 2, '.', '');
      break;
    default:
      $nutrient_value = number_format((float)$nutrient_value, 1, '.', '');
  }
  return $nutrient_value;
}

/**
 * Get Nutrient data
 * @param  [type] $node [description]
 * @return [type]       [description]
 */
function ismaili_traffic_lights_nutrients_light($node, array $options, $name, $type, $info) {
  return ismaili_traffic_lights_determine_light($node, $name);
}

/**
 * Get Traffic Light color of the specific nutrient of the Recipe
 * @param  [type] $node       [description]
 * @param  string $field_name [description]
 * @return [type]             [description]
 */
function ismaili_traffic_lights_determine_light($node, $field_name = 'fat') {
  if ($node->type != 'recipe') {
    return;
  }
  $traffic_data = ismaili_traffic_lights_get_nutrient_data_receipe($node, 36);
  switch ($field_name) {
    case 'salt_light':
      $machine_name = 'salt';
      break;
    case 'fat_light':
      $machine_name = 'fat';
      break;
    case 'sfat_light':
      $machine_name = 'saturates';
      break;
    case 'sugar_light':
      $machine_name = 'sugar';
      break;
    case 'fibre_light':
      $machine_name = 'fibre';
      break;
  }
  if (isset($traffic_data[$machine_name]['traffic'])) {
    return $traffic_data[$machine_name]['traffic'];
  }
}


/**
 * Get various Traffic lights nutrient factor
 * @return [type]      [description]
 */
function ismaili_traffic_lights_determine_factor() {
  $traffic_light_factor = "default,100;calories,100;";
  $traffic_light_factor = variable_get('ismaili_traffic_lights_factor', $traffic_light_factor);
  $traffic_light_factor_arr = explode(";", $traffic_light_factor);
  $traffic_light_factor_mapping = array();
  foreach($traffic_light_factor_arr as $pos => $data) {
    $data_arr = explode(",", $data);
    $key = $data_arr[0];
    $nid = (isset($data_arr[1])) ? $data_arr[1] : '';
    $name = (isset($data_arr[2])) ? $data_arr[2] : '';
    if (empty($key)) {
      continue;
    }
    $traffic_light_factor_mapping[$key]['factor'] = $nid;
  }
  return $traffic_light_factor_mapping;
}

/**
 * Get various Traffic lights positions
 * @return [type]      [description]
 */
function ismaili_traffic_lights_determine_positions() {
  $traffic_light_positions = "saturates,1;salt,3;fat,0;sugar,2;";
  $traffic_light_position = variable_get('ismaili_traffic_lights_positions', $traffic_light_positions);
  $traffic_light_position_arr = explode(";", $traffic_light_position);
  $traffic_light_position_mapping = array();
  foreach($traffic_light_position_arr as $pos => $data) {
    $data_arr = explode(",", $data);
    $key = $data_arr[0];
    $nid = (isset($data_arr[1])) ? $data_arr[1] : '';
    $name = (isset($data_arr[2])) ? $data_arr[2] : '';
    if (empty($key)) {
      continue;
    }
    $traffic_light_position_mapping[$key]['position'] = $nid;
    $traffic_light_position_mapping[$key]['name'] = $name;
  }
  return $traffic_light_position_mapping;
}

/**
 * Get Labels of various Traffic lights and Labels
 * @param  string $key [description]
 * @return [type]      [description]
 */
function ismaili_traffic_lights_determine_light_labels($key = '') {
  $traffic_light_labels = "L,Low;M,Med;H,High;sfat_light,Saturated Fat;fat_light,Fat;sugar_light,Sugar;salt_light,Salt;";
  $traffic_light_label = variable_get('ismaili_traffic_lights_labels', $traffic_light_labels);
  $traffic_light_label_arr = explode(";", $traffic_light_label);
  $traffic_light_label_mapping = array();
  foreach($traffic_light_label_arr as $pos => $data) {
    $data_arr = explode(",", $data);
    if (!isset($data_arr[0])) {
      continue;
    }
    $key = drupal_strtolower($data_arr[0]);
    $nid = (isset($data_arr[1])) ? $data_arr[1] : '';
    $name = (isset($data_arr[2])) ? $data_arr[2] : '';
    if (empty($nid)) {
      continue;
    }
    $traffic_light_label_mapping[$key]['label'] = $nid;
  }
  return $traffic_light_label_mapping;
}

/**
 * Get the Microsite name
 * so that it can be searched.
 */
function ismaili_traffic_lights_cmicrosite($node) {
  $tid = (isset($node->field_microsite[LANGUAGE_NONE][0]['tid'])) ? $node->field_microsite[LANGUAGE_NONE][0]['tid'] : '';
  if ($tid) {
    $name = db_query("SELECT name from  {taxonomy_term_data} WHERE tid = :tid",
    array(':tid' => $tid))->fetchField();
    $name = str_ireplace("-", "", $name);
    if ($tid == 11) {
      $name = t(variable_get('ismaili_traffic_lights_ismaili_label', 'The Ismaili Center'));
    }
    return t($name);
  }
}

/**
 * Get custom content type
 * so that it can be searched/shown on the filter.
 */
function ismaili_traffic_lights_ctype($node) {
  switch($node->type) {
    case 'article':
      $output = ismaili_traffic_lights_get_node_type_label();
      $article_type = $node->field_article_type['und']['0']['tid'];
      if ($article_type == '9076') {
        $output = t('Video');
      }
      break;
    case 'parent_compound_articles':
    case 'page':
      $output = ismaili_traffic_lights_get_node_type_label();
      break;
    default:
      $output = ismaili_traffic_lights_get_node_type_label($node->type);
  }
  return $output;
}

/**
 * Get the title of the node type.
 * so that it can be searched.
 */
function ismaili_traffic_lights_get_node_type_label($type = 'article') {
  $name = db_query("SELECT name from  {node_type} WHERE type = :type",
    array(':type' => $type))->fetchField();
  return t($name);
}

/**
 * Get the title of the node.
 * so that it can be serched.
 */
function ismaili_traffic_lights_node_title($node) {
  return $node->title;
}

/**
 * Function to create the title. This title has to saved in string format.
 * so that it can be sorted.
 */
function ismaili_traffic_lights_get_title($node) {
  if ($node->type == 'recipe') {
    return $node->title;
  }
}

/**
 * Function to get the machine name of the nutrient.
 */
function ismaili_traffic_lights_get_machine_name($node) {
  if ($node->type == 'nutrient') {
    return $node->field_machine_name[LANGUAGE_NONE][0]['value'];
  }
}

/**
 * Function to get the constituents of the field collection.
 */
function ismaili_traffic_lights_get_constituents($fcid) {
  $nutrient_val = db_query('SELECT field_value_value FROM {field_data_field_value} WHERE
    entity_id = :entity_id', array(':entity_id' => $fcid))->fetchField();
  return $nutrient_val;
}

/**
 * Store the data in cache for each Nutrient retrieved.
 * @return string
 */
function ismaili_traffic_lights_get_nutrient_data($interval_hour = "36") {
  $key = 'nutrient_details';
  $data = "";
  $content = cache_get($key, CACHE_TRAFFIC_LIGHT);
  $reload_tree = (isset($content->created)) ? ismaili_traffic_lights_get_tree_status($content->created, $interval_hour) : TRUE;
  if ($reload_tree == FALSE) { // If timeout has not happened check for data presence
    $data = $content->data;
    if (($fetch == 1) && ($content->data == 0)) {
      $reload_tree = TRUE;
    }
  }
  if ($reload_tree == TRUE) {
    $data = ismaili_traffic_lights_get_all_nutrient_info();
    cache_set($key, $data, CACHE_TRAFFIC_LIGHT);
  }
  return $data;
}

/**
 * Get all Nutrient information.
 * Query the content type recipe to get all nutrient values to be saved into
 * an array.
 * @return:
 */
function ismaili_traffic_lights_get_all_nutrient_info() {
  $nutrient_data = array();
  $nids = db_query('SELECT entity_id from {field_data_field_traffic_light} WHERE
    field_traffic_light_value = :value', array(':value' => 1))->fetchCol();
  $nodes = node_load_multiple($nids);
  foreach ($nodes as $node) {
    $machine_name = $node->field_machine_name[LANGUAGE_NONE]['0']['value'];
    $nutrient_data[$machine_name] = array(
      'food' => array(
        'low' => $node->field_food_low[LANGUAGE_NONE]['0']['value'],
        'mid' => $node->field_food_medium[LANGUAGE_NONE]['0']['value'],
        'high_100' => $node->field_food_per_100_gm[LANGUAGE_NONE]['0']['value'],
        'high_portion' => $node->field_food_per_portion[LANGUAGE_NONE]['0']['value'],
        'ri' => $node->field_food_ri[LANGUAGE_NONE]['0']['value'],
      ),
      'drink' => array(
        'low' => $node->field_drink_low[LANGUAGE_NONE]['0']['value'],
        'mid' => $node->field_drink_medium[LANGUAGE_NONE]['0']['value'],
        'high_100' => $node->field_drink_per_100_gm[LANGUAGE_NONE]['0']['value'],
        'high_portion' => $node->field_drink_per_portion[LANGUAGE_NONE]['0']['value'],
        'ri' => $node->field_drink_ri[LANGUAGE_NONE]['0']['value'],
      ),
    );
  }
  return $nutrient_data;
}

/**
 * Check the generation time in the cache
 * @param type $time_key
 * @param type $interval_hour
 * @return boolean
 */
function ismaili_traffic_lights_get_tree_status($last_execution_time, $interval_hour = .2) {
  $elapsed_time = '';
  $allowed_difference = 60 * 60 * $interval_hour; // Reload at each 3 hour
  $reload_tree = FALSE;
  if (empty($last_execution_time)) {
    $reload_tree = TRUE;
  } else {
    $elapsed_time = time() - $last_execution_time;
    if ($elapsed_time >= $allowed_difference) {
      $reload_tree = TRUE;
    }
  }
  return $reload_tree;
}

/**
 * Get the Recipe Nutrient information.
 * @param  [type] $node [description]
 * @return [type]       [description]
 */
function ismaili_traffic_lights_get_nutrient_receipe_info($node) {
  foreach ($node->field_nutrient_data['und'] as $pos => $coll_data) {
    $collection_id = ($collection_id == '') ? $coll_data['value'] : $collection_id .',' . $coll_data['value'];
  }
  $output = array();
  $output['food_type'] = $node->field_type_of_food[LANGUAGE_NONE][0]['value'];
  $serving_wt = $node->field_serving_weight[LANGUAGE_NONE][0]['value'];
  if ($serving_wt == '' or $serving_wt == 0) {
    $serving_wt = 100;
  }
  $per_portion = $serving_wt > 100 ? 1 : 0;
  if ($output['food_type'] == 'drink') {
    $per_portion = $serving_wt > 150 ? 1 : 0;
  }
  if (empty($collection_id)) {
    return $output ;
  }
  $query = "select v.field_nutrient_val_value, n.entity_id, 
    field_machine_name_value from field_data_field_machine_name m 
    left join field_data_field_nutrient_element n 
    ON ( m.entity_id=n.field_nutrient_element_nid) 
    left join field_data_field_nutrient_val v on (n.entity_id=v.entity_id)
    WHERE n.entity_id in ( $collection_id )";
  $result = db_query($query);
  $position = 0;
  foreach($result as $data) {
    $key = $data->field_machine_name_value;
    $output[$key]['nutrient'] = $data->field_nutrient_val_value;
    $nutrient_value = ($data->field_nutrient_val_value * 100)/$serving_wt;
    $nutrient_value = round($nutrient_value , 1);
    //change added orignal value
    $recipe_data = array(
        'machine_name' => $key,
        'type_of_food' => $output['food_type'],
        'nutrient_value' => $nutrient_value,
        'per_portion' => $per_portion,
        'original_value' => $data->field_nutrient_val_value,
      );
    $traffic_data = ismaili_traffic_light_compare($recipe_data);
    $output[$key]['traffic'] = $traffic_data['label'];
  }
  $output['full'] = 1;
  return $output;
}

/**
 * Store the Recipe nutrent data in cache for the Recipe.
 * @param  [type] $node          [description]
 * @param  string $interval_hour [description]
 * @return [type]                [description]
 */
function ismaili_traffic_lights_get_nutrient_data_receipe($node, $interval_hour = "36") {
  $key = 'recipe_' . $node->nid;
  $data = "";
  $content = cache_get($key, CACHE_TRAFFIC_LIGHT);
  $reload_tree = (isset($content->created)) ? ismaili_traffic_lights_get_tree_status($content->created, $interval_hour) : TRUE;
  if ($reload_tree == FALSE) { // If timeout has not happened check for data presence
    $data = $content->data;
    if (($fetch == 1) && ($content->data == 0)) {
      $reload_tree = TRUE;
    }
  }
  if ($reload_tree == TRUE) {
    $data = ismaili_traffic_lights_get_nutrient_receipe_info($node);
    cache_set($key, $data, CACHE_TRAFFIC_LIGHT);
  }
  return $data;
}

/**
 * Handle Facet labels
 * @param [type] $build    [description]
 * @param [type] $settings [description]
 */
function ismaili_traffic_lights_facet_items_alter(&$build, &$settings) {
  ismaili_traffic_lights_handle_term_exclude_facets($build, $settings);
  ismaili_traffic_lights_handle_facets_label($build, $settings);
}

function is_one_facet_click ($str, $val) {
  $flag = '1';
  foreach ($str as $value) {
  if(substr($value,0,-2) != $val) {
              $flag = '0';
              break;
              }
  }
  return $flag;
}

function facet_clicked ($str) {
  $facet=array();
  foreach ($str as $value) {
    $facet[] = substr($value,0,-2);
  }
  $facet = array_unique($facet);
  return $facet;
}

/**
 * Handle facets labels and order for traffic lights
 * @param  [type] $build    [description]
 * @param  [type] $settings [description]
 * @return [type]           [description]
 */
function ismaili_traffic_lights_handle_facets_label(&$build, &$settings) {
  $remove_field_names = ismaili_custom_get_hidden_fields();
  $facets = array("salt_light", "fat_light", "sfat_light", "sugar_light", "fibre_light");
  $label_mapping = ismaili_traffic_lights_determine_light_labels();
  if (in_array($settings->facet, $remove_field_names)) {
     foreach($build as $key => $item) {
      unset($build[$key]);
     }
     return;
  }
  if (in_array($settings->facet, $facets)) {
    foreach($build as $key => $item) {
      if ($build[$key]["#active"] == 1) {
        $build[$key]["#active"] = 0;
      }
      $label_key = $item["#markup"];
      switch ($item["#markup"]) {
        case 'l':
          $build[$key]["#count"] = 10;
          if(is_one_facet_click ($_GET[f], $settings->facet) == '0'){
                foreach ($_GET[f] as $ky => $value) {
                  if(substr($value,0,-2) != $settings->facet) {
                    array_push($build[$key]["#query"]['f'], $value);
                  } else {
                    unset($build[$key]["#query"]['f'][$ky]);
                  }
                }
            } else  {
              foreach($build[$key]["#query"]['f'] as $ky => $val ){
                  unset($build[$key]["#query"]['f'][$ky]);
                }
            }
            array_push($build[$key]["#query"]['f'],$settings->facet.':l');
        break;
        case 'm':
          $build[$key]["#count"] = 20;
          if(is_one_facet_click ($_GET[f], $settings->facet) == '0'){
                foreach ($_GET[f] as $ky => $value) {
                  if(substr($value,0,-2) != $settings->facet) {
                    array_push($build[$key]["#query"]['f'], $value);
                  } else {
                    unset($build[$key]["#query"]['f'][$ky]);
                  }
                }
            } else  {
              foreach($build[$key]["#query"]['f'] as $ky => $val ){
                  unset($build[$key]["#query"]['f'][$ky]);
                }
            }
            array_push($build[$key]["#query"]['f'],$settings->facet.':l');
            array_push($build[$key]["#query"]['f'],$settings->facet.':m');
        break;
        case 'h':
          $build[$key]["#count"] = 30;
          array_push($build[$key]["#query"]['f'], $settings->facet.':l');
          array_push($build[$key]["#query"]['f'], $settings->facet.':m');
          array_push($build[$key]["#query"]['f'], $settings->facet.':h');
          foreach ($_GET[f] as $value) {
                array_push($build[$key]["#query"]['f'], $value);
          }
        break;
      }
      $build[$key]["#query"]['f'] = array_unique($build[$key]["#query"]['f']);
      $build[$key]["#query"]['f'] = array_values($build[$key]["#query"]['f']);
      $build[$key]["#markup"] = (isset($label_mapping[$label_key]['label'])) ? $label_mapping[$label_key]['label'] :  $item["#markup"];
    }

  }
  //color code
    if($_GET['f'] != ''){

      $clicked = facet_clicked($_GET['f']);
      if(in_array('fat_light', $clicked)) {
        if(in_array('fat_light:l', $_GET['f']) && !in_array('fat_light:m', $_GET['f']) && !in_array('fat_light:h', $_GET['f'])){
          drupal_add_js("jQuery(document).ready(function (){jQuery('.facetapi-facet-fat-light li:first')
       .nextAll('li').find('a').addClass('facetapi-active-custom');});", 'inline');
        } elseif(in_array('fat_light:l', $_GET['f']) && in_array('fat_light:m', $_GET['f']) && !in_array('fat_light:h', $_GET['f'])){
          drupal_add_js("jQuery(document).ready(function (){jQuery('.facetapi-facet-fat-light li:eq(1)')
       .next('li').find('a').addClass('facetapi-active-custom');});", 'inline');
        }
      }

      if(in_array('salt_light', $clicked)) {
        if(in_array('salt_light:l', $_GET['f']) && !in_array('salt_light:m', $_GET['f']) && !in_array('salt_light:h', $_GET['f'])){
          drupal_add_js("jQuery(document).ready(function (){jQuery('.facetapi-facet-salt-light li:first')
       .nextAll('li').find('a').addClass('facetapi-active-custom');});", 'inline');
        } elseif(in_array('salt_light:l', $_GET['f']) && in_array('salt_light:m', $_GET['f']) && !in_array('salt_light:h', $_GET['f'])){
          drupal_add_js("jQuery(document).ready(function (){jQuery('.facetapi-facet-salt-light li:eq(1)')
       .next('li').find('a').addClass('facetapi-active-custom');});", 'inline');
        }
      }
      if(in_array('sfat_light', $clicked)) {
        if(in_array('sfat_light:l', $_GET['f']) && !in_array('sfat_light:m', $_GET['f']) && !in_array('sfat_light:h', $_GET['f'])){
          drupal_add_js("jQuery(document).ready(function (){jQuery('.facetapi-facet-sfat-light li:first')
       .nextAll('li').find('a').addClass('facetapi-active-custom');});", 'inline');
        } elseif(in_array('sfat_light:l', $_GET['f']) && in_array('sfat_light:m', $_GET['f']) && !in_array('sfat_light:h', $_GET['f'])){
          drupal_add_js("jQuery(document).ready(function (){jQuery('.facetapi-facet-sfat-light li:eq(1)')
       .next('li').find('a').addClass('facetapi-active-custom');});", 'inline');
        }
      }
      if(in_array('sugar_light', $clicked)) {
        if(in_array('sugar_light:l', $_GET['f']) && !in_array('sugar_light:m', $_GET['f']) && !in_array('sugar_light:h', $_GET['f'])){
          drupal_add_js("jQuery(document).ready(function (){jQuery('.facetapi-facet-sugar-light li:first')
       .nextAll('li').find('a').addClass('facetapi-active-custom');});", 'inline');
        } elseif(in_array('sugar_light:l', $_GET['f']) && in_array('sugar_light:m', $_GET['f']) && !in_array('sugar_light:h', $_GET['f'])){
          drupal_add_js("jQuery(document).ready(function (){jQuery('.facetapi-facet-sugar-light li:eq(1)')
       .next('li').find('a').addClass('facetapi-active-custom');});", 'inline');
        }
      }
      if(in_array('fibre_light', $clicked)) {
        if(in_array('fibre_light:l', $_GET['f']) && !in_array('fibre_light:m', $_GET['f']) && !in_array('fibre_light:h', $_GET['f'])){
          drupal_add_js("jQuery(document).ready(function (){jQuery('.facetapi-facet-fiber-light li:first')
       .nextAll('li').find('a').addClass('facetapi-active-custom');});", 'inline');
        } elseif(in_array('fibre_light:l', $_GET['f']) && in_array('fibre_light:m', $_GET['f']) && !in_array('fibre_light:h', $_GET['f'])){
          drupal_add_js("jQuery(document).ready(function (){jQuery('.facetapi-facet-fiber-light li:eq(1)')
       .next('li').find('a').addClass('facetapi-active-custom');});", 'inline');
        }
      }

  }
  //
}

/**
 * Handle Taxonomy term Exclusion from facets
 * @param  [type] $build    [description]
 * @param  [type] $settings [description]
 * @return [type]           [description]
 */
function ismaili_traffic_lights_handle_term_exclude_facets(&$build, &$settings) {
  $data = variable_get('taxonomy_term_exclude',array());
  foreach($build as $key => $item) {
    if ($data[$key] == '1') {
      unset($build[$key]);
    }
  }
}

/**
 * fucntion hook_form_taxonomy_form_term_alter
 * Adding a new field to taxonomy term edit for for hiding a term in facets
 * @param  [type] $form       [description]
 * @param  [type] $form_state [description]
 * @param  [type] $form_id    [description]
 * @return [type]             [description]
 */
function ismaili_traffic_lights_form_taxonomy_form_term_alter(&$form, &$form_state, $form_id) {
  $data = variable_get('taxonomy_term_exclude',array());
  $key = $form_state['build_info']['args']['0']->tid;  
  $checked = (isset($data[$key]) ) ? $data[$key] : 0;
  $form['exclude_display'] = array(
    '#title' => 'Exclude from Display',
    '#type' => 'checkbox',
    '#default_value' => $checked,
  );
  $form['#submit'][] = 'ismaili_traffic_lights_taxonomy_form_submission';
}

/**
 * Set Taxonomy which needs to be ommited from display
 * @param  [type] $form       [description]
 * @param  [type] $form_state [description]
 * @return [type]             [description]
 */
function ismaili_traffic_lights_taxonomy_form_submission($form, &$form_state){
  $data = variable_get('taxonomy_term_exclude',array());
  $key = $form_state['values']['tid'];
  $data[$key] = $form_state['values']['exclude_display'];
  variable_set('taxonomy_term_exclude', $data);
}

/**
 * Implements hook_form_alter().
 * Set workbench for recipe.
 * @TODO: change this to form_id_alter().
 */
function ismaili_traffic_lights_form_alter(&$form, &$form_state, $form_id) {
  switch ($form_id) {
    case 'recipe_node_form':
      $form['#node']->workbench_access['1071'] = 1071;
      break;
  }
}

 /**
 * Get Configuration processed in array form.
 * @param  string $key [description]
 * @return [type]      [description]
 */
function ismaili_traffic_lights_determine_mappings($mapping_key, $default_data = '') {
  $traffic_light_label = variable_get($mapping_key, $default_data);
  $traffic_light_label_arr = explode(";", $traffic_light_label);
  $traffic_light_label_mapping = array();
  foreach($traffic_light_label_arr as $pos => $data) {
    $data_arr = explode(",", $data);
    if (!isset($data_arr[0])) {
      continue;
    }
    $key = drupal_strtolower($data_arr[0]);
    $name = (isset($data_arr[1])) ? $data_arr[1] : '';
    $label = (isset($data_arr[2])) ? $data_arr[2] : '';
    if (empty($name)) {
      continue;
    }
    $traffic_light_label_mapping[$key]['name'] = $name;
    $traffic_light_label_mapping[$key]['label'] = $label;
  }
  return $traffic_light_label_mapping;
}