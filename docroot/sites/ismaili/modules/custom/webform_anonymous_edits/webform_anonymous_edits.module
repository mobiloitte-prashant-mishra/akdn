<?php

define('WEBFORM_ANONYMOUS_MAIN_LABEL', t('Theismaili core'));

/**
* Implementation of hook_menu().
*/
function webform_anonymous_edits_menu() {
  $items['generate-token/subscribe'] = array(
    'title' => 'Generate Token',
    'description' => 'Please enter your Email used in subscription.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('webform_anonymous_edits_generate_token_subscribe_form'),
    'access callback' => TRUE,
  );
  $items['admin/config/webform_anonymous_edits/settings'] = array(
    'title' => 'Configure Webform Subscription Edits',
    'description' => 'Allow anonymous users edit',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('webform_anonymous_edits_webform_settings_config'),
    'access arguments' => array('webform_anonymous_edit_config'),
  );
  return $items;
}

/**
 * Implements hook_init().
 */
function webform_anonymous_edits_init() {
  global $user;
  if ((arg(2) == 'webform-results') && ($user->uid == 0)) {
    drupal_goto();
  }
  if ((arg(2) == 'webform-results') && (!webform_anonymous_edits_check_valid_user())) {
    drupal_goto();
  }
}

/**
 * Check For valid authenticated user for access
 * @return [type] [description]
 */
function webform_anonymous_edits_check_valid_user() {
  global $user;
  $allowed_roles = variable_get('webform_anonymous_edits_role_info', array());
  foreach ($user->roles as $rid => $name) {
    if ($allowed_roles[$rid] > 0) {
      return TRUE;
    }
  }
  return FALSE;
}

/**
 * Setting for Anonymous edit access on webforms.
 * @param  [type] $form_state [description]
 * @return [type]             [description]
 */
function webform_anonymous_edits_webform_settings_config($form_state) {
  $result = db_query("SELECT nid, title, status FROM {node} WHERE type = 'webform'");
  $webform_edit_allowed = $role_items = $webform_items = array();
  $webform_items = webform_anonymous_edits_retrieve_webform_info();
  $form['webform_anonymous_edits_webform_info'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Webform for Anonymous edit Access'),
    '#options' => $webform_items,
    '#description' => t('Choose Forms for annonymous edit access on subscriptions'),
    '#default_value' => variable_get('webform_anonymous_edits_webform_info', array()),
  );
  $role_items = webform_anonymous_edits_retrieve_role_info();
  $form['webform_anonymous_edits_role_info'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Roles for Anonymous edit Access'),
    '#options' => $role_items,
    '#description' => t('Choose roles for annonymous edit access on subscriptions'),
    '#default_value' => variable_get('webform_anonymous_edits_role_info', array()),
  );
  $webform_component_info = webform_anonymous_edits_retrieve_web_email_info();
  variable_set('webform_component_info', $webform_component_info);
  return system_settings_form($form);
}

/**
 * Implements hook_permission().
 */
function webform_anonymous_edits_permission() {
  return array(
    'webform_anonymous_edit_config' => array(
      'description' => t('Allow anonymous user edit their webform entry.'),
      'title' => t('Anonymous Webform Edit Right'),
      ),
  );
}

/**
 * Implementation of hook_rules_event_info()
 */
function webform_anonymous_edits_rules_event_info() {
  return array(
    'webform_anonymous_edits' => array(
      'label' => t('Anonymous Subscription info'),
      'module' => 'webform_anonymous_edits',
      'group' => 'Subscription' ,
      'variables' => array(
        'mail' => array('type' => 'text', 'label' => t('subscripion email.')),
        'edit_link' => array('type' => 'text', 'label' => t('Link text.')),
        'title' => array('type' => 'text', 'label' => t('Title of the subscription.')),
      ),
    ),
  );
}

/**
 * Newsletter subscription token generation form.
 */
function webform_anonymous_edits_generate_token_subscribe_form($form, &$form_state) {
  $mail = (valid_email_address($_GET['mail'])) ? check_plain($_GET['mail']) : '';
  $webform_id = (isset($_GET['webform_id'])) ? intval($_GET['webform_id']) : '';
  $description = t('Please enter your Email used in subscription.');
  $form['email'] = array(
    '#type' => 'textfield',
    '#title' => t('Email'),
    '#description' => $description,
    '#default_value' => $mail,
    '#required' => TRUE,
  );
  $form['webform_id'] = array(
    '#type' => 'hidden',
    '#default_value' => $webform_id,
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Submit',
  );
  return $form;
}

/**
 * Form validation for anonymous user subscription presence.
 * @param  [type] $form       [description]
 * @param  [type] $form_state [description]
 * @return [type]             [description]
 */
function webform_anonymous_edits_generate_token_subscribe_form_validate($form, &$form_state) {
  $mail = $form['email']['#value'];
  if (!valid_email_address($mail)) {
    form_set_error('email', 'Please enter correct email address.');
  }
}

/**
 * Generate subscription edit link for anonymous user.
 * @param  [type] $form       [description]
 * @param  [type] $form_state [description]
 * @return [type]             [description]
 */
function webform_anonymous_edits_generate_token_subscribe_form_submit($form, &$form_state) {
  $mail = (isset($form['email']['#value'])) ? check_plain(trim($form['email']['#value'])) : '';
  $form_id = intval(trim($form['webform_id']['#value']));
  $subscribe_info = array();
  $subscribe_info = webform_anonymous_edits_check_mail_presence($mail, $form_id);
  if ($subscribe_info['found'] == 1) {
    drupal_set_message(t('Mail is sent at your email @mail', array('@mail' => $mail)));
    rules_invoke_event('webform_anonymous_edits', $mail, $subscribe_info['link'],
      $subscribe_info['data']->data->title);
  }
  else {
    drupal_set_message(t('There is no such subscription with this mail @mail', array('@mail' => $mail)));
  }
}

/**
 * Check the presence of subscription for given Newsletter.
 * @param  [type] $mail    [description]
 * @param  [type] $form_id [description]
 * @return [type]          [description]
 */
function webform_anonymous_edits_check_mail_presence($mail, $form_id) { 
  $webform_component_info = $webform_info = array();
  $form_id = intval($form_id);
  $webform_component_info = variable_get('webform_component_info', $webform_component_info);
  $webform_info = variable_get('webform_anonymous_edits_webform_info', array());
  $subscribe_info = array('found' => 0, 'cid' => 0);
  foreach ($webform_info as $web_form_id => $web_form_set_value) {
    if ($form_id > 0) {
      if ($form_id != $web_form_id) {
        continue;
      }
    }
    if (!$web_form_set_value) {
      continue;
    }
    $data = $webform_component_info[$web_form_id];
    $subscription_info = webform_anonymous_edits_retrieve_susbcription_info($data->nid, $data->cid, $mail);
    if ($subscription_info['found'] == 1) {
      $subscribe_info = array('found' => 1, 'cid' => $data->cid, 'data' => $data,
        'link' => $subscription_info['link']);
    }
  }
  return $subscribe_info;
}

/**
 * Get user subscription info
 * @param  [type] $nid  [description]
 * @param  [type] $cid  [description]
 * @param  [type] $mail [description]
 * @return [type]       [description]
 */
function webform_anonymous_edits_retrieve_susbcription_info($nid, $cid, $mail) {
  $output = array('found' => 0);
  $sid = db_query('SELECT sid FROM {webform_submitted_data}
    WHERE nid = :pnid and cid = :pcid and data like :pdata',
      array(':pnid' => $nid, ':pcid' => $cid, ':pdata' => $mail))->fetchField();
  $sid = intval($sid);
  if (!$sid) {
    return $output;
  }
  $token = webform_anonymous_edits_generate_token('token' . $sid . $nid);
  $params = array('token' => $token);
  $edit_link = l(t('Click here'), 'node/' . $nid . '/submission/' . $sid . '/edit', array('query' => $params, 'html' => TRUE));
  $output['link'] = $edit_link;
  $output['found'] = 1;
  return $output;
}

/**
 * Implements hook_form_alter().
 * Handle annonymous user access for webform submmited record edit.
 * @TODO: change this to form_id_alter().
 */
function webform_anonymous_edits_form_alter(&$form, &$form_state, $form_id) {
  global $user;
  if ($form_id == 'simplenews_node_form') {
    webform_anonymous_edits_change_newsletter_category_title($form, $form_state, $form_id);  
  }
  if (($form_id == 'simplenews_admin_newsletter_issues') or ($form_id == 'simplenews_admin_subscription') ) {
    webform_anonymous_edits_change_newsletter_category_title_at_creation($form, $form_state, $form_id);  
  }
  $web_form_id = str_ireplace("webform_client_form_", "", $form_id);
  if ($web_form_id == $form_id) {
    return;
  }
  // Reset Form info
  webform_anonymous_edits_retain_submitted_email_info($form, $form_state, $form_id);

  // Add susbcribe edit path so that user can get link for his submitted webforms.
  webform_anonymous_edits_show_retrieve_edit_info($form, $form_state, $form_id);
  
  if (!(arg(0) == 'node' && arg(1) == $web_form_id && arg(2) == 'submission' && arg(3) != '' && arg(4) == 'edit')) {
    return;
  }
  unset($form['submitted']['email']); // Hide email and category informations
  if (($user->uid) && (webform_anonymous_edits_check_valid_user())) {
    return;
  }
  $allowed_webforms = variable_get('webform_anonymous_edits_webform_info', array());
  if (!$allowed_webforms[$web_form_id]) {
    drupal_access_denied();
  }
  webform_anonymous_edits_generate_token_form($form, $form_state, $web_form_id);
}

/**
 * Handle simplenews_admin_newsletter_issues [Name category Spacewise]
 * @param  [type] $form       [description]
 * @param  [type] $form_state [description]
 * @param  [type] $form_id    [description]
 * @return [type]             [description]
 */
function webform_anonymous_edits_change_newsletter_category_title_at_creation(&$form, &$form_state, $form_id) {
  global $user;
  $space_info = ismaili_custom_retrieve_institutional_space_info();
  $allowed_categories = array();
  switch ($form_id) {
    case 'simplenews_admin_subscription':
      $options = $form['filter']['filters']['list']['#options'];
      break;
    default:
      $options = $form['filter']['filters']['category']['#options'];
      break;
  }
  if ((isset($user->roles['11'])) or (isset($user->roles['26']))) {
    $allowed_categories['all'] = 'All newsletters';
    $allowed_categories['tid-21'] = $options['tid-21'] . " (" . t(WEBFORM_ANONYMOUS_MAIN_LABEL) . ")";
    $allowed_categories['tid-9001'] = $options['tid-9001'] . " (" . t(WEBFORM_ANONYMOUS_MAIN_LABEL) . ")";
  }
  foreach ($space_info as $space_nid => $space_data) {
    $title = $space_data->title;
    $link = l(t($title), 'node/' . $space_nid);
    if (is_array($space_data->news_vid) && count($space_data->news_vid) > 0) {
      foreach ($space_data->news_vid as $key => $value) {
        if (isset($options['tid-' . $key])) {
          $allowed_categories['tid-' . $key] = $options['tid-' . $key] . "(" . $title . ")";
        }
      }
    }
  }
 switch ($form_id) {
    case 'simplenews_admin_subscription':
      unset($form['filter']['filters']['list']['#options']);
      $form['filter']['filters']['list']['#options'] = $allowed_categories;
      break;
    default:
      unset($form['filter']['filters']['category']['#options']);
      $form['filter']['filters']['category']['#options'] = $allowed_categories;
      break;
  }
}

/**
 * Handle simplenews_admin_newsletter_issues [Name category Spacewise]
 * @param  [type] $form       [description]
 * @param  [type] $form_state [description]
 * @param  [type] $form_id    [description]
 * @return [type]             [description]
 */
function webform_anonymous_edits_change_newsletter_category_title(&$form, &$form_state, $form_id) {
  global $user;
  $space_info = ismaili_custom_retrieve_institutional_space_info();
  if (!((isset($user->roles['11'])) or (isset($user->roles['26'])))) {
    return;
  }
  $space_info = ismaili_custom_retrieve_institutional_space_info();
  $options = $form['field_simplenews_term']['und']['#options'];
  $allowed_categories = array();
  $allowed_categories['21'] = $options['21'] . " (" . t(WEBFORM_ANONYMOUS_MAIN_LABEL) . ")";
  $allowed_categories['9001'] = $options['9001'] . " (" . t(WEBFORM_ANONYMOUS_MAIN_LABEL) . ")";
  foreach ($space_info as $space_nid => $space_data) {
      $title = $space_data->title;
      $link = l(t($title), 'node/' . $space_nid);
      if (is_array($space_data->news_vid) && count($space_data->news_vid) > 0) {
        foreach ($space_data->news_vid as $key => $value) {
          if (isset($options[$key])) {
            $allowed_categories[$key] = $options[$key] . " (" . $title . ")";
          }
        }
      }
  }
 // unset($form['field_simplenews_term']['und']['#options']);
  $allowed_categories = array_replace($form['field_simplenews_term']['und']['#options'],$allowed_categories); 
  $form['field_simplenews_term']['und']['#options'] = $allowed_categories;
}

/**
 * Reset Subscription info.
 * @param  [type] $form       [description]
 * @param  [type] $form_state [description]
 * @param  [type] $form_id    [description]
 * @return [type]             [description]
 */
function webform_anonymous_edits_retain_submitted_email_info(&$form, &$form_state, $form_id) {
  $temp_value = '';
  unset($form['submitted']['email']['#title']);
  if(isset($_SESSION['temp_variable'])) {
    $temp_value = $_SESSION['temp_variable'];
    unset($_SESSION['temp_variable']);
  }
  if ($temp_value) {
    $form['submitted']['email']['newsletter_selection']['newsletter_email_address']['#default_value'] = $temp_value;
    $form['submitted']['email']['newsletter_email_address']['#default_value'] = $temp_value;
  }
}

/**
* Show susbscribe edit path for anonymous users
* @param  [type] $form       [description]
* @param  [type] $form_state [description]
* @param  [type] $form_id    [description]
* @return [type]             [description]
*/
function webform_anonymous_edits_show_retrieve_edit_info(&$form, &$form_state, $form_id) {
  $web_form_id = str_ireplace("webform_client_form_", "", $form_id);
  if (!(arg(0) == 'node' && arg(1) == $web_form_id && arg(2) == '')) {
    return;
  }
  $allowed_webforms = variable_get('webform_anonymous_edits_webform_info', array());
  if (!$allowed_webforms[$web_form_id]) {
    return;
  }
  $params = array('webform_id' => $web_form_id);
  $link = l(t('click here'), 'generate-token/subscribe',
    array( 'html' => TRUE,
      'query' => $params,
      'attributes' => array('class' => 'subscribe-edit-link')));
  $markup_info = '<span class="subscribe-edit-info">' . t("If you have already subscribed, please ") . $link . t(' to edit your information.') . '<span>';
  $form['hide_nutrient_field'] = array(
    '#markup' =>  $markup_info,
  );
}

/**
 * Handle Newsletter subscription Editing by any tokenied user.
 * @param  [type] $form       [description]
 * @param  [type] $form_state [description]
 * @return [type]             [description]
 */
function webform_anonymous_edits_generate_token_form(&$form, &$form_state, $web_form_id) {
  global $user;
  $token = '';
  if (!(arg(0) == 'node' && arg(1) == $web_form_id && arg(2) == 'submission' && arg(3) != '' && arg(4) == 'edit')) {
    return;
  }
  $form['submitted']['email']['newsletter_email_address']['#default_value'] = $form['submitted']['email']['email']['#default_value'];
  $form['submitted']['email']['newsletter_selection']['newsletter_email_address']['#default_value'] = $form['submitted']['email']['email']['#default_value'];
  $sid = $form['#submission']->sid;
  $token = webform_anonymous_edits_generate_token('token' . $sid . $web_form_id);
  $update_subscribe_token = (isset($_GET['token'])) ? trim($_GET['token']) : '';
  if ($update_subscribe_token === $token) {
  }
  else {
    $params = array('webform_id' => arg(1));
    $link = l(t('click here'), 'generate-token/subscribe',
      array( 'html' => TRUE,
        'query' => $params,
        'attributes' => array('class' => 'subscribe-edit-link')
      )
    );
    drupal_set_message(t("Invalid Token. Please ") . $link .
      t(" to generate token.", array('@link' => $link)));
    drupal_access_denied();
    return;
  }
  $form['#validate'][] = 'webform_anonymous_edits_webform_client_form_validate';
}

/**
 * Form validation for anonymous user subscription presence.
 * @param  [type] $form       [description]
 * @param  [type] $form_state [description]
 * @return [type]             [description]
 */
function webform_anonymous_edits_webform_client_form_validate($form, &$form_state) {
  $sid = arg(3);
  $web_form_id = arg(1);
  $token = webform_anonymous_edits_generate_token('token' . $sid . $web_form_id);
  $update_subscribe_token = trim($_GET['token']);
  if ($update_subscribe_token == $token) {
  }
  else {
    $link = l(t('click here'), 'generate-token/subscribe');
    drupal_set_message(t("Invalid Token. Please @link to generate token.", array('@link' => $link)));
    drupal_access_denied();
    form_set_error('', 'Invalid access.');
  }
}

/**
 * Generate token
 * @param type $pattern
 * @return type
 */
function webform_anonymous_edits_generate_token($pattern) {
  $token_query = drupal_hmac_base64($pattern, drupal_get_private_key() . drupal_get_hash_salt());
  return $token_query;
}

/**
 * [webform_anonymous_edits_retrieve_web_email_info description]
 * @return [type] [description]
 */
function webform_anonymous_edits_retrieve_web_email_info() {
  $result = db_query("SELECT w.nid,w.cid,w.pid,w.form_key,w.name,w.type,n.title FROM {webform_component} w
    LEFT JOIN {node} n ON (w.nid=n.nid) WHERE w.type in ('email', 'newsletter_email')");
  $webform_component_info = array();
  foreach ($result as $data) {
    $webform_component_info[$data->nid] = $data;
  }
  return $webform_component_info;
}

/**
 * Retrieve Role info
 * @return [type] [description]
 */
function webform_anonymous_edits_retrieve_role_info() {
  $result = db_query("SELECT rid, name FROM {role} where rid > 1");
  $role_info = array();
  foreach ($result as $data) {
    $role_info[$data->rid] = $data->name;
  }
  return $role_info;
}

/**
 * Retrieve Webform info
 * @return [type] [description]
 */
function webform_anonymous_edits_retrieve_webform_info() {
  $result = db_query("SELECT nid, title, status FROM {node} WHERE type = 'webform'");
  $webform_info = array();
  foreach ($result as $data) {
    $webform_info[$data->nid] = $data->title;
  }
  return $webform_info;
}

/**
 * Create a taxonomy term and return the tid.
 */
function webform_anonymous_edits_create_taxonomy_term($tid) {
  $term = taxonomy_term_load($tid);
  $term->tid = '';
  taxonomy_term_save($term);
  return $term->tid;
}

/**
 * Clone webform on node creation.
 * @param  [type] $node [description]
 * @return [type]       [description]
 */
function webform_anonymous_edits_webform_clone($node, $parameters = array('master_webform_id' => 25566,
  'title' => 'Contact us',
  'variable_name' => 'master_webform_id',
  'space_tid' => 0,
  'subscribe_category' => array())) {
  // load the webform you want to copy by nid, NULL the vid, don't cache
  $master_webform_id = variable_get($parameters['variable_name'], $parameters['master_webform_id']);
  $n = node_load($master_webform_id, NULL, FALSE); //in my case the nid for my webform is 36
  $n->title = $parameters['title'];
  //assign to node author to be the author of this form
  if (count($parameters['subscribe_category'])) {
    unset($n->webform['components']['7']['extra']['news_vid']);
    $n->webform['components']['7']['extra']['news_vid'] = $parameters['subscribe_category'];
  }
  $n->uid =  $node->uid;
  //null out the nid so a new node will be created
  $n->nid = NULL;
  $n->path = NULL;
  //null out of the vid because this is a unique field
  $n->vid = NULL;
  //null out the created date so a new created data will be added
  $n->created = NULL;
  $new = node_load($node->nid, NULL, FALSE);
  $nat = $new->nat;
  $tid = key($nat);
  if ($parameters['space_tid'] > 0) {
    unset($n->field_microsite_institutional_sp);
    $n->field_microsite_institutional_sp[LANGUAGE_NONE]['0']['tid'] = $parameters['space_tid'];
  }
  $n->field_institutional_space[LANGUAGE_NONE]['0']['tid'] = $tid;
  //save the node
  node_save($n);
  return $n;
}

/**
 * Get Inormation from Old and copy into new one From simplenws category
 * @param  [type] $new_tid [description]
 * @param  [type] $old_tid [description]
 * @return [type]          [description]
 */
function webform_anonymous_edits_simplenews_save_category($new_tid, $old_tid) {
  if (empty($old_tid) or empty($old_tid)) {
    return;
  }
  $new_tid = intval($new_tid);
  $old_tid = intval($old_tid);
  db_query("REPLACE INTO {simplenews_category} SELECT :pnew_tid,format,priority,receipt,from_name,email_subject,from_address,hyperlinks,new_account,opt_inout,block FROM {simplenews_category}
    WHERE tid = :pold_tid",
    array(':pnew_tid' => $new_tid, ':pold_tid' => $old_tid));
}