diff --git a/docroot/sites/all/modules/contrib/media_youtube/includes/MediaInternetYouTubeHandler.inc b/docroot/sites/all/modules/contrib/media
index 8737938..acf0696 100644
--- a/docroot/sites/all/modules/contrib/media_youtube/includes/MediaInternetYouTubeHandler.inc
+++ b/docroot/sites/all/modules/contrib/media_youtube/includes/MediaInternetYouTubeHandler.inc
@@ -1,4 +1,10 @@
 <?php
+/**
+ * @file media_youtube/includes/MediaInterenetYouTubeHandler.inc
+ *
+ * Contains MediaInternetYouTubeHandler.
+ */
+
 
 /**
  * Implementation of MediaInternetBaseHandler.
@@ -6,30 +12,47 @@
  * @see hook_media_internet_providers().
  */
 class MediaInternetYouTubeHandler extends MediaInternetBaseHandler {
+  /**
+   * Check if a YouTube video id is valid.
+   *
+   * Check against the oembed stream instead of the gdata api site to
+   * avoid "yt:quota too_many_recent_calls" errors.
+   *
+   * @return
+   *   Boolean.
+   */
+ static public function validId($id) {
+    $url = 'http://www.youtube.com/oembed?url=http%3A//youtube.com/watch%3Fv%3D'. $id;
+    $response = drupal_http_request($url, array('method' => 'HEAD'));
+    if ($response->code != 200) {
+//new lines below
+      watchdog('video field', "The following YouYube video is invalid: " . $id);
+      return TRUE;
+// original code that caused the migration to stop when it encountered an error. --     throw new MediaInternetValidationException("The YouTub
+        }
+    return TRUE;
+  }
+
+
   public function parse($embedCode) {
     $patterns = array(
       '@youtube\.com/watch[#\?].*?v=([^"\& ]+)@i',
       '@youtube\.com/embed/([^"\&\? ]+)@i',
       '@youtube\.com/v/([^"\&\? ]+)@i',
       '@youtube\.com/\?v=([^"\& ]+)@i',
-      '@youtu.be/([^"\&\? ]+)@i',
+      '@youtu\.be/([^"\&\? ]+)@i',
+      '@gdata\.youtube\.com/feeds/api/videos/([^"\&\? ]+)@i',
     );
     foreach ($patterns as $pattern) {
       preg_match($pattern, $embedCode, $matches);
-      if (isset($matches[1]) && $this->valid_id($matches[1])) {
+      // @TODO: Parse is called often. Refactor so that valid ID is checked
+      // when a video is added, but not every time the embedCode is parsed.
+      if (isset($matches[1]) && self::validId($matches[1])) {
         return file_stream_wrapper_uri_normalize('youtube://v/' . $matches[1]);
       }
     }
   }
 
-  public function valid_id($id) {
-    $url = 'http://gdata.youtube.com/feeds/api/videos/'. $id;
-    $response = drupal_http_request($url, array('method' => 'HEAD'));
-    if ($response->code != 200) {
-      throw new MediaInternetValidationException(t('The YouTube video ID is invalid or the video was deleted.'));
-    }
-    return TRUE;
-  }
 
   public function claim($embedCode) {
     if ($this->parse($embedCode)) {
@@ -37,17 +60,21 @@ class MediaInternetYouTubeHandler extends MediaInternetBaseHandler {
     }
   }
 
+
   public function getFileObject() {
     $uri = $this->parse($this->embedCode);
     $file = file_uri_to_object($uri, TRUE);
 
+
     if (empty($file->fid) && $info = $this->getOEmbed()) {
       $file->filename = truncate_utf8($info['title'], 255);
     }
 
+
     return $file;
   }
 
+
   /**
    * Returns information about the media. See http://video.search.yahoo.com/mrss.
    *
@@ -65,10 +92,21 @@ class MediaInternetYouTubeHandler extends MediaInternetBaseHandler {
     $rss_url = url('http://gdata.youtube.com/feeds/api/videos/' . $video_id, array('query' => array('v' => '2')));
     // @todo Use media_retrieve_xml() once it's upgraded to include elements
     //   from all namespaces, not just the document default namespace.
-    $entry = simplexml_load_file($rss_url);
+    $request = drupal_http_request($rss_url);
+    if (!isset($request->error)) {
+      $entry = simplexml_load_string($request->data);
+    }
+    else {
+      throw new Exception("Error Processing Request. (Error: {$response->code}, {$response->error})");
+
+
+      //if request wasn't successful, create object for return to avoid errors
+      $entry = new SimpleXMLElement();
+    }
     return $entry;
   }
 
+
   /**
    * Returns information about the media. See http://www.oembed.com/.
    *
@@ -77,13 +115,17 @@ class MediaInternetYouTubeHandler extends MediaInternetBaseHandler {
    *   'url', and other information as specified by the oEmbed standard.
    *   Otherwise, NULL.
    */
-  public function getOEmbed() {
+ public function getOEmbed() {
     $uri = $this->parse($this->embedCode);
-    $external_url = drupal_realpath($uri);
+    $external_url = file_create_url($uri);
     $oembed_url = url('http://www.youtube.com/oembed', array('query' => array('url' => $external_url, 'format' => 'json')));
     $response = drupal_http_request($oembed_url);
     if (!isset($response->error)) {
       return drupal_json_decode($response->data);
     }
+    else {
+      // commented out because caused migrate to stop when encountered an error --  throw new Exception("Error Processing Request. (Error: {$r
+      return ;
+    }
   }
 }
